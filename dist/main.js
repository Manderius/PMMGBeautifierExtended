/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["v"] = downloadFile;
/* harmony export (immutable) */ __webpack_exports__["m"] = createNode;
/* harmony export (immutable) */ __webpack_exports__["p"] = createSelectOption;
/* harmony export (immutable) */ __webpack_exports__["h"] = convertDurationToETA;
/* harmony export (immutable) */ __webpack_exports__["I"] = parseDuration;
/* harmony export (immutable) */ __webpack_exports__["f"] = cleanPlanetName;
/* harmony export (immutable) */ __webpack_exports__["t"] = createTextSpan;
/* harmony export (immutable) */ __webpack_exports__["s"] = createTextDiv;
/* harmony export (immutable) */ __webpack_exports__["j"] = createFinancialTextBox;
/* unused harmony export findInventoryAmount */
/* unused harmony export findBurnAmount */
/* harmony export (immutable) */ __webpack_exports__["a"] = CategorySort;
/* harmony export (immutable) */ __webpack_exports__["y"] = findCorrespondingPlanet;
/* harmony export (immutable) */ __webpack_exports__["H"] = parseBaseName;
/* harmony export (immutable) */ __webpack_exports__["J"] = parseInvName;
/* harmony export (immutable) */ __webpack_exports__["K"] = parsePlanetName;
/* harmony export (immutable) */ __webpack_exports__["D"] = getLocalStorage;
/* harmony export (immutable) */ __webpack_exports__["g"] = clearChildren;
/* harmony export (immutable) */ __webpack_exports__["M"] = setSettings;
/* harmony export (immutable) */ __webpack_exports__["c"] = XITWebRequest;
/* harmony export (immutable) */ __webpack_exports__["l"] = createMaterialElement;
/* harmony export (immutable) */ __webpack_exports__["k"] = createLink;
/* harmony export (immutable) */ __webpack_exports__["N"] = showBuffer;
/* harmony export (immutable) */ __webpack_exports__["e"] = changeValue;
/* harmony export (immutable) */ __webpack_exports__["z"] = genericCleanup;
/* unused harmony export genericUnhide */
/* harmony export (immutable) */ __webpack_exports__["P"] = targetedCleanup;
/* harmony export (immutable) */ __webpack_exports__["A"] = getBuffers;
/* harmony export (immutable) */ __webpack_exports__["B"] = getBuffersFromList;
/* unused harmony export getElementsByXPath */
/* unused harmony export sortTable */
/* harmony export (immutable) */ __webpack_exports__["r"] = createTable;
/* harmony export (immutable) */ __webpack_exports__["u"] = createToolTip;
/* harmony export (immutable) */ __webpack_exports__["G"] = makePopupSpacer;
/* harmony export (immutable) */ __webpack_exports__["o"] = createPopupInputRow;
/* harmony export (immutable) */ __webpack_exports__["n"] = createPopupCheckboxRow;
/* harmony export (immutable) */ __webpack_exports__["F"] = getValueOfPopupRow;
/* harmony export (immutable) */ __webpack_exports__["C"] = getCheckOfPopupRow;
/* harmony export (immutable) */ __webpack_exports__["q"] = createSmallButton;
/* harmony export (immutable) */ __webpack_exports__["i"] = createContractDict;
/* harmony export (immutable) */ __webpack_exports__["d"] = calculateBurn;
/* harmony export (immutable) */ __webpack_exports__["O"] = showWarningDialog;
/* harmony export (immutable) */ __webpack_exports__["w"] = drawLineChart;
/* harmony export (immutable) */ __webpack_exports__["x"] = drawPieChart;
/* harmony export (immutable) */ __webpack_exports__["E"] = getLocalStoragePromise;
/* harmony export (immutable) */ __webpack_exports__["L"] = setLocalStoragePromise;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameProperties__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Style__ = __webpack_require__(2);



function downloadFile(fileData, fileName, isJSON = true) {
    const blob = new Blob([isJSON ? JSON.stringify(fileData) : fileData], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const urlElement = document.createElement("a");
    urlElement.setAttribute("download", fileName);
    urlElement.href = url;
    urlElement.setAttribute("target", "_blank");
    urlElement.click();
    URL.revokeObjectURL(url);
    return;
}
function createNode(htmlString) {
    var div = document.createElement('div');
    div.innerHTML = htmlString.trim();
    return div.firstChild;
}
function createSelectOption(optionLabel, optionValue, rightAlign) {
    const option = document.createElement("option");
    option.value = optionValue;
    option.textContent = optionLabel;
    if (rightAlign) {
        option.style.direction = "rtl";
    }
    return option;
}
function convertDurationToETA(parsedSeconds) {
    const eta = new Date();
    const now = new Date();
    eta.setSeconds(eta.getSeconds() + parsedSeconds);
    const diffTime = Math.abs(eta.getTime() - now.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    let ret = eta.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    if (diffDays > 0) {
        ret += ` +${diffDays}d`;
    }
    return ret;
}
function parseDuration(duration) {
    const days = duration.match(/(\d+)\s*d/);
    const hours = duration.match(/(\d+)\s*h/);
    const minutes = duration.match(/(\d+)\s*m/);
    const seconds = duration.match(/(\d+)\s*s/);
    let parsedSeconds = 0;
    if (days) {
        parsedSeconds += parseInt(days[1]) * 86400;
    }
    if (hours) {
        parsedSeconds += parseInt(hours[1]) * 3600;
    }
    if (minutes) {
        parsedSeconds += parseInt(minutes[1]) * 60;
    }
    if (seconds) {
        parsedSeconds += parseInt(seconds[1]);
    }
    return parsedSeconds;
}
function cleanPlanetName(text) {
    text = text.replace(/\s*\([^)]*\)/, '');
    text = text.replace(/(\d)\s+(?=[a-zA-Z])/, '$1');
    text = text.replace(/.*\s-\s/, '');
    if (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["m" /* Stations */][text.slice(0, -1)]) {
        text = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["m" /* Stations */][text.slice(0, -1)];
    }
    return text;
}
function createTextSpan(text, className = "prun-remove-js") {
    const newSpan = document.createElement("span");
    newSpan.classList.add(className);
    newSpan.textContent = text;
    return newSpan;
}
function createTextDiv(text, className = "prun-remove-js") {
    const newSpan = document.createElement("div");
    newSpan.classList.add(className);
    newSpan.textContent = text;
    return newSpan;
}
function createFinancialTextBox(primaryText, secondaryText, primaryTextColor, className = "prun-remove-js") {
    const box = document.createElement("div");
    box.classList.add(className);
    box.classList.add("fin-box");
    const primaryTextSpan = document.createElement("span");
    primaryTextSpan.style.fontSize = "12px";
    primaryTextSpan.style.lineHeight = "1.1";
    primaryTextSpan.style.color = primaryTextColor;
    primaryTextSpan.textContent = primaryText;
    box.appendChild(primaryTextSpan);
    const secondaryTextDiv = document.createElement("div");
    secondaryTextDiv.textContent = secondaryText;
    secondaryTextDiv.style.fontSize = "10px";
    secondaryTextDiv.style.lineHeight = "1.1";
    secondaryTextDiv.style.marginTop = "2px";
    secondaryTextDiv.style.color = "#999";
    box.appendChild(secondaryTextDiv);
    return box;
}
function findInventoryAmount(ticker, inventory) {
    for (var i = 0; i < inventory["Inventory"].length; i++) {
        if (inventory["Inventory"][i]["MaterialTicker"] == ticker) {
            return inventory["Inventory"][i]["MaterialAmount"];
        }
    }
    return 0;
}
function findBurnAmount(ticker, inventory) {
    for (var i = 0; i < inventory["WorkforceConsumption"].length; i++) {
        if (inventory["WorkforceConsumption"][i]["MaterialTicker"] == ticker) {
            return inventory["WorkforceConsumption"][i]["DailyAmount"];
        }
    }
    return 0;
}
function CategorySort(a, b) {
    if (!__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][a] || !__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][b]) {
        return 0;
    }
    return __WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][a][1].localeCompare(__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][b][1]);
}
function findCorrespondingPlanet(planet, data, needBase) {
    if (!data || !planet) {
        return undefined;
    }
    for (var i = 0; i < data.length; i++) {
        if (planet && data[i]["PlanetNaturalId"] && data[i]["PlanetNaturalId"].toLowerCase() == planet.toLowerCase() && (!needBase || data[i]["type"] == "STORE" || data[i]["type"] == "BASE")) {
            return data[i];
        }
        else if (planet && data[i]["PlanetName"] && data[i]["PlanetName"].toLowerCase() == planet.toLowerCase() && (!needBase || data[i]["type"] == "STORE" || data[i]["type"] == "BASE")) {
            return data[i];
        }
        else if (planet && data[i]["PlanetNaturalId"] && __WEBPACK_IMPORTED_MODULE_1__GameProperties__["k" /* PlanetNames */][planet] && __WEBPACK_IMPORTED_MODULE_1__GameProperties__["k" /* PlanetNames */][planet].toLowerCase() == data[i]["PlanetNaturalId"].toLowerCase() && (!needBase || data[i]["type"] == "STORE" || data[i]["type"] == "BASE")) {
            return data[i];
        }
    }
    return undefined;
}
function parseBaseName(text) {
    try {
        var match = text.match(/@ ([A-Z]{2}-[0-9]{3} [a-z]) Base/);
        if (match && match[1]) {
            return match[1].replace(" ", "");
        }
        match = text.match(/@ ([A-z ]*) - ([A-z ]*) Base/);
        if (match && match[1] && match[2]) {
            return match[2];
        }
        match = text.match(/@ ([A-z ]*) ([A-z]) Base/);
        if (match && match[1] && match[2] && __WEBPACK_IMPORTED_MODULE_1__GameProperties__["n" /* SystemNames */][match[1].toUpperCase()]) {
            return __WEBPACK_IMPORTED_MODULE_1__GameProperties__["n" /* SystemNames */][match[1].toUpperCase()] + match[2].toLowerCase();
        }
        match = text.match(/@ [A-Z]{2}-[0-9]{3} - ([A-z ]*) Base/);
        if (match && match[1]) {
            return match[1];
        }
        return null;
    }
    catch (TypeError) {
        return text;
    }
}
function parseInvName(text) {
    try {
        const match = text.split(" ");
        if (match && match[1]) {
            return match[1];
        }
        return null;
    }
    catch (TypeError) {
        return null;
    }
}
function parsePlanetName(text) {
    try {
        const match = text.match(/\((.*?)\)/);
        if (match && match[1]) {
            return match[1];
        }
        return null;
    }
    catch (TypeError) {
        return null;
    }
}
function getLocalStorage(storageName, callbackFunction, params) {
    try {
        browser.storage.local.get(storageName).then(function (result) {
            callbackFunction(result, params);
        });
    }
    catch (err) {
        chrome.storage.local.get([storageName], function (result) {
            callbackFunction(result, params);
        });
    }
}
function clearChildren(elem) {
    elem.textContent = "";
    while (elem.children[0]) {
        elem.removeChild(elem.children[0]);
    }
    return;
}
function setSettings(result) {
    try {
        browser.storage.local.set(result);
    }
    catch (err) {
        chrome.storage.local.set(result, function () {
        });
    }
    return;
}
function XITWebRequest(tile, parameters, callbackFunction, url, requestType = "GET", header, content) {
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        tile.textContent = "Error! Data Could Not Be Loaded! Timed Out!";
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            callbackFunction(tile, parameters, xhr.responseText);
        }
        return;
    };
    xhr.timeout = 10000;
    xhr.open(requestType, url, true);
    if (url.includes("fnar")) {
        xhr.setRequestHeader("X-FIO-Application", "PMMGExtended");
    }
    if (header) {
        xhr.setRequestHeader(header[0], header[1]);
    }
    if (content) {
        xhr.send(content);
    }
    else {
        xhr.send(null);
    }
    return;
}
function createMaterialElement(ticker, className = "prun-remove-js", amount = "none", text = false, small = false) {
    if (!__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][ticker] && ticker != "SHPT") {
        return null;
    }
    const name = (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][ticker] || ["Shipment"])[0];
    const category = (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][ticker] || [undefined, "shipment"])[1];
    const matText = createTextSpan(ticker, className);
    matText.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MatText));
    const matTextWrapper = document.createElement("div");
    matTextWrapper.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MatTextWrapper));
    matTextWrapper.appendChild(matText);
    const material = document.createElement("div");
    material.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialElement));
    material.appendChild(matTextWrapper);
    material.style.background = __WEBPACK_IMPORTED_MODULE_2__Style__["b" /* CategoryColors */][category][0];
    material.style.color = __WEBPACK_IMPORTED_MODULE_2__Style__["b" /* CategoryColors */][category][1];
    material.title = name;
    material.addEventListener("click", function () {
        showBuffer("MAT " + ticker.toUpperCase());
    });
    const materialWrapper = document.createElement("div");
    materialWrapper.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialWrapper));
    materialWrapper.appendChild(material);
    const materialWrapperWrapper = document.createElement("div");
    materialWrapperWrapper.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialWrapperWrapper));
    materialWrapperWrapper.appendChild(materialWrapper);
    const outerLayer = document.createElement("div");
    outerLayer.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialOuter));
    outerLayer.classList.add(className);
    outerLayer.appendChild(materialWrapperWrapper);
    if (amount && amount != "none") {
        const materialNumberWrapper = document.createElement("div");
        materialNumberWrapper.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialNumberWrapper));
        materialWrapper.appendChild(materialNumberWrapper);
        const materialNumber = createTextDiv(amount, className);
        materialNumber.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialNumber));
        materialNumberWrapper.appendChild(materialNumber);
    }
    if (text) {
        const textElemWrapper = document.createElement("span");
        textElemWrapper.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].MaterialNameText));
        const textElem = createTextSpan(name, className);
        textElemWrapper.appendChild(textElem);
        outerLayer.appendChild(textElemWrapper);
    }
    if (small) {
        materialWrapper.classList.add("mat-element-small");
        return materialWrapper;
    }
    else {
        materialWrapper.classList.add("mat-element-large");
    }
    return outerLayer;
}
function createLink(text, command) {
    const link = document.createElement("span");
    link.textContent = text;
    link.addEventListener("click", function () { showBuffer(command); });
    const linkDiv = document.createElement("div");
    linkDiv.classList.add("link");
    linkDiv.appendChild(link);
    return linkDiv;
}
function showBuffer(command) {
    const button = document.getElementById(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].NewBFRButton);
    if (button == null) {
        return false;
    }
    const addSubmitCommand = (input, cmd) => {
        changeValue(input, cmd);
        input.parentElement.parentElement.requestSubmit();
    };
    monitorOnElementCreated(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].BufferTextField, (elem) => addSubmitCommand(elem, command));
    button.click();
    return true;
}
function changeValue(input, value) {
    var propDescriptor = Object.getOwnPropertyDescriptor(window["HTMLInputElement"].prototype, "value");
    if (propDescriptor == undefined) {
        return;
    }
    var nativeInputValueSetter = propDescriptor.set;
    if (nativeInputValueSetter == undefined) {
        return;
    }
    nativeInputValueSetter.call(input, value);
    var inputEvent = document.createEvent('Event');
    inputEvent.initEvent('input', true, true);
    input.dispatchEvent(inputEvent);
}
function monitorOnElementCreated(selector, callback, onlyOnce = true) {
    const getElementsFromNodes = (nodes) => (Array.from(nodes)).flatMap(node => node.nodeType === 3 ? null : Array.from(node.querySelectorAll(selector))).filter(item => item !== null);
    let onMutationsObserved = function (mutations) {
        mutations.forEach(function (mutation) {
            if (mutation.addedNodes.length) {
                var elements = getElementsFromNodes(mutation.addedNodes);
                for (var i = 0, len = elements.length; i < len; i++) {
                    callback(elements[i]);
                    if (onlyOnce)
                        observer.disconnect();
                }
            }
        });
    };
    let containerSelector = 'body';
    let target = document.querySelector(containerSelector);
    if (!target) {
        return;
    }
    let config = { childList: true, subtree: true };
    let MutationObserver = window["MutationObserver"] || window["WebKitMutationObserver"];
    let observer = new MutationObserver(onMutationsObserved);
    observer.observe(target, config);
    return;
}
function genericCleanup(className = "prun-remove-js") {
    Array.from(document.getElementsByClassName(className)).forEach((elem) => {
        elem.parentNode && elem.parentNode.removeChild(elem);
        return;
    });
    return;
}
function genericUnhide(className = "prun-remove-js") {
    Array.from(document.getElementsByClassName(className + "-hidden")).forEach((elem) => {
        elem.style.display = "";
        elem.classList.remove(className + "-hidden");
        return;
    });
    return;
}
function targetedCleanup(className, element) {
    Array.from(element.getElementsByClassName(className)).forEach((elem) => {
        elem.parentNode && elem.parentNode.removeChild(elem);
        return;
    });
    return;
}
function getBuffers(bufferCode) {
    const nodes = document.evaluate(`//div[@class='${__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].BufferHeaderClass}'][starts-with(translate(., 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), '${bufferCode}')]/../..`, document, null, XPathResult.ANY_TYPE, null);
    var buffers = [];
    var node;
    while (node = nodes.iterateNext()) {
        buffers.push(node);
    }
    return buffers;
}
function getBuffersFromList(bufferCode, buffers) {
    const matchingBuffers = buffers
        .filter(([firstElement]) => firstElement.toLowerCase().startsWith(bufferCode.toLowerCase()))
        .map(([, secondElement]) => secondElement);
    return matchingBuffers;
}
function getElementsByXPath(xpath) {
    const result = document.evaluate(xpath, document, null, XPathResult.ANY_UNORDERED_NODE_TYPE, null);
    const output = [];
    try {
        let node = result.iterateNext();
        while (node) {
            output.push(node);
            node = result.iterateNext();
        }
    }
    catch (e) {
    }
    return output;
}
function sortTable(table, column, sortType) {
    var sorter = [];
    if (table.children[1] == null) {
        return;
    }
    const rows = Array.from(table.children[1].children);
    for (var i = 0; i < rows.length; i++) {
        var item = rows[i].children[column];
        if (item == null || item.firstChild == null) {
            break;
        }
        sorter.push([item.firstChild.textContent, rows[i]]);
    }
    if (sortType == "alph") {
        sorter.sort(tableSortAlph);
    }
    sorter.forEach(item => {
        table.children[1].insertBefore(table.children[1].children[0], item[1]);
    });
}
function tableSortAlph(a, b) {
    return a[0].localeCompare(b[0]);
}
function createTable(tile, headers) {
    let table = document.createElement("table");
    tile.appendChild(table);
    const thead = document.createElement("thead");
    table.appendChild(thead);
    const headerRow = document.createElement("tr");
    thead.appendChild(headerRow);
    for (let title of headers) {
        const header = document.createElement("th");
        header.textContent = title;
        header.style.paddingTop = "0";
        headerRow.appendChild(header);
    }
    const tbody = document.createElement("tbody");
    table.appendChild(tbody);
    return tbody;
}
function createToolTip(text, position) {
    const tooltip = document.createElement("span");
    tooltip.innerHTML = `<span data-tooltip="${text}" data-tooltip-position="${position}" class="kfU78EaaOVbQR2YM0eeGew==" style="float: revert;font-size: 12px;margin-top:-4px;">ⓘ</span>`;
    return tooltip.firstChild || tooltip;
}
function makePopupSpacer(tile, toRemove) {
    const spacer = document.createElement("div");
    spacer.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].Spacer);
    spacer.addEventListener("click", function () {
        tile.removeChild(toRemove);
        return;
    });
    return spacer;
}
function createPopupInputRow(label, text = "", tooltip = "") {
    const inputRow = document.createElement("div");
    inputRow.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormRow);
    const inputLabel = document.createElement("label");
    inputLabel.textContent = label;
    if (tooltip != "") {
        inputLabel.appendChild(createToolTip(tooltip, "right"));
    }
    inputLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormLabel);
    inputRow.appendChild(inputLabel);
    const inputInputDiv = document.createElement("div");
    inputInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormInput);
    inputRow.appendChild(inputInputDiv);
    const inputInput = document.createElement("input");
    inputInput.style.width = "80%";
    inputInputDiv.appendChild(inputInput);
    inputInput.value = text;
    return inputRow;
}
function createPopupCheckboxRow(label, enabled = false, tooltip = "") {
    const inputRow = document.createElement("div");
    inputRow.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormRow);
    const inputLabel = document.createElement("label");
    inputLabel.textContent = label;
    if (tooltip != "") {
        inputLabel.appendChild(createToolTip(tooltip, "right"));
    }
    inputLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormLabel);
    inputRow.appendChild(inputLabel);
    const inputInputDiv = document.createElement("div");
    inputInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormInput);
    inputRow.appendChild(inputInputDiv);
    const inputInput = document.createElement("input");
    inputInput.type = "checkbox";
    inputInputDiv.appendChild(inputInput);
    inputInput.checked = enabled;
    return inputRow;
}
function getValueOfPopupRow(row) {
    if (!row || !row.children[1] || !row.children[1].firstChild) {
        return "";
    }
    else {
        return row.children[1].firstChild.value || "";
    }
}
function getCheckOfPopupRow(row) {
    if (!row || !row.children[1] || !row.children[1].firstChild) {
        return false;
    }
    else {
        return row.children[1].firstChild.checked || false;
    }
}
function createSmallButton(label, clickFunction, parameters) {
    const button = document.createElement("button");
    button.textContent = label;
    button.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SmallButton);
    button.addEventListener("click", function () { clickFunction(...parameters); });
    return button;
}
function createContractDict(contracts, contractdict) {
    for (let i = 0; i < contracts.length; i++) {
        const element = contracts[i];
        contractdict[element['localId']] = element;
    }
}
function calculateBurn(production, workforce, inventory) {
    const burnDict = {};
    if (production && production.lines) {
        production.lines.forEach(line => {
            const numLines = line.capacity;
            var hasRecurring = false;
            var totalDuration = 0;
            line.orders.forEach(order => {
                if (!order.started) {
                    hasRecurring = hasRecurring || order.recurring;
                }
            });
            line.orders.forEach(order => {
                if (!order.started && (!hasRecurring || order.recurring)) {
                    totalDuration += order.duration;
                }
            });
            totalDuration /= 86400000;
            line.orders.forEach(order => {
                if (!order.started && (!hasRecurring || order.recurring)) {
                    order.outputs.forEach(mat => {
                        if (burnDict[mat["MaterialTicker"]]) {
                            burnDict[mat["MaterialTicker"]]["DailyAmount"] += mat["Amount"] * numLines / totalDuration;
                        }
                        else {
                            burnDict[mat["MaterialTicker"]] = { "DailyAmount": mat["Amount"] * numLines / totalDuration, "Inventory": 0, "DaysLeft": 0, "Type": "output" };
                        }
                    });
                    order.inputs.forEach(mat => {
                        if (burnDict[mat["MaterialTicker"]]) {
                            burnDict[mat["MaterialTicker"]]["DailyAmount"] -= mat["Amount"] * numLines / totalDuration;
                            if (burnDict[mat["MaterialTicker"]]["Type"] == "output") {
                                burnDict[mat["MaterialTicker"]]["Type"] = "input";
                            }
                        }
                        else {
                            burnDict[mat["MaterialTicker"]] = { "DailyAmount": -mat["Amount"] * numLines / totalDuration, "Inventory": 0, "DaysLeft": 0, "Type": "input" };
                        }
                    });
                }
            });
        });
    }
    if (workforce && workforce.workforce) {
        workforce.workforce.forEach(tier => {
            if (tier.population > 1) {
                tier.needs.forEach(need => {
                    const ticker = need.material.ticker;
                    if (burnDict[ticker]) {
                        burnDict[ticker]["DailyAmount"] -= need.unitsPerInterval;
                        burnDict[ticker]["Type"] = "workforce";
                    }
                    else {
                        burnDict[ticker] = { "DailyAmount": -need.unitsPerInterval, "Inventory": 0, "DaysLeft": 0, "Type": "workforce" };
                    }
                });
            }
        });
    }
    if (inventory && inventory.items) {
        inventory.items.forEach(item => {
            if (burnDict[item.MaterialTicker]) {
                burnDict[item.MaterialTicker]["Inventory"] += item.Amount;
                if (item.Amount != 0) {
                    burnDict[item.MaterialTicker]["DaysLeft"] = burnDict[item.MaterialTicker]["DailyAmount"] > 0 ? 1000 : Math.floor(-burnDict[item.MaterialTicker]["Inventory"] / burnDict[item.MaterialTicker]["DailyAmount"]);
                }
            }
        });
    }
    return burnDict;
}
function showWarningDialog(tile, message = "Are you sure?", confirmButtonText = "Confirm", callbackFunction, parameters) {
    const displayTile = tile.parentElement.parentElement.parentElement;
    const overlay = document.createElement("div");
    displayTile.appendChild(overlay);
    overlay.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ActionOverlay);
    const centerInterface = document.createElement("div");
    overlay.appendChild(centerInterface);
    centerInterface.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ActionCenterInterface);
    const confirm = document.createElement("span");
    centerInterface.appendChild(confirm);
    confirm.textContent = "Confirmation Required";
    confirm.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ActionConfirm);
    const confirmMessage = document.createElement("span");
    centerInterface.appendChild(confirmMessage);
    confirmMessage.textContent = message;
    confirmMessage.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ActionConfirmMessage);
    const buttonDiv = document.createElement("div");
    centerInterface.appendChild(buttonDiv);
    buttonDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ActionButtons);
    const cancelButton = document.createElement("button");
    cancelButton.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].Button);
    cancelButton.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ButtonNeutral);
    cancelButton.textContent = "Cancel";
    buttonDiv.appendChild(cancelButton);
    const confirmButton = document.createElement("button");
    confirmButton.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].Button);
    confirmButton.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ButtonDanger);
    confirmButton.textContent = confirmButtonText;
    buttonDiv.appendChild(confirmButton);
    cancelButton.addEventListener("click", function () {
        displayTile.removeChild(overlay);
        return;
    });
    confirmButton.addEventListener("click", function () {
        displayTile.removeChild(overlay);
        if (parameters) {
            callbackFunction(parameters);
        }
        else {
            callbackFunction();
        }
        return;
    });
    return;
}
function drawLineChart(xData, yData, xSize, ySize, xLabel, yLabel, lineColor, isDates, currencySymbol) {
    const canvas = document.createElement("canvas");
    canvas.height = ySize;
    canvas.width = xSize;
    const context = canvas.getContext("2d");
    if (!context) {
        return null;
    }
    const minX = Math.min(...xData);
    const maxX = Math.max(...xData);
    const minY = Math.min(...yData);
    const maxY = Math.max(...yData);
    const zeroX = (xLabel ? 25 : 0) + context.measureText((maxY).toLocaleString(undefined, { "maximumFractionDigits": 0 })).width;
    const zeroY = yLabel ? ySize - 23 : ySize;
    if (xLabel) {
        const xLabelInfo = context.measureText(xLabel);
        context.font = "12px Droid Sans";
        context.fillStyle = "#eee";
        context.fillText(xLabel, xSize / 2 + zeroX / 2 - xLabelInfo.width / 2, ySize);
    }
    if (yLabel) {
        context.save();
        context.font = "12px Droid Sans";
        context.fillStyle = "#eee";
        context.translate(10, ySize / 2 + 10);
        context.rotate(-Math.PI / 2);
        context.fillText(yLabel, 0, 0);
        context.restore();
    }
    const scaleX = (xSize - zeroX) / (maxX - minX);
    const scaleY = (zeroY) / (maxY - minY);
    for (var i = 0; i < xData.length - 1; i++) {
        context.beginPath();
        context.moveTo((xData[i] - minX) * scaleX + zeroX, zeroY - (yData[i] - minY) * scaleY);
        context.lineTo((xData[i + 1] - minX) * scaleX + zeroX, zeroY - (yData[i + 1] - minY) * scaleY);
        context.strokeStyle = lineColor ? lineColor : "#f7a600";
        context.stroke();
    }
    context.beginPath();
    context.strokeStyle = "#bbb";
    context.moveTo(zeroX, zeroY);
    context.lineTo(xSize, zeroY);
    context.stroke();
    context.beginPath();
    context.moveTo(zeroX, zeroY);
    context.lineTo(zeroX, 0);
    context.stroke();
    for (i = 0; i < 10; i++) {
        const text = isDates ? (new Date((maxX - minX) * i / 10 + minX)).toLocaleDateString(undefined, { month: "2-digit", day: "2-digit" }) : ((maxX - minX) * i / 10 + minX).toLocaleString(undefined, { maximumFractionDigits: 2 });
        context.font = "10px Droid Sans";
        context.fillStyle = "#999";
        context.fillText(text, (xSize - zeroX) * i / 10 + zeroX, ySize - 12);
    }
    for (i = 0; i <= 5; i++) {
        var value = (maxY - minY) * i / 5 + minY;
        value = Math.round(value / Math.pow(10, Math.floor(Math.log10(value)) - 3)) * Math.pow(10, Math.floor(Math.log10(value)) - 3);
        const text = (currencySymbol ? currencySymbol : "") + (value).toLocaleString(undefined, { "maximumFractionDigits": 0 });
        const textInfo = context.measureText(text);
        context.font = "10px Droid Sans";
        context.fillStyle = "#999";
        context.fillText(text, zeroX - textInfo.width - 2, -(zeroY - 8) * i / 5 + zeroY);
    }
    return canvas;
}
function drawPieChart(data, size, text, colors) {
    const pieSize = size / 2 - 12;
    const centerX = size * 1.5;
    const centerY = size / 2 + 12;
    var angle = 0;
    var sum = 0;
    data.forEach(point => {
        sum += point;
    });
    const canvas = document.createElement("canvas");
    canvas.height = size + 24;
    canvas.width = size * 3;
    const context = canvas.getContext("2d");
    if (!context) {
        return null;
    }
    for (var i = 0; i < data.length; i++) {
        const pieAngle = data[i] / sum * 2 * Math.PI;
        context.beginPath();
        context.arc(centerX, centerY, pieSize, angle, angle + pieAngle);
        context.stroke();
        angle += pieAngle;
        context.lineTo(centerX, centerY);
        if (colors) {
            context.fillStyle = colors[i] || "#00ff00";
        }
        else {
            context.fillStyle = i == data.length - 1 && data.length % __WEBPACK_IMPORTED_MODULE_2__Style__["d" /* DefaultColors */].length == 1 && data.length > 1 ? __WEBPACK_IMPORTED_MODULE_2__Style__["d" /* DefaultColors */][1] : __WEBPACK_IMPORTED_MODULE_2__Style__["d" /* DefaultColors */][i % __WEBPACK_IMPORTED_MODULE_2__Style__["d" /* DefaultColors */].length];
        }
        context.fill();
    }
    if (!text) {
        return canvas;
    }
    angle = 0;
    var minX = centerX - pieSize;
    var maxX = centerX + pieSize;
    for (var i = 0; i < data.length; i++) {
        const pieAngle = data[i] / sum * 2 * Math.PI;
        const percent = " - " + (data[i] / sum * 100).toLocaleString(undefined, { "maximumFractionDigits": 0 }) + "%";
        const textInfo = context.measureText(text[i] + percent);
        if (pieAngle < 0.3 && data.length > 5) {
            continue;
        }
        var startX = centerX + Math.cos(angle + pieAngle / 2) * size / 2;
        var startY = centerY + Math.sin(angle + pieAngle / 2) * size / 2 + 4;
        if (startX - textInfo.width < minX) {
            minX = startX - textInfo.width;
        }
        else if (startX + textInfo.width > maxX) {
            maxX = startX + textInfo.width;
        }
        if (angle + pieAngle / 2 > Math.PI / 2 && angle + pieAngle / 2 < Math.PI * 3 / 2) {
            startX -= textInfo.width;
        }
        context.font = "12px Droid Sans";
        context.fillStyle = "#eee";
        context.fillText(text[i] + percent, startX, startY);
        angle += pieAngle;
    }
    canvas.style.marginLeft = (minX > 0 ? -minX + 5 : 5).toString() + "px";
    canvas.style.marginRight = (maxX - 2 * size + 5).toString() + "px";
    return canvas;
}
function getLocalStoragePromise(keys) {
    try {
        return browser.storage.local.get(keys);
    }
    catch (err) {
        return chrome.storage.local.get(keys);
    }
}
function setLocalStoragePromise(items) {
    let promise;
    try {
        promise = browser.storage.local.set(items);
    }
    catch (err) {
        promise = chrome.storage.local.set(items);
    }
    return promise;
}
class Popup {
    constructor(tile, name) {
        this.rows = [];
        this.tile = tile;
        this.overlapDiv = document.createElement("div");
        this.overlapDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].OverlappingDiv);
        const greyStripes = document.createElement("div");
        greyStripes.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].GreyStripes);
        this.overlapDiv.appendChild(greyStripes);
        tile.insertBefore(this.overlapDiv, tile.firstChild);
        greyStripes.appendChild(makePopupSpacer(tile, this.overlapDiv));
        const popupInterfaceWrapper = document.createElement("div");
        popupInterfaceWrapper.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].CenterInterface);
        greyStripes.appendChild(popupInterfaceWrapper);
        const popupInterface = document.createElement("div");
        popupInterface.classList.add("DraftConditionEditor__form___fF72bJM");
        popupInterfaceWrapper.appendChild(popupInterface);
        const header = document.createElement("h3");
        header.appendChild(document.createTextNode(name));
        header.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
        popupInterface.appendChild(header);
        header.style.margin = "0.5em 0 0.5em";
        this.form = document.createElement("div");
        popupInterface.appendChild(this.form);
        greyStripes.appendChild(makePopupSpacer(tile, this.overlapDiv));
    }
    addPopupRow(rowType, label, inputText, tooltip, callback, params) {
        const newRow = new PopupRow(rowType, label, inputText, tooltip, callback, params);
        this.rows.push(newRow);
        this.form.appendChild(newRow.row);
    }
    removePopupRow(rowIndex) {
        const toDelete = this.rows.splice(rowIndex, 1)[0];
        this.form.removeChild(toDelete.row);
    }
    getRowByName(name) {
        var selectedRow;
        this.rows.forEach(row => {
            if (row.rowLabel == name) {
                selectedRow = row;
                return;
            }
        });
        return selectedRow;
    }
    destroy() {
        this.tile.removeChild(this.overlapDiv);
    }
    moveRowToBottom(rowIndex) {
        const movingRow = this.rows[rowIndex];
        this.removePopupRow(rowIndex);
        this.rows.push(movingRow);
        this.form.appendChild(movingRow.row);
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = Popup;

class PopupRow {
    constructor(rowType, label, inputText, tooltip, callback, params) {
        this.rowType = rowType;
        this.rowLabel = label;
        if (rowType == "text" || rowType == "date" || rowType == "number") {
            this.row = document.createElement("div");
            this.row.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormRow);
            const rowLabel = document.createElement("label");
            rowLabel.textContent = label;
            if (tooltip) {
                rowLabel.appendChild(createToolTip(tooltip, "right"));
            }
            rowLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormLabel);
            this.row.appendChild(rowLabel);
            const inputInputDiv = document.createElement("div");
            inputInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormInput);
            this.row.appendChild(inputInputDiv);
            this.rowInput = document.createElement("input");
            inputInputDiv.appendChild(this.rowInput);
            if (inputText) {
                this.rowInput.value = inputText;
            }
            if (rowType == "date") {
                this.rowInput.type = "datetime-local";
            }
            else if (rowType == "number") {
                this.rowInput.type = "number";
            }
            this.rowInput.style.width = "80%";
            if (callback) {
                const rowInput = this.rowInput;
                this.rowInput.addEventListener("input", function () {
                    callback(rowInput.value, params);
                });
            }
        }
        else if (rowType == "dropdown") {
            this.row = document.createElement("div");
            this.row.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormRow);
            const rowLabel = document.createElement("label");
            rowLabel.textContent = label;
            if (tooltip) {
                rowLabel.appendChild(createToolTip(tooltip, "right"));
            }
            rowLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormLabel);
            this.row.appendChild(rowLabel);
            const inputDiv = document.createElement("div");
            inputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormInput);
            this.row.appendChild(inputDiv);
            this.rowInput = document.createElement("select");
            this.rowInput.classList.add("select");
            this.rowInput.style.width = "80%";
            this.rowInput.style.textAlignLast = "right";
            this.rowInput.name = "popup-dropdown" + Math.floor(Math.random() * 10000).toString();
            this.rowInput.id = "popup-dropdown" + Math.floor(Math.random() * 10000).toString();
            const selectedIndex = inputText[inputText.length - 1];
            inputText = inputText.slice(0, -1);
            inputText.forEach(text => {
                this.rowInput.appendChild(createSelectOption(text, text));
            });
            if (this.rowInput.children[selectedIndex]) {
                this.rowInput.children[selectedIndex].selected = true;
                this.rowInput.selectedIndex = selectedIndex;
            }
            inputDiv.appendChild(this.rowInput);
            if (callback) {
                const rowInput = this.rowInput;
                this.rowInput.addEventListener("change", function () {
                    callback(rowInput.selectedOptions[0].value, params);
                });
            }
        }
        else if (rowType == "button") {
            this.row = document.createElement("div");
            this.row.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormSaveRow);
            const rowLabel = document.createElement("label");
            rowLabel.textContent = label;
            rowLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormSaveLabel);
            this.row.appendChild(rowLabel);
            const inputDiv = document.createElement("div");
            inputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormSaveInput);
            this.row.appendChild(inputDiv);
            this.rowInput = document.createElement("button");
            this.rowInput.textContent = inputText;
            this.rowInput.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].Button);
            this.rowInput.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].ButtonPrimary);
            inputDiv.appendChild(this.rowInput);
            if (callback) {
                this.rowInput.addEventListener("click", function () {
                    callback(params);
                });
            }
        }
    }
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const Selector = {
    LMCommodityAdText: "div[class~='CommodityAd__text___xJQmJNa']",
    LMCommodityAdPriceSpan: "div[class~='CommodityAd__text___xJQmJNa'] > span",
    ProdItem: "OrderSlot__container___YFyk8a7",
    ProdQueueTable: "table[class~='ProductionQueue__table___jHQGyUI']",
    BufferHeaderClass: 'TileFrame__cmd___ScBYW0n type__type-very-small___HaVMqrE',
    BufferHeader: "div[class~='TileFrame__cmd___ScBYW0n']",
    Sidebar: "div#TOUR_TARGET_SIDEBAR_RIGHT",
    LMPostForm: "form[class~='LocalMarketPost__form___CAVPdDE']",
    WorkforceConsumptionTable: "div[class~='TileFrame__title___xRcZCPx']",
    XITTile: "div[class~='ScrollView__view___ovf59Tk'] > div",
    BufferTitle: "div[class~='TileFrame__title___xRcZCPx']",
    Notification: "div[class~='AlertListItem__content___XYebR1E']",
    ProdQueue: "div[class~='SiteProductionLines__column____s3cTk7']",
    BufferPanel: "div[class~='ScrollView__view___ovf59Tk']",
    NewBFRButton: "TOUR_TARGET_BUTTON_BUFFER_NEW",
    WholeWindow: "#container",
    BufferTextField: "input[class~='PanelSelector__input___wUstHrO']",
    BufferList: "#container > div > div > div > div:nth-child(3)",
    ScreenControls: "TOUR_TARGET_SCREEN_CONTROLS",
    LeftSidebar: "TOUR_TARGET_SIDEBAR_LEFT_02",
    BufferArea: "div[class~='Tile__selector___HYMmNEO']",
    ScreenName: "span[class~='ScreenControls__currentScreenName___I2sIYag']",
    MaterialIcon: "GridItemView__image___yMoKOZV",
    BufferLink: "span[class~='Link__link___fa4mmMA']",
    FullMaterialIcon: "div[class~='GridItemView__container___xP2uJz8']",
    Inventory: "div[class~='InventoryView__grid___UyRQSX8']",
    MaterialText: "span[class~='ColoredIcon__label___OU1I4oP']",
    InventorySortOptions: "div[class~='InventorySortControls__controls___qk5heAZ']",
    ChatArea: "div[class~='Channel__messageAndUserList___NCgQAtW']",
    MaterialQuantity: "div[class~='MaterialIcon__indicator___SHwlndJ']",
    HeaderRow: "div[class~='FormComponent__containerPassive___FrBdyGU']",
    FormInputRow: "div[class~='FormComponent__containerActive___HZv9jHd']",
    ContDForm: "div[class~='DraftConditionEditor__form___fF72bJM'] > form",
    ContDConditionsTable: "div[class~='Draft__conditions___bcIUndH'] > table > tbody",
    ContDFormLabel: "label[class~='FormComponent__label___aQB15eB']",
    ContDFormRowSpacer: "div[class~='DynamicInput__dynamic___Cd4Gkbz']",
    ContDFormInput: "div[class~='FormComponent__input___ZnI8mYi']",
    SidebarContract: "div[class~='Sidebar__contract___J0gmlzN']",
    SidebarContractId: "span[class~='Sidebar__contractId___Lg85TRZ']",
    BuildingList: "div[class~='SectionList__container___EtUzWyi']",
    Divider: "div[class~='SectionList__divider___cwWO45v']",
    MaterialLabel: "span[class~='GridItemView__name___h3yX9Lm']",
    SmallButton: "button[class~='Button__darkInline___z_YKa91']",
    ShipStorage: "span[class~='ShipStore__pointer___TQUMuFY']",
    StoreViewName: "span[class~='StoreView__name___eX4pgs6']",
    FormLabels: ".forms__form-component___yTgP_Qa label",
    ChannelControls: "div[class~='Channel__controls___JnQCa9m']",
    RadioIndicator: "div[class~='RadioItem__indicator___QzQtjhA']",
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Selector;



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const Style = {
    Button: ["Button__btn___UJGZ1b7"],
    ButtonPrimary: ["Button__primary____lObPiw"],
    ButtonSuccess: ["Button__success___bCiIVXw"],
    ButtonDisabled: ["Button__disabled____x8i7XF"],
    ButtonEnabled: ["Button__primary____lObPiw"],
    ButtonDanger: ["Button__danger___S2rSOES"],
    ButtonNeutral: ["Button__neutral___OAFOaNs"],
    SmallButton: ["Button__darkInline___z_YKa91", "Button__dark___vdJbcc8", "Button__btn___UJGZ1b7", "Button__inline___Ffw9bbn"],
    SidebarSectionHead: ["Sidebar__sectionHead____NHLKDT", "fonts__font-regular___Sxp1xjo"],
    SidebarSectionContent: ["Sidebar__sectionContent___wgGYFop", "fonts__font-regular___Sxp1xjo"],
    SidebarLine: ["Sidebar__contract___J0gmlzN", "Sidebar__sidebar-line___bE2rbRb"],
    FontsRegular: ["fonts__font-regular___Sxp1xjo"],
    SidebarText: ["Frame__toggleLabel___BTFce8H", "fonts__font-regular___Sxp1xjo", "type__type-regular___k8nHUfI"],
    SidebarSliver: ["Frame__toggleIndicatorSecondary___frX4CGi", "Frame__toggleIndicator___ZKQQgAL"],
    SidebarButton: ["Frame__toggle___V3iHpB7"],
    ContractLine: ["y84EUI8gCP-SV91X7vIihQ==", "fVd3aYJhFY-uuaH+QTByhA=="],
    ContractName: ["zhixp408YF082IzA5KPvfA=="],
    ContractView: ["kq5BrGKnTUTqCDYMpLQ90g=="],
    RadioButton: ["RadioItem__container___CSczqmG"],
    SettingsButton: ["RadioItem__container___CSczqmG", "RadioItem__containerHorizontal____trlXDo"],
    RadioButtonUnToggled: ["RadioItem__indicator___QzQtjhA"],
    SettingsBarUntoggled: ["RadioItem__indicator___QzQtjhA", "RadioItem__indicatorHorizontal___SwtwTIh"],
    RadioButtonToggled: ["RadioItem__indicator___QzQtjhA", "RadioItem__active___CDscOQV", "effects__shadowPrimary___EbXJQor"],
    SettingsBarToggled: ["RadioItem__indicator___QzQtjhA", "RadioItem__indicatorHorizontal___SwtwTIh", "RadioItem__active___CDscOQV", "effects__shadowPrimary___EbXJQor"],
    RadioButtonValue: ["RadioItem__value___Yd1Gt1T", "fonts__font-regular___Sxp1xjo", "type__type-small___pMQhMQO"],
    SettingsText: ["RadioItem__value___Yd1Gt1T", "fonts__font-regular___Sxp1xjo", "type__type-small___pMQhMQO", "RadioItem__valueHorizontal___D5AXJ9P"],
    ScreenUnderlineUntoggled: ["HeadItem__indicatorPrimary___rx46qOB", "HeadItem__indicator___A_wijoE"],
    ScreenUnderlineToggled: ["HeadItem__indicatorPrimary___rx46qOB", "HeadItem__indicator___A_wijoE", "ScreenControls__indicatorActive___cnKagZ4", "effects__shadowPrimary___EbXJQor"],
    OverlappingDiv: ["Overlay__overlay___NA9HV8y"],
    GreyStripes: ["Overlay__background___ieZpHiF", "Overlay__overlay___NA9HV8y"],
    Spacer: ["Overlay__close___bxGoMIl"],
    ProgressBar: ["ProgressBar__primary___O30jBqq", "ProgressBar__progress___eb4KhuW"],
    ProgressBarColors: ["ProgressBar__primary___O30jBqq", "grey-progress-bar", "good-progress-bar", "warning-progress-bar", "danger-progress-bar"],
    ProgressBarGood: ["good-progress-bar"],
    ProgressBarWarning: ["warning-progress-bar"],
    ProgressBarDanger: ["danger-progress-bar"],
    CenterInterface: ["Overlay__children___rgtVaxc"],
    FormRow: ["FormComponent__containerActive___HZv9jHd", "forms__active___wn9KQTZ", "forms__form-component___yTgP_Qa"],
    HeaderRow: ["FormComponent__containerPassive___FrBdyGU", "forms__passive___biRUiE5", "forms__form-component___yTgP_Qa"],
    FormLabel: ["FormComponent__label___aQB15eB", "fonts__font-regular___Sxp1xjo", "type__type-regular___k8nHUfI"],
    FormInput: ["FormComponent__input___ZnI8mYi", "forms__input___A92_N4J"],
    FormSaveRow: ["FormComponent__containerCommand___B4XLERf", "forms__cmd___IMzt7Ug", "forms__form-component___yTgP_Qa"],
    FormSaveLabel: ["FormComponent__label___aQB15eB", "fonts__font-regular___Sxp1xjo", "type__type-regular___k8nHUfI"],
    FormSaveInput: ["FormComponent__input___ZnI8mYi", "forms__input___A92_N4J"],
    ActionOverlay: ["ActionConfirmationOverlay__container___A05Ts1g", "ActionFeedback__overlay___NNDPRrV"],
    ActionCenterInterface: ["ActionConfirmationOverlay__message___OajoGeh", "ActionFeedback__message___G2Sz4bw", "fonts__font-regular___Sxp1xjo", "type__type-larger___VdpJIb1"],
    ActionConfirm: ["ActionConfirmationOverlay__message___OajoGeh", "ActionFeedback__message___G2Sz4bw", "fonts__font-regular___Sxp1xjo", "type__type-larger___VdpJIb1"],
    ActionConfirmMessage: ["ActionConfirmationOverlay__text___qkKzVK0", "ActionFeedback__text___YQjjibG", "fonts__font-regular___Sxp1xjo", "type__type-regular___k8nHUfI"],
    ActionButtons: ["ActionConfirmationOverlay__buttons___sE7CNVe"],
    MatText: ["ColoredIcon__label___OU1I4oP"],
    MatTextWrapper: ["ColoredIcon__labelContainer___YVfgzOk"],
    MaterialElement: ["ColoredIcon__container___djaR4r2"],
    MaterialWrapper: ["MaterialIcon__container___q8gKIx8"],
    MaterialNumberWrapper: ["MaterialIcon__indicatorContainer___Cqtax_Y"],
    MaterialNumber: ["MaterialIcon__indicator___SHwlndJ", "MaterialIcon__type-very-small___UMzQ3ir", "MaterialIcon__neutral___SYsHXAa"],
    MaterialWrapperWrapper: ["GridItemView__image___yMoKOZV"],
    MaterialOuter: ["GridItemView__container___xP2uJz8"],
    MaterialNameText: ["GridItemView__name___h3yX9Lm", "fonts__font-regular___Sxp1xjo", "type__type-regular___k8nHUfI"],
    CXOBAmount: ["ComExOrderBookPanel__amount___EoNHTID"],
    CXOBOffer: ["ComExOrderBookPanel__offerPrice___kisxczh", "ComExOrderBookPanel__amount___EoNHTID"],
    CXOBSpread: ["ComExOrderBookPanel__spread___GIYNNWd"],
    CXOBEmpty: ["ComExOrderBookPanel__empty___yl28RaU"],
    CXOBRequest: ["ComExOrderBookPanel__requestPrice___ZTEgYCz", "ComExOrderBookPanel__amount___EoNHTID"],
};
/* harmony export (immutable) */ __webpack_exports__["h"] = Style;

const WithStyles = (...style) => {
    return style.reduce(((previousValue, currentValue) => previousValue.concat(currentValue)));
};
/* harmony export (immutable) */ __webpack_exports__["j"] = WithStyles;

const TextColors = {
    Failure: "#d9534f",
    Success: "#5cb85c",
    Standard: "#bbbbbb",
    Yellow: "#f7a600"
};
/* harmony export (immutable) */ __webpack_exports__["i"] = TextColors;

const DefaultColors = [
    "#004564",
    "#005b76",
    "#007079",
    "#00846c",
    "#009552",
    "#67a22e",
    "#ada900",
    "#f7a600"
];
/* harmony export (immutable) */ __webpack_exports__["d"] = DefaultColors;

const CategoryColors = {
    "electronic devices": ["linear-gradient(135deg, rgb(86, 20, 147), rgb(111, 45, 172))", "rgb(213, 147, 255)"],
    "construction prefabs": ["linear-gradient(135deg, rgb(15, 30, 98), rgb(40, 55, 123))", "rgb(142, 157, 225)"],
    "electronic systems": ["linear-gradient(135deg, rgb(51, 26, 76), rgb(76, 51, 101))", "rgb(178, 153, 203)"],
    "medical equipment": ["linear-gradient(135deg, rgb(85, 170, 85), rgb(110, 195, 110))", "rgb(212, 255, 212)"],
    "construction parts": ["linear-gradient(135deg, rgb(41, 77, 107), rgb(66, 102, 132))", "rgb(168, 204, 234)"],
    "ship engines": ["linear-gradient(135deg, rgb(153, 41, 0), rgb(178, 66, 25))", "rgb(255, 168, 127)"],
    "ship parts": ["linear-gradient(135deg, rgb(153, 99, 0), rgb(178, 124, 25))", "rgb(255, 226, 127)"],
    "metals": ["linear-gradient(135deg, rgb(54, 54, 54), rgb(79, 79, 79))", "rgb(181, 181, 181)"],
    "consumables (luxury)": ["linear-gradient(135deg, rgb(136, 24, 39), rgb(161, 49, 64))", "rgb(255, 151, 166)"],
    "agricultural products": ["linear-gradient(135deg, rgb(92, 18, 18), rgb(117, 43, 43))", "rgb(219, 145, 145)"],
    "ores": ["linear-gradient(135deg, rgb(82, 87, 97), rgb(107, 112, 122))", "rgb(209, 214, 224)"],
    "gases": ["linear-gradient(135deg, rgb(0, 105, 107), rgb(25, 130, 132))", "rgb(127, 232, 234)"],
    "ship shields": ["linear-gradient(135deg, rgb(224, 131, 0), rgb(249, 156, 25))", "rgb(230 230,127)"],
    "alloys": ["linear-gradient(135deg, rgb(123, 76, 30), rgb(148, 101, 55))", "rgb(250, 203, 157)"],
    "chemicals": ["linear-gradient(135deg, rgb(183, 46, 91), rgb(208, 71, 116))", "rgb(255, 173, 218)"],
    "software components": ["linear-gradient(135deg, rgb(136, 121, 47), rgb(161, 146, 72))", "rgb(255, 248, 174)"],
    "electronic pieces": ["linear-gradient(135deg, rgb(119, 82, 189), rgb(144, 107, 214))", "rgb(246, 209, 255)"],
    "elements": ["linear-gradient(135deg, rgb(61, 46, 32), rgb(86, 71, 57))", "rgb(188, 173, 159)"],
    "minerals": ["linear-gradient(135deg, rgb(153, 113, 73), rgb(178, 138, 98))", "rgb(255, 240, 200)"],
    "unit prefabs": ["linear-gradient(135deg, rgb(29, 27, 28), rgb(54, 52, 53))", "rgb(156, 154, 155)"],
    "liquids": ["linear-gradient(135deg, rgb(114, 164, 202), rgb(139, 189, 227))", "rgb(241, 255, 255)"],
    "energy systems": ["linear-gradient(135deg, rgb(21, 62, 39), rgb(46, 87, 64))", "rgb(148, 189, 166)"],
    "drones": ["linear-gradient(135deg, rgb(140, 52, 18), rgb(165, 77, 43))", "rgb(255, 179, 145)"],
    "electronic parts": ["linear-gradient(135deg, rgb(91, 46, 183), rgb(116, 71, 208))", "rgb(218, 173, 255)"],
    "textiles": ["linear-gradient(135deg, rgb(82, 90, 33), rgb(107, 115, 58))", "rgb(209, 217, 160)"],
    "construction materials": ["linear-gradient(135deg, rgb(24, 91, 211), rgb(49, 116, 236))", "rgb(151, 218, 255)"],
    "software tools": ["linear-gradient(135deg, rgb(129, 98, 19), rgb(154, 123, 44))", "rgb(255, 255, 146)"],
    "plastics": ["linear-gradient(135deg, rgb(121, 31, 60), rgb(146, 56, 85))", "rgb(248, 158, 187)"],
    "consumables (basic)": ["linear-gradient(135deg, rgb(149, 46, 46), rgb(174, 71, 71))", "rgb(255, 173, 173)"],
    "fuels": ["linear-gradient(135deg, rgb(30, 123, 30), rgb(55, 148, 55))", "rgb(157, 250, 157)"],
    "software systems": ["linear-gradient(135deg, rgb(60, 53, 5), rgb(85, 78, 30))", "rgb(187, 180, 132)"],
    "ship kits": ["linear-gradient(135deg, rgb(154, 84, 0), rgb(178, 109, 25))", "rgb(255, 211, 127)"],
    "utility": ["linear-gradient(135deg, rgb(161, 148, 136), rgb(186, 173, 161))", "rgb(255, 255, 255)"],
    "shipment": ["linear-gradient(135deg, #030303, #181818)", "#7f7f7f"]
};
/* harmony export (immutable) */ __webpack_exports__["b"] = CategoryColors;

const PMMGStyle = `
.pb-scroll {
	overflow-y: scroll;
	flex: 1;
	width: 120px;
	vertical-align: top;
}
.pb-scroll::-webkit-scrollbar {
	width: 0;
}
.pb-scroll::-moz-scrollbar {
	width: 0;
}

.pb-minimize {
	font-size: 14px;
	font-weight: bold;
	margin-left: auto;
	margin-right: 3px;
	margin-top: 1px;
	text-align: center;
	width: 18px;
	cursor: pointer;
}
.pb-minimize-cx:hover {
	color: #26353e;
	background-color: #3fa2de;
}
.pb-minimize-cx {
	background-color: #26353e;
	color: #3fa2de;
}
.pb-minimize-settings:hover {
	color: #ddd;
}
.mat-element-large {
	height: 48px;
	width: 48px;
}
.mat-element-large div.ColoredIcon__container___djaR4r2 {
	height: 48px;
	width: 48px;
	font-size: 15.84px;
	cursor: pointer;
}
.mat-element-small {
	height: 32px;
	width: 32px;
}
.check-time-complete {
	text-decoration: line-through;
}
.check-time-overdue {
	color: #d9534f;
}
.check-time {
	color: rgb(153, 153, 153)
}
.check-item {
	display: flex;
	justify-content: space-between;
	border-bottom: solid 1px #555;
}
.checked-text {
	text-decoration: line-through;
	color: rgb(153, 153, 153)
}
.delete-button {
	background-color: #d9534f;
	border: none;
	color: #fff;
	line-height: 17px;
	font-weight: bold;
	outline: none;
	padding: 0 8px;
	font-size: 11px;
	cursor: pointer;
}
.delete-button:hover {
	color: #222;
}



.notes-wrapper .title.note-title {
    padding-top: 5px;
}
.pb-note-overlay {
    background-color: #42361d;
    color: #cccccc;
	margin: 10px;
    padding: 10px;
    border: 0;
    width: calc(100% - 20px);
    height: calc(100% - 20px - 20px);
    position: absolute;
    top: 20px;
    left: 0;
    overflow-wrap: anywhere;
	white-space: pre-wrap;
	overflow-y: scroll;
	font-family: "Droid Sans",sans-serif;
	font-size: 13.333px;
    line-height: 1.5;
    tab-size: 4;
}
.pb-note-overlay::-webkit-scrollbar {
	width: 0;
}
.pb-note-overlay::-moz-scrollbar {
	width: 0;
}

.pb-note-textbox {
	color: transparent;
	background: transparent;
	caret-color: white;
	margin: 10px;
    padding: 10px;
    border: 0;
    width: calc(100% - 20px);
    height: calc(100% - 20px - 20px);
    position: absolute;
    top: 20px;
    left: 0;
    overflow-y: scroll;
	white-space: wrap;
	font-family: "Droid Sans",sans-serif;
	font-size: 13.333px;
    line-height: 1.5;
    tab-size: 4;
	resize: none;
	z-index: 1;
}
.pb-note-textbox:focus {
	outline: none;
}
.pb-note-textbox::-webkit-scrollbar {
	width: 0;
}
.pb-note-textbox::-moz-scrollbar {
	width: 0;
}

.pb-note-link {
	color: #3fa2de;
	cursor: pointer;
	position: relative;
	z-index: 2;
}
.pb-note-link:hover {
	color: #f7a600 !important;
}



.check-wrapper {
	margin: 5px;
}
.tooltip-base{
	display:flex;
	position:absolute!important;
	font-family:"Droid Sans",sans-serif;
	font-size:10px;
	color:#bbb
}
.tooltip
{
	display: none;
	margin-left: 100px;
}
.tooltip-base:hover .tooltip
{
	display: block;
	background-color: #23282b;
	position: absolute;
}
.select {
	border: 0px;
	border-bottom: 1px solid #8d6411;
	background-color: #42361d;
	color: #bbb;
	outline: none;
}

.title {
	font-weight: bold;
	display: block;
	font-size: 16px;
	padding-left: 5px;
}
.flex-table {
	width: 100%;
	display: flex;
	flex: 1;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: left;
	align-items: left;
}
.list {
	display: block;
	padding: 5px;
}
.chat-line {
	width: 100%;
	display: grid;
	grid-template-columns: minmax(8em, 1fr) minmax(8em, 4fr) minmax(8em, 15fr);
	grid-column-gap: 1px;
	font-size: 11px;
	line-height: 1.1;
}
.time-date {
	color: #444444;
	display: inline-block;
	padding: 2px 5px;
	padding-right: 0px;
	text-align: left;
	white-space: nowrap;
	overflow: hidden;
}
.chat-name {
	display: inline-block;
	text-align: right;
	color: #999999;
	text-overflow: ellipsis;
	padding: 2px 5px;
	border-right: 1px solid #999999;
}
.chat-message {
	display: inline-block;
	text-align: left;
	color: #bbbbbb;
	word-break: break-word;
	padding: 2px 5px;
}
.fin-title {
	display: block;
	font-size: 12px;
	margin-bottom: 0px;
	padding: 6px 4px 2px;
	background-color: rgba(63, 162, 222, 0.15);
}
td.burn-green {
	background-color: #345034 !important;
	color: #9fbb9f;
}
tr:hover td.burn-green {
	background-color: #506c50 !important;
}
td.burn-yellow {
	background-color: #836e24 !important;
	color: #f6df94;
}
tr:hover td.burn-yellow {
	background-color: #9f8a40 !important;
}
td.burn-red {
	background-color: #5a3130 !important;
	color: #c59c9b;
}
tr:hover td.burn-red {
	background-color: #764d4c !important;
}
.inv-header {
	display: inline;
	padding: 2px 8px;
	color: #3fa2de;
}
.inv-body {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-around;
	align-items: stretch;
	margin-bottom: 23px;
	padding: 5px 8px;
}
.progress-bar {
	width: 30px;
	height: 9px;
	border: 1px solid #999;
	margin: 1px 2px;
}
.progress-bar::-webkit-progress-value {background: #f7a600;}

.grey-progress-bar::-webkit-progress-value {background: #d9534f;}
.good-progress-bar::-webkit-progress-value {background: #5cb85c;}
.warning-progress-bar::-webkit-progress-value {background: #ffc856;}
.danger-progress-bar::-webkit-progress-value {background: #d9534f;}

.xit-tile {
	background-color: #222222 !important;
	padding-top: 4px;
	display: flex;
	flex-flow: column;
}
.refresh-button {
	background-color: #f7a600;
	color: #eee;
	border-width: 0px;
	padding: 0px 8px;
	display: block;
	font-weight: bold;
	font-size: 11px;
	cursor: pointer;
	margin: 4px 8px;
}
.refresh-button:hover {
	color: #1e1e1e;
}
.notification {
	display: inline-block;
	min-width: 62px;
	max-width: 62px;
}
.fin-box {
	margin: 1px;
	min-width: 100px;
	width: calc(33% - 2px);
	max-width: 150px;
	padding: 4px;
	background-color: #23282b;
	display: inline-block;
}
.link {
	color: #3fa2de;
	cursor: pointer;
	display: block;
}
.link:hover {
	color: #f7a600 !important;
}
.chat-image {
	max-height: 300px;
	max-width: 90%;
}
.input-text{
    padding: 0px 5px;
    margin: 5px;
	background-color: #42361d;
	border-width: 0px;
	border-bottom: 1px solid #8d6411;
	color: #cccccc;
	
}
.input-text:focus{
	outline: none;
}
.hidden-element{
	display: none !important;
	visibility: false !important;
	max-height: 0 !important;
	padding: 0 !important;
	margin: 0 !important;
	font-size: 0px !important;
}
.button-upper-right{
	background-color: transparent;
	color: #bbb;
	fill: #bbb;
	cursor: pointer;
	display: block;
	font-size: 24px;
	margin-top: -8px;
}
.button-upper-right:hover{
	color: #000 !important;
	fill: #000;
	background-color: rgb(247, 166, 0);
}

div.Head__container___3ecBw0E > div:nth-child(2) {
  flex-shrink: 0;
}

// Fix PrUN Bugs
div.ScrollView__view___ovf59Tk {
    inset: -1px !important;
}

div.Channel__messageAndUserList___NCgQAtW,
div.SiteProductionLines__container___yQeb0SK {
    scrollbar-width: auto;
    -webkit-scrollbar-width: auto;
}
`;
/* harmony export (immutable) */ __webpack_exports__["g"] = PMMGStyle;

const AdvancedStyle = `
span.GridItemView__name___h3yX9Lm {
	display: none;
}
div.GridItemView__container___xP2uJz8 {
	width: auto;
}
div.FormComponent__errorMessage___mBdvpz5 {
	display: none;
}
div.FormComponent__containerError___pN__L1Q {
	flex-wrap: nowrap;
}
`;
/* harmony export (immutable) */ __webpack_exports__["a"] = AdvancedStyle;

const ChatDeleteStyle = `
div.Message__controls___b3BAWCW {
	display: none;
}
`;
/* harmony export (immutable) */ __webpack_exports__["c"] = ChatDeleteStyle;

const EnhancedColors = `/* consumables (luxury) */
div[title="Stellar Pale Ale"],
div[data-tooltip-content="#tooltip_ALE"],
.tooltip_ALE,
div[title="Caffeinated Infusion"],
div[data-tooltip-content="#tooltip_COF"],
.tooltip_COF,
div[title="Einsteinium-Infused Gin"],
div[data-tooltip-content="#tooltip_GIN"],
.tooltip_GIN,
div[title="Kombucha"],
div[data-tooltip-content="#tooltip_KOM"],
.tooltip_KOM,
div[title="NeuroStimulants"],
div[data-tooltip-content="#tooltip_NST"],
.tooltip_NST,
div[title="Padded Work Overall"],
div[data-tooltip-content="#tooltip_PWO"],
.tooltip_PWO,
div[title="Repair Kit"],
div[data-tooltip-content="#tooltip_REP"],
.tooltip_REP,
div[title="Stem Cell Treatment"],
div[data-tooltip-content="#tooltip_SC"],
.tooltip_SC,
div[title="VitaGel"],
div[data-tooltip-content="#tooltip_VG"],
.tooltip_VG,
.tooltip_WIN,
div[title="Smart Zinfandel"],
div[data-tooltip-content="#tooltip_WIN"]
{
background: linear-gradient(135deg, #680000, #7b0012) !important;
color: #db9191 !important;
}
/* agricultural products */
.tooltip_FOD,
.tooltip_CAF,
.tooltip_HOP,
.tooltip_GRN,
.tooltip_MAI,
.tooltip_HCP,
.tooltip_MTP,
.tooltip_PIB,
.tooltip_PPA,
.tooltip_ALG,
.tooltip_BEA,
.tooltip_MUS,
.tooltip_RCO,
.tooltip_RSI,
.tooltip_HER,
.tooltip_VEG,
.tooltip_NUT,
.tooltip_VIT,
.tooltip_GRA,
div[title="Protein-Rich Algae"],
div[data-tooltip-content="#tooltip_ALG"],
div[title="Protein-Rich Beans"],
div[data-tooltip-content="#tooltip_BEA"],
div[title="Caffeinated Beans"],
div[data-tooltip-content="#tooltip_CAF"],
div[title="All-Purpose Fodder"],
div[data-tooltip-content="#tooltip_FOD"],
div[title="Wine-Quality Grapes"],
div[data-tooltip-content="#tooltip_GRA"],
div[title="High-Carb Grains"],
div[data-tooltip-content="#tooltip_GRN"],
div[title="Hydrocarbon Plants"],
div[data-tooltip-content="#tooltip_HCP"],
div[title="Spicy Herbs"],
div[data-tooltip-content="#tooltip_HER"],
div[title="Flowery Hops"],
div[data-tooltip-content="#tooltip_HOP"],
div[title="High-Carb Maize"],
div[data-tooltip-content="#tooltip_MAI"],
div[title="Meat Tissue Patties"],
div[data-tooltip-content="#tooltip_MTP"],
div[title="Protein-Rich Mushrooms"],
div[data-tooltip-content="#tooltip_MUS"],
div[title="Triglyceride Nuts"],
div[data-tooltip-content="#tooltip_NUT"],
div[title="Pineberries"],
div[data-tooltip-content="#tooltip_PIB"],
div[title="Protein Paste"],
div[data-tooltip-content="#tooltip_PPA"],
div[title="Raw Cotton Fiber"],
div[data-tooltip-content="#tooltip_RCO"],
div[title="Raw Silk Strains"],
div[data-tooltip-content="#tooltip_RSI"],
div[title="Triglyceride Fruits"],
div[data-tooltip-content="#tooltip_VEG"],
div[title="Vita Essence"],
div[data-tooltip-content="#tooltip_VIT"]
{
background: linear-gradient(135deg, #003800, #0a4708) !important;
color: #8bb37b !important;
}
/* plastics */
.tooltip_DCL,
.tooltip_DCM,
.tooltip_DCS,
.tooltip_PE,
.tooltip_PG,
.tooltip_PSL,
.tooltip_PSM,
.tooltip_PSS,
div[title="Durable Casing L"],
div[data-tooltip-content="#tooltip_DCL"],
div[title="Durable Casing M"],
div[data-tooltip-content="#tooltip_DCM"],
div[title="Durable Casing S"],
div[data-tooltip-content="#tooltip_DCS"],
div[title="Poly-Ethylene"],
div[data-tooltip-content="#tooltip_PE"],
div[title="Polymer Granulate"],
div[data-tooltip-content="#tooltip_PG"],
div[title="Polymer Sheet Type L"],
div[data-tooltip-content="#tooltip_PSL"],
div[title="Polymer Sheet Type M"],
div[data-tooltip-content="#tooltip_PSM"],
div[title="Polymer Sheet Type S"],
div[data-tooltip-content="#tooltip_PSS"]
{
background: linear-gradient(135deg, #791f62, #92387b) !important;
color: #f89ee1 !important;
}
/* consumables (basic) */
.tooltip_DW,
.tooltip_EXO,
.tooltip_FIM,
.tooltip_HMS,
.tooltip_HSS,
.tooltip_LC,
.tooltip_MEA,
.tooltip_MED,
.tooltip_OVE,
.tooltip_PDA,
.tooltip_PT,
.tooltip_RAT,
.tooltip_SCN,
.tooltip_WS,

div[title="Drinking Water"],
div[data-tooltip-content="#tooltip_DW"],
div[title="Exoskeleton Work Suit"],
div[data-tooltip-content="#tooltip_EXO"],
div[title="Flavoured Insta-Meal"],
div[data-tooltip-content="#tooltip_FIM"],
div[title="HazMat Work Suit"],
div[data-tooltip-content="#tooltip_HMS"],
div[title="Smart Space Suit"],
div[data-tooltip-content="#tooltip_HSS"],
div[title="AI-Assisted Lab Coat"],
div[data-tooltip-content="#tooltip_LC"],
div[title="Quality Meat Meal"],
div[data-tooltip-content="#tooltip_MEA"],
div[title="Basic Medical Kit"],
div[data-tooltip-content="#tooltip_MED"],
div[title="Basic Overalls"],
div[data-tooltip-content="#tooltip_OVE"],
div[title="Personal Data Assistant"],
div[data-tooltip-content="#tooltip_PDA"],
div[title="Power Tools"],
div[data-tooltip-content="#tooltip_PT"],
div[title="Basic Rations"],
div[data-tooltip-content="#tooltip_RAT"],
div[title="Multi-Purpose Scanner"],
div[data-tooltip-content="#tooltip_SCN"],
div[title="Scientific Work Station"],
div[data-tooltip-content="#tooltip_WS"]
{
background: linear-gradient(135deg, #a62c2a, #ba363c) !important;
color: #ff989e !important;
}
/* fuels */
.tooltip_SF,
.tooltip_FF,
div[title="FTL Fuel"],
div[data-tooltip-content="#tooltip_FF"],
div[title="STL Fuel"],
div[data-tooltip-content="#tooltip_SF"]
{
background: linear-gradient(135deg, #548d22, #6ba23c) !important;
color: #cbfaa3 !important;
}
/* liquids */
.tooltip_HEX,
.tooltip_LES,
.tooltip_BTS,
.tooltip_H2O,
div[title="Heliotrope Extract"],
div[data-tooltip-content="#tooltip_HEX"],
div[title="Liquid Einsteinium"],
div[data-tooltip-content="#tooltip_LES"],
div[title="Bacterial Tungsten Solution"],
div[data-tooltip-content="#tooltip_BTS"],
div[title="Water"],
div[data-tooltip-content="#tooltip_H2O"]
{
background: linear-gradient(135deg, #67a8da, #6098c3) !important;
color: #f1ffff !important;
}
div.GridItemView__container___xP2uJz8 {
	background-color: #222;
}
/* full item name centering */
span.GridItemView__name___h3yX9Lm {
  display: block;
  text-align: center;
  padding-top: 1px;
  width: 100%;
}`;
/* harmony export (immutable) */ __webpack_exports__["e"] = EnhancedColors;

const IconStyle = `
 /* PrUnIcon v0.90
* ===============
*
* Written by allocater
* Install Chrome addon: StyleBot 
* goto: apex.prosperousuniverse.com
* right-click anywhere, select: StyleBot -> Style Element
* Copy&Paste this file into the StyleBot window
*
* CSS script to give icons to all commodities and some other UI color and layout changes.
*/
 
/* controversial UI changes and colors */
/* (comment/delete if not desired)
/* ----------------------------------- */

 
/* item ticker color */
.ColoredIcon__label___OU1I4oP {
    color: #cccccc;
}
 
 
/* full item name centering */
.GridItemView__name___h3yX9Lm  {
  display: block;
  text-align: center;
  padding-top: 1px;
  width: 100%;
}
 
/* table color */
table tbody td:nth-child(odd)
{
  background-color: #21252e;
}
 
/* end UI changes -------------------- */
 
/* items in production view and market view */
div.MaterialInformation__recipeInputs___eLvfoop div.BuildingIcon__container___jF5GUsz div.BuildingIcon__tickerContainer___NZx3G8C
{
  height: 36px;
  width: 36px;
}
 
/* items in planet view */
div.ResourceTable__gridContainer___ymrzTcD div.MaterialIcon__container___q8gKIx8 div.ColoredIcon__container___djaR4r2:before
{
  height: 20px;
  width: 20px;
  font-size: 20px;
}
 
/*
GridItemView__container___xP2uJz8
GridItemView__image___yMoKOZV
MaterialIcon__container___q8gKIx8
ColoredIcon__container___djaR4r2
ColoredIcon__labelContainer___YVfgzOk
*/
 
/* default :before element to prepare for new icon*/
div.ColoredIcon__container___djaR4r2:before
{
  position: absolute;
  width: 100%;
  height: 100%;
  align-items: center;
  justify-content: center;
  display: flex;
  content: "";
  
  /*while it is icon*/
  opacity: .3;
  font-size: 30px;
}
 
/* colored overlay icon */
div.ColoredIcon__labelContainer___YVfgzOk:before
{
  position: absolute;
  content: ""; /* will become icon */
 
  opacity: 0.1;
  z-index: -1;
  font-size: 30px;
  color: rgba(100%, 0%, 0%, 0);
}

/*
div[title="gold ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 gold;
}
 
div[title="iron ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 aqua;
}
 
div[title="aluminium ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 grey;
}
 
div[title="silicon ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 white;
}
 
div[title="titanium ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 blue;
}
 
div[title="lithium ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 green;
}
 
div[title="copper ore"i] div:before 
{
  content: "🥔";
  text-shadow: 0 0 0 red;
}
 */
div[title="ferro-titanium"i] div:before 
{
  content: "🟦";
  font-size: 15px;
  color: rgba(1,1,1,1);
  opacity: 0.3;
}
 
div[title="alpha-stabilized titanium"i] div:before 
{
  content: "⬜";
  font-size: 15px;
  color: rgba(1,1,1,1);
  opacity: 0.3;
}
 
div[title="ferrominium"i] div:before 
{
  content: "⬜";
  font-size: 15px;
  color: rgba(1,1,1,1);
  opacity: 0.3;
}
 
div[title="alpha-stabilized tungsten"i] div:before 
{
  content: "⬜";
  font-size: 15px;
  color: rgba(1,1,1,1);
  opacity: 0.3;
}
 
div[title^="Basic Thermal"i] div:before 
{
  content: "🔥";
  font-size: 20px;
  color: rgba(1,1,1,1);
  opacity: 0.2;
}
 
div[title^="Advanced Thermal"i] div:before 
{
  content: "🔥";
  font-size: 25px;
  color: rgba(1,1,1,1);
  opacity: 0.2;
}
 
div[title*="Anti-Rad"i] div:before 
{
  content: "⚛";
  font-size: 25px;
  color: rgba(1,1,1,1);
  opacity: 0.4;
}
 
div[title^="Advanced Anti-Rad"i] div:before 
{
  font-size: 30px;
}
 
div[title^="Specialized Anti-Rad"i] div:before 
{
  font-size: 35px;
}
 
div[title*="High-Capacity C"i] div:before 
{
  content: "🔌";
  font-size: 30px;
  text-shadow: 0 0 0 gold;
  opacity: .25;
}
 
div[title*="Shielded C"i] div:before 
{
  content: "🔌";
  font-size: 30px;
  text-shadow: 0 0 0 blue;
  opacity: .01;
}
 
div[title*="Budget C"i] div:before 
{
  content: "🔌";
  font-size: 30px;
  text-shadow: 0 0 0 chocolate;
  opacity: .2;
}
 
div[title*="raw "i] div:before 
{
  content: "🧶";
  font-size: 30px;
}
 
div[title*="raw cotton"i] div:before 
{
  text-shadow: 0 0 0 grey;
  opacity: .2;
}
 
div[title*="raw silk"i] div:before 
{
  text-shadow: 0 0 0 plum;
  opacity: .3;
}
 
div[title*=" fabric"i] div:before 
{
  content: "🧵";
  font-size: 30px;
}
 
div[title*="kevlar fabric"i] div:before 
{
  text-shadow: 0 0 0 green;
  opacity: .15;
}
 
 
div[title*="technokevlar fabric"i] div:before 
{
  text-shadow: 0 0 0 blueviolet;
  opacity: .2;
}
 
div[title*="nylon fabric"i] div:before 
{
  text-shadow: 0 0 0 black;
  opacity: .1;
}
 
div[title*="cotton fabric"i] div:before 
{
  text-shadow: 0 0 0 grey;
  opacity: .2;
}
 
div[title*="silken fabric"i] div:before 
{
  text-shadow: 0 0 0 plum;
  opacity: .3;
}
 
div[title*="ceramic fabric"i] div:before 
{
  text-shadow: 0 0 0 orangered;
  opacity: .15;
}
 
div[title*="ceramic-tungsten fabric"i] div:before 
{
  text-shadow: 0 0 0 brown;
  opacity: .3;
}
 
div[title="nutrient solution"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 green;
  opacity: .3;
}
 
div[title="nano-enhanced resin"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 blueviolet;
  opacity: .3;
  font-size: 32px;
}
 
div[title="flux"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 yellow;
  opacity: .15;
}
 
div[title="indigo colorant"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 indigo;
  opacity: .3;
}
 
div[title="Olfactory Substances"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 olive;
  opacity: .3;
}
 
div[title="DDT Plant Agent"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 red;
  opacity: .3;
}
 
div[title="Sedative Substance"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 orange;
  opacity: .3;
}
 
div[title="desaturation agent"i] div:before 
{
  content: "🧪";
  text-shadow: 0 0 0 white;
  opacity: .1;
}
 
div[title="breathable liquid"i] div:before 
{
  content: "💧";
  text-shadow: 0 0 0 aquamarine;
  opacity: .25;
}
 
div[title="thermofluid"i] div:before 
{
  content: "💧";
  text-shadow: 0 0 0 orange;
  opacity: .5;
}
 
div[title*="fertilizer"i] div:before 
{
  content: "⛰";
  text-shadow: 0 0 0 yellowgreen;
  opacity: .3;
}
 
div[title*="acid"i] div:before 
{
  content: "☣";
  text-shadow: 0 0 0 greenyellow;
  opacity: .1;
  font-size: 40px;
}
 
/*
 
div[title*="solar"i] div:before 
{
  content: "🌞";
  opacity: .1;
  font-size: 30px;
  text-shadow: 0 0 0 yellow;
  color: rgba(1,1,1,1);
}
 
div[title="large cargo bay kit"i] div:before 
{
  content: "⚖"; opacity: 0.6; font-size: 20px;
}
 
div[title="high-load cargo bay kit"i] div:before 
{
  content: "🔔";
}
 
div[title="high-volume cargo bay kit"i] div:before 
{
  content: "🎈";
}
 
div[title="gold ore"i] div:before 
{
  content: "🟨";
}
 
div[title="iron ore"i] div:before 
{
  content: "🟦";
}
 
div[title="aluminium ore"i] div:before 
{
  content: "⬜";
}
*/
 
/* non-category color special hacks*/
 
div[title="High-Capacity Connectors"],
div[title="Red Gold"]
{
  -background: linear-gradient(135deg, rgb(145 129 43), rgb(120 72 7))
}
 
div[title="Shielded Connectors"],
div[title="Blue Gold"]
{
  -background: linear-gradient(135deg, rgb(145 129 43), rgb(70 72 200))
}
 
div[title="Air Scrubber"]
{
  background: linear-gradient(135deg, rgb(30 96 58),  rgb(51, 26, 76));
}
 
/* dw and all consumables */
 
/* "normal" icons and colors */
/* ------------------------- */
 
/* RAT inputs */
div[title^="High-Carb"],
div[title^="Protein-Rich"],
div[title^="Triglyceride"]
{
  background: linear-gradient(135deg, rgb(145 129 43), rgb(70 72 7))
}
 
div[content="Io-dine"]
{
  background: linear-gradient(135deg, rgb(153 87 1), rgb(86 40 0))
}
 
/* other Argriculture */
div[title="Hydrocarbon Plants"],
div[title="Spicy Herbs"],
div[title="All-Purpose Fodder"],
div[title="Flowery Hops"],
div[title="Caffeinated Beans"],
div[title="Raw Cotton Fiber"],
div[title="Wine-Quality Grapes"],
div[title="Meat Tissue Patties"],
div[title="Pineberries"],
div[title="Raw Silk Strains"],
div[title="Vita Essence"],
div[title="Protein Paste"] {
  background: linear-gradient(135deg, rgb(153 87 1), rgb(86 40 0))
}
 
div[title^="Drink"],
div[title^="Basic Ra"] {
  background: linear-gradient(135deg, rgb(71 126 174), rgb(46 66 149))
}
 
/* liquids */
div[title*="Heliotrope"],
div[title*="Liquid Eins"],
div[title*="Bacterial Tun"],
div[title^="Water"] {
  background: linear-gradient(135deg, rgb(122 80 55), rgb(18 74 124))
}
 
/* chemicals bg colors */
div[title*="Substance"], 
div[title*="Chemical"], 
div[title="Liquid Crystals"], 
div[title*="Breathable Liquid"], 
div[title*="Agent"], 
div[title*="Flux"], 
div[title*="Resin"], 
div[title*="Colorant"],
div[title*="Acid"], 
div[title*=" Bacteria"], 
div[title*="Soil"],
div[title*="Stabilizer"],
div[title*="Fertilizer"],
div[title*="ThermoFluid"],
div[title*="Enriched"],
div[title*="Nutrient"] {
  background: linear-gradient(135deg, rgb(183, 46, 91), rgb(114 37 62))
}
 
/* prefabs */
div[title^="Basic Str"],
div[title^="Basic Deck"],
div[title^="Basic Bulk"],
div[title^="Basic Trans"] {
  background: linear-gradient(135deg, rgb(51 54 66 ), rgb(15, 30, 98))
}
div[title^="Lightweight"] {
  background: linear-gradient(135deg, rgb(85 94 35), rgb(15, 30, 98))
}
div[title^="Hardened"], 
div[title^="Reinforced"] {
  background: linear-gradient(135deg, rgb(78 44 27), rgb(15, 30, 98))
}
div[title^="Advanced Deck"],
div[title^="Advanced Transp"],
div[title^="Advanced Str"],
div[title^="Advanced Bulk"] {
  background: linear-gradient(135deg, rgb(71 35 94), rgb(15, 30, 98))
}
 
/* construction bg colors */
div[title="InsuFoam"],
div[title="Epoxy Resin"],
div[title="MegaTube Coating"],
div[title="Nano-Carbon Sheeting"],
div[title="Nano Fiber"],
div[title="Nano-Coated Glass"],
div[title="Reinforced Glass"],
div[title="Poly-Sulfite Sealant"],
div[title="Glass"],
div[title="Mineral Construction Granulate"] {
  background: linear-gradient(135deg, rgb(72 125 221), rgb(0 64 179))
}
 
/* construction parts */
div[title="Aerostat Foundation"],
div[title="Air Scrubber"],
div[title="Decorative Elements"],
div[title="Floating Tank"],
div[title="Flow Control Device"],
div[title="Fluid Piping"],
div[title="Cylindrical Gas Container"],
div[title="Gas Vent"],
div[title="Magnetic Ground Cover"],
div[title="Metal-Halide Lighting System"],
div[title="Neon Lighting System"],
div[title="Pressure Shielding"],
div[title="Radiation Shielding"],
div[title="Stabilized Technetium"],
div[title="Thermal Shielding"],
div[title="Truss"] {
  background: linear-gradient(135deg, rgb(66, 102, 132), rgb(41, 77, 107))
}
 
div[title="STL Fuel"],
div[title="FTL Fuel"] {
  background: linear-gradient(135deg, rgb(30, 123, 30), rgb(32 90 32))
}
 
 
/* electronic systems bg color */
div[title="Audio Distribution System"],
div[title="Automated Cooling System"],
div[title="Climate Controller"],
div[title="Communication System"],
div[title="FTL Field Controller"],
div[title="Life Support System"],
div[title="Logistics System"],
div[title="Stability Support System"],
div[title="Targeting Computer"],
div[title="Cryogenic Unit"]
{
  background: linear-gradient(135deg, rgb(76, 51, 141),  rgb(51, 26, 76));
}
 
/* life related electronics systems bg color*/
div[title="Water Reclaimer"],
div[title="Life Support System"]
{
  background: linear-gradient(135deg, rgb(30 96 58),  rgb(51, 26, 76));
}
 
div[title*="ium"]:before, 
div[title*="site"]:before, 
div[title*="mineral"i]:before {
  content: "⛰"; opacity: 0.4
}
div[title*="controller"i]:before {
  content: "🎛"; opacity: 0.6
}
div[title*="filter"i]:before,
div[title*="device"i]:before,
div[title*=" MK"i]:before {
  content: "📻";
}
/* 🛹🚿⛲ */
div[title*="flow control device"i]:before {
  content: "🚿";
}
div[title*="glass"i]:before {
  content: "🔲";
  font-size: 25px;
}
div[title*="headphone"i]:before {
  content: "🎧";
}
div[title*="holographic glasses"i]:before {
  content: "👓";
}
div[title*="diode"i]:before {
  content: "▶";
}
div[data-tooltip-content*="SAR"i]:before,
div[title*="scanner"i]:before,
div[title*="sensor"i]:before {
  content: "🔭";
}
div[title*="Foundation"]:before {
  content: "🧇";
}
/* 🧮🎫🎟🎞 */
div[title*="memory"i]:before,
div[title*="process"i]:before,
div[title*="transistor"i]:before,
div[title*="circuit"i]:before {
  content: "🎟";
}
div[title*="tensor"i]:before {
  content: "🧮";
}
div[title="memory bank"i]:before {
  content: "🎞";
}
div[title*="circuit"i]:before {
  content: "🎫";
}
/*🧧🎟💿📼🎞*/
div[title="Non-Volatile Memory"i]:before
{
  content: "📀";
}
div[title*="system"i]:before,
div[title*="computer"i]:before,
div[title*="mainframe"i]:before {
  content: "🖥"; 
  opacity: 0.6
}
/* 🎛🎚💾💽💿📀 */
div[title*="Navigation"]:before,
div[title*="Artificial"]:before,
div[title*="Data"]:before,
div[title*="Network"]:before,
div[title*="Database"]:before,
div[title*="Framework"]:before,
div[title*="Management"]:before,
div[title*="Operating"]:before,
div[title*="Interface"]:before,
div[title*="Algorithm"]:before,
div[title*="Manager"]:before {
  content: "💾";
  opacity: 0.3; /* system override*/
}
div[title*="motherboard"i]:before,
div[title*="wafer"i]:before {
  content: "🎫";
}
div[title*="broadcasting"i]:before,
div[title*="antenna"i]:before,
div[title*="emitter"i]:before {
  content: "📡";
}
div[title*="library"i]:before {
  content: "📖";
}
div[title*="Workstation"]:before,
div[title*="Display"]:before {
  content: "💻";
}
div[title*="Light"]:before {
  content: "💡";
}
div[title*="Rock"]:before {
  content: "🥯";
}
div[title*="Liquid"]:before, 
div[title*="Fluid"]:before {
  content: "💧";
}
div[title*="Air"]:before, 
div[title*="Gas"]:before,
 div[title*="Aero"]:before {
  content: "☁";
}
div[title*="Audio"]:before {
  content: "🔊";
  opacity: 0.3; /* system override */
}
div[title*="Power"]:before, 
div[title*="Capacitor"]:before {
  content: "🔋";
}
div[title*="Power Cell"]:before
{
  font-size: 20px;
}
/* 🔨⛏⚒🛠🔧🔩⚙🗜🧰 */
div[title*="Fastener Kit"]:before {
  content: "🔧";
  font-size: 35px;
}
div[title*="Repair Kit"]:before {
  content: "🧰";
  font-size: 35px;
}
div[title*="Tank"]:before {
  content: "🛢";
  font-size: 35px;
}
div[title*="FTL Fuel Tank"i]:before {
  content: "🧳";
  font-size: 35px;
}
div[title*="Protection"]:before,
div[title*="Plate"]:before,
div[title*="Shield"]:before {
  content: "🛡";
  font-size: 40px;
}
div[title*="Protection Material"]:before {
  content: "🧱";
  font-size: 30px;
}
div[title*="Connectors"]:before {
  content: "🔌";
  font-size: 30px;
  opacity: 0.4
}
div[title*="Seats"]:before {
  content: "🪑";
}
div[title*="Substance"]:before, 
div[title*="Chemical"]:before, 
div[title*="Agent"]:before, 
div[title*="Flux"]:before, 
div[title*="Resin"]:before, 
div[title*="Colorant"]:before {
  content: "🧪";
}
div[title*="Acid"]:before {
  content: "☣";
  font-size: 40px;
}
div[title*="Bacteria"]:before {
  content: "🧫";
}
div[title*="Cryo"]:before {
  content: "❄";
  font-size: 40px;
}
div[title*="Soil"]:before {
  content: "🥔";
}
/* 🧰🔪🩺 */
div[title*="Surgical"i]:before {
  content: "🩺";
  font-size: 30px;
}
/* 🎞🛏🛌 */
div[title*="Medical stretcher"i]:before {
  content: "🎞";
  font-size: 35px;
}
/* 🧰🔪🩺💊 */
div[title*="Medical kit"i]:before {
  content: "🩺";
}
div[title*="Magnet"]:before {
  content: "🧲";
}
/* 🗿🖼 */
div[title*="Deco"]:before {
  content: "🖼";
}
div[title*="Solar"]:before {
  content: "⚡";
}
div[title*="Solar Cell"]:before {
  font-size: 20px;
}
 
/* alloys ♒ 🟪*/
div[title*="-Titanium"]::before,
div[title*=" Titanium"]::before
{
  content: "🟪";
  font-size: 25px;
}
 
div[title="Ferrominium"]::before
{
  content: "🟦";
  font-size: 25px;
}
 
 
/* ---- Medical ------ */
div[title="Auto-Doc"],
div[title="Bandages"],
div[title="Medical Stretcher"],
div[title="Painkillers"],
div[title="Surgical Equipment"],
div[title="Test Tubes"]
{
  background: linear-gradient(135deg, rgb(64 133 64), rgb(48 86 48))
}
 
div[title="Auto-Doc"]:before {
  content: "👨‍⚕️";
}
div[title="Bandages"]:before {
  content: "🧻";
}
div[title="Painkillers"]:before {
  content: "💊";
}
div[title="Surgical Equipment"]:before {
  content: "🩺";
}
div[title*="Tube"]:before {
  content: "🧪";
}
/* 🛌🛏⚕ */
div[title*="Crew Quarters"]:before,
div[title*="Trauma Care"]:before {
  content: "🛏";
  font-size: 40px;
}
/* ---------- */
 
div[title*="Iodine"]:before {
  content: "🩸";
}
div[title*="Sodium"]:before {
  content: "🧂";
}
div[title*="Carbon"]:before {
  content: "🎩";
}
/* 🧂💿🍙🍥⛰🏔 */
div[title="Chlorine"]:before {
  content: "🍥";
}
div[title="Sulfur"]:before {
  content: "🟡";
}
div[title="Tantalum"]:before {
  content: "🔘";
}
div[title="Calcium"]:before {
  content: "⛰";
}
div[title="Beryllium"]:before {
  content: "⛰";
}
div[title="Magnesium"]:before {
  content: "⛰";
}
 
div[title="Gold"]:before {
  content: "🟨";
  font-size: 25px;
}
 
/* 〰🧈🧊🟤🟦 */
 
div[title="Aluminium"]:before {
  content: "⬜";
  font-size: 25px; opacity: 0.2
}
 
div[title="Steel"]:before {
  content: "🧊";
  font-size: 25px; opacity: 0.2
}
 
div[title="Titanium"]:before {
  content: "🟪";
  font-size: 25px; opacity: 0.2
}
 
div[title~="Tungsten"]:before
{
  content: "🟫";
  font-size: 25px; opacity: 0.2
}
 
div[title="Silicon"]:before{
  content: "〰"; opacity: 0.2
}
 
div[title="Copper"]:before {
  content: "🟧";
  font-size: 25px; opacity: 0.2
}
/* 🟥 */
div[title="Iron"]:before {
  content: "🟦";
  font-size: 25px; opacity: 0.2
}
 
/* alloys */
 
div[title="Red Gold"]:before {
  content: "🔶";
  font-size: 25px;
}
 
div[title="Blue Gold"]:before {
  content: "🔷";
  font-size: 25px;
}
 
div[title="Bronze"]:before {
  content: "🔺";
  font-size: 25px;
}
 
div[title="Borosilicate"]:before {
  content: "〰";
}
 
/* ---- */
 
/* 🖊❗➖💈 🌠🥖🍡🧨 */
div[title*="fuel rod"i]:before {
  content: "🧨";
}
div[title="basic fuel rod"i]:before {
  content: "➖";
}
div[title*=" reactor"i]:before,
div[title*=" generator"i]:before {
  content: "🎆";
}
div[title*="fission reactor"i]:before {
  font-size: 20px;
}
div[title*="radioisotope generator"i]:before {
  font-size: 20px;
}
 
/* ---- */
 
div[title="Limestone"]:before {
  content: "🥯";
}
 
div[title*="Drone"]:before {
  content: "✈";
}
 
div[title*="Ore"]:before {
  content: "🥔";
}
 
div[title*="Crystals"]:before {
  content: "💎";
}
 
/* ---------- */
 
div[title$="Grains"]:before {
  content: "🌾";
}
 
div[title$="Maize"]:before {
  content: "🌽";
}
 
div[title^="Drink"]:before {
  content: "🧃";
}
 
div[title^="Protein-Rich Beans"]:before {
  content: "🥒";
}
 
div[title^="Basic Ra"]:before {
  content: "🥫";
}
 
div[title$="Nuts"]:before {
  content: "🥜";
}
 
div[title$="Fruits"]:before {
  content: "🍅";
}
 
div[title$="Plants"]:before {
  content: "🌲";
}
 
div[title^="Caffeinated Beans"]:before {
  content: "🌿";
}
 
div[title$="Algae"]:before {
  content: "🍃";
}
 
div[title$="Grapes"]:before {
  content: "🍇";
}
 
div[title$="Herbs"]:before {
  content: "🌶";
}
 
div[title$="Fodder"]:before {
  content: "💊";
}
 
div[title$="Hops"]:before {
  content: "🌾";
}
 
div[title$="Cotton Fiber"]:before {
  content: "🧶";
}
 
div[title$="Patties"]:before {
  content: "🧫";
}
 
div[title$="Mushrooms"]:before {
  content: "🍄";
}
 
div[title$="Pineberries"]:before {
  content: "🍓";
}
 
div[title$="Paste"]:before {
  content: "🥣";
}
 
div[title$="Solution"]:before {
  content: "🧪";
}
 
div[title^="Vita Essence"]:before {
  content: "🍶";
}
 
/* liquids */
div[title^="Water"]:before {
  content: "💧";
}
div[title*="Heliotrope"]:before {
  content: "🥃";
}
div[title*="Liquid Eins"]:before {
  content: "🥛";
}
 
/* 🎨🏀🏐⚾ */
div[title="Polymer Granulate"]:before {
  content: "🏐";
}
 
div[title$="Poly-Ethylene"]:before {
  content: "⚾";
}
 
div[title*="Sheet Type"]:before {
  content: "🧻";
}
 
div[title*="Foam"]:before,
div[title*="Seal"]:before {
  content: "🌫";
}
div[title*="Fiber"]:before,
div[title*="Fabric"]:before {
  content: "🧵";
}
div[title="Raw Silk Strains"]:before,
div[title="Raw Cotton Fiber"]:before {
  content: "🧶";
}
 
div[title$="Supplies"]:before {
  content: "📠";
}
div[title$="Uniform"]:before {
  content: "👖";
}
div[title$="Toolset"]:before {
  content: "🛠"; opacity: 0.4
}
 
div[title^="FTL"]:before {
  content: "☀";
  font-size: 40px; opacity: 0.5
}
 
div[title^="STL"]:before {
  content: "🛢";
  font-size: 40px; opacity: 0.5
}
 
div[title$="Construction Granulate"]:before {
  content: "🧱";
}
 
div[title*="Casing"]:before {
  content: "🧊";
}
 
div[title$="Deck Elements"]:before {
  content: "🎞";
  font-size: 40px;
}
div[title$="Structural Elements"]:before {
  content: "⛓";
}
/* 🛎 */
div[title$="Bulkhead"]:before {
  content: "🛸";
}
/* 🏗🧭🌫☀🌀 */
div[title$="Aperture"]:before {
  content: "🏗";
}
div[title="Truss"]:before {
  content: "🗼";
}
 
/* ----- gasses------ */
/* 💨🕳〰🌊🌫💥🛢🧳🧴☄ */
 
div[title="Ammonia"]:before {
  content: "🩸";
}
div[title="Argon"]:before {
  content: "☁";
}
div[title="Fluorine"]:before {
  content: "☁";
}
div[title="Neon"]:before {
  content: "☁";
}
div[title="Nitrogen"]:before {
  content: "💧";
}
div[title="Oxygen"]:before {
  content: "💨";
}
div[title*="Helium"]:before {
  content: "🌌";
}
div[title^="Hydrogen"]:before {
  content: "💫";
}
div[title="Helium-3 Isotope"]:before {
  content: "💦";
}
 
div[title="Caffeinated Infusion"]:before {
  content: "☕"; opacity: 0.2
}
div[title="Basic Overalls"]:before {
  content: "🧥"; opacity: 0.2
}
div[title$="Work Overall"]:before {
  content: "🦺"; opacity: 0.2
}
div[title="Basic Overalls"] { background: linear-gradient(135deg, rgb(64 97 104), rgb(57 73 147)) }
div[title="Caffeinated Infusion"], 
div[title$="Work Overall"] { background: linear-gradient(135deg, rgb(64 97 104), rgb(105 30 145)) }
 
div[title="Kombucha"]:before {
  content: "🍯"; opacity: 0.2
}
div[title^="Exos"]:before {
  content: "👷‍♀️"; opacity: 0.2
}
div[title^="Power Tools"]:before {
  content: "🔌"; opacity: 0.2
}
div[title^="Exos"], 
div[title="Power Tools"] { background: linear-gradient(135deg, rgb(42 122 54), rgb(57 73 147)) }
div[title="Kombucha"],
div[title="Repair Kit"] { background: linear-gradient(135deg, rgb(42 122 54), rgb(105 30 145)) }
 
div[title$="Ale"]:before {
  content: "🍺"; opacity: 0.2
}
div[title="Stem Cell Treatment"]:before {
  content: "💉"; opacity: 0.2
}
div[title="HazMat Work Suit"]:before {
  content: "👩‍🚒"; opacity: 0.2
}
div[title="Multi-Purpose Scanner"]:before {
  content: "🔭"; opacity: 0.2
}
div[title="Basic Medical Kit"], 
div[title="HazMat Work Suit"], 
div[title="Multi-Purpose Scanner"] { background: linear-gradient(135deg, rgb(116 124 27), rgb(57 73 147)) 
}
div[title$="Ale"], 
div[title="Stem Cell Treatment"] { background: linear-gradient(135deg, rgb(116 124 27), rgb(105 30 145)) 
}
 
div[title$="Gin"]:before {
  content: "🥃"; opacity: 0.2
}
div[title$="Meal"]:before {
  content: "🥡"; opacity: 0.2
}
div[title="VitaGel"]:before {
  content: "🧪"; opacity: 0.2
}
div[title="Smart Space Suit"]:before {
  content: "👨‍🚀"; opacity: 0.2
}
div[title*="personal"i]:before {
  content: "📱"; opacity: 0.2
}
div[title="Flavoured Insta-Meal"], 
div[title="Personal Data Assistant"], 
div[title="Smart Space Suit"] { background: linear-gradient(135deg, rgb(52 93 159), rgb(57 73 147)) }
div[title$="Gin"], 
div[title="VitaGel"] { background: linear-gradient(135deg, rgb(52 93 159), rgb(105 30 145)) }
 
 
div[title="Smart Zinfandel"]:before {
  content: "🍷"; opacity: 0.2
}
div[title$="Meat Meal"]:before {
  content: "🍱"; opacity: 0.2
}
div[title="NeuroStimulants"]:before {
  content: "💊"; opacity: 0.2
}
div[title="AI-Assisted Lab Coat"]:before {
  content: "🥼"; opacity: 0.2
}
div[title="Scientific Work Station"]:before {
  content: "🔬"; opacity: 0.2
}
div[title$="Meat Meal"], 
div[title="AI-Assisted Lab Coat"], 
div[title="Scientific Work Station"] { background: linear-gradient(135deg, rgb(155 92 169), rgb(57 73 147)) }
div[title="Smart Zinfandel"], 
div[title="NeuroStimulants"] { background: linear-gradient(135deg, rgb(155 92 169), rgb(105 30 145)) }
 
/* 🕹☎📞 */
div[title*="command bridge"i]:before {
  content: "☎"; opacity: 0.4
}
 
/* ⛰☢⚙🚰🌡 */
div[title*="engine"i]:before {
  content: "🚀"; opacity: 0.4
}
 
div[title*="nozzle"i]:before {
  content: "⛰"; opacity: 0.4
}
 
/* 🧨🌟🧳🛎 */
div[title*="combustion chamber"i]:before {
  content: "🧳"; opacity: 0.4
}
 
div[title*="pump"i]:before,
div[title*="pipe"i]:before,
div[title*="piping"i]:before
{
  content: "🚰"; opacity: 0.4
}
 
div[title*="vent"i]:before {
  content: "♨";
  font-size: 40px; opacity: 0.4
}
 
/* 🗼🧇🔗⛓🛡📎🖇 */ 
div[title*="structural space"i]:before {
  content: "⛓"; opacity: 0.4
}
 
/* 🧊📦 */ 
div[title*="cargo bay"i]:before {
  content: "📦"; opacity: 0.4
}
 
div[title*="habitat"i]:before {
  content: "🏠"; opacity: 0.4
}
 
div[title*="surgery unit"i]:before {
  content: "⚕"; opacity: 0.4
}
 
/*🗄🎯🎡*/
div[title*="entertainment unit"i]:before {
  content: "🎡"; opacity: 0.4
}
 
/* 🎨 */
div[title*="workshop unit"i]:before {
  content: "🎨"; opacity: 0.4
}
 
/* sizes */
 
div[title*="small"i]:before,
div[title*="tiny"i]:before,
div[title$=" s"i]:before 
{
  font-size: 20px; opacity: 0.4
}
 
div[title*="medium"i]:before,
div[title$=" m"i]:before 
{
  font-size: 25px; opacity: 0.4
}
 
div[title*="transistor"i]:before 
{
  font-size: 25px; opacity: 0.4
}
 
 
/* buildings - kill stray icons */
div.BuildingIcon__container___jF5GUsz:before
{
  content: "";
}
    
    /* items in market view */
table.BrokerList__table___ylgeiyg >
tbody >
tr >
td >
div.MaterialIcon__container___q8gKIx8 >
div.ColoredIcon__container___djaR4r2:before 
{
  font-size: 24px;
}

/* items in building view */
div.BuildingInformation__recipe___uzanxXw >
div >
div.MaterialIcon__container___q8gKIx8 >
div.ColoredIcon__container___djaR4r2:before
{
  font-size: 26px;
}

/* items in recipe view */
div.MaterialInformation__recipeInputs___eLvfoop >
div.MaterialIcon__container___q8gKIx8 >
div.ColoredIcon__container___djaR4r2:before
{
  font-size: 26px;
}

/* items in planet view */
div.ResourceTable__gridContainer___ymrzTcD >
div.MaterialIcon__container___q8gKIx8 >
div.ColoredIcon__container___djaR4r2:before
{
  font-size: 18px;
}`;
/* harmony export (immutable) */ __webpack_exports__["f"] = IconStyle;



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const CurrencySymbols = {
    "CIS": "₡",
    "AIC": "₳",
    "NCC": "₦",
    "ICA": "ǂ",
    "ECD": "€",
};
/* harmony export (immutable) */ __webpack_exports__["b"] = CurrencySymbols;

const FactionHeaders = {
    "Castillo-Ito": "CI",
    "Insitor": "IC",
    "Antares": "AI",
    "NEO Charter": "NC"
};
/* harmony export (immutable) */ __webpack_exports__["e"] = FactionHeaders;

const RatingColors = {
    "P": "#1b6b9c",
    "U": "#8b211e",
    "F": "#e26c37",
    "E": "#e7782b",
    "D": "#e87d28",
    "C": "#ed891c",
    "B": "#f19510",
    "A": "#f6a204"
};
/* unused harmony export RatingColors */

const Consumption = {
    "PIO": {
        "RAT": 4,
        "DW": 4,
        "OVE": 0.5,
        "PWO": 0.2,
        "COF": 0.5
    },
    "SET": {
        "DW": 5,
        "RAT": 6,
        "EXO": 0.5,
        "PT": 0.5,
        "KOM": 1,
        "REP": 0.2
    },
    "TEC": {
        "DW": 7.5,
        "RAT": 7,
        "MED": 0.5,
        "HMS": 0.5,
        "SCN": 0.1,
        "ALE": 1,
        "SC": 0.1
    },
    "ENG": {
        "DW": 10,
        "MED": 0.5,
        "FIM": 7,
        "HSS": 0.2,
        "PDA": 0.1,
        "VG": 0.2,
        "GIN": 1
    },
    "SCI": {
        "DW": 10,
        "MED": 0.5,
        "MEA": 7,
        "LC": 0.2,
        "WS": 0.1,
        "WIN": 1,
        "NST": 0.1
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Consumption;

const Exchanges = { "Antares Station Commodity Exchange": "ANT", "Benten Station Commodity Exchange": "BEN", "Moria Station Commodity Exchange": "MOR", "Hortus Station Commodity Exchange": "HRT", "Hubur Commodity Exchange": "HUB", "Arclight Commodity Exchange": "ARC" };
/* harmony export (immutable) */ __webpack_exports__["d"] = Exchanges;

const ExchangeTickers = { "ANT": "AI1", "BEN": "CI1", "MOR": "NC1", "HRT": "IC1", "HUB": "NC2", "ARC": "CI2" };
/* harmony export (immutable) */ __webpack_exports__["c"] = ExchangeTickers;

const Stations = { "Antares Station": "ANT", "Benten Station": "BEN", "Moria Station": "MOR", "Hortus Station": "HRT", "Hubur Station": "HUB", "Acrlight Station": "ARC" };
/* harmony export (immutable) */ __webpack_exports__["m"] = Stations;

const NonProductionBuildings = ["CM", "HB1", "HB2", "HB3", "HB4", "HB5", "HBB", "HBC", "HBL", "HBM", "STO"];
/* harmony export (immutable) */ __webpack_exports__["i"] = NonProductionBuildings;

const FriendlyNames = {
    "LocalMarketAds": "LM Unit Prices",
    "OrderETAs": "Order ETAs",
    "FlightETAs": "Flight Planning ETAs",
    "ShippingAds": "LM Shipping Rates",
    "PostLM": "LM Posting Unit Price",
    "ContractDrafts": "CONTD Unit Prices",
    "QueueLoad": "Queue Percent Display",
    "ConsumableTimers": "Workforce Consumable Burn",
    "FleetETAs": "Fleet ETAs",
    "Notifications": "Notifications",
    "ScreenUnpack": "Screen Unpack",
    "ImageCreator": "Chat Image Creator",
    "InventoryOrganizer": "Inventory Sorting",
    "CommandCorrecter": "Command Correcter",
    "CalculatorButton": "Calculator Button",
    "Sidebar": "Sidebar",
    "HeaderMinimizer": "Minimize Headers (Master)",
    "PendingContracts": "Pending Contracts",
    "CompactUI": "Compact UI",
    "FormulaReplacer": "Formula Replacer",
    "AdvancedMode": "Advanced Minimialist Mode (Master)",
    "CXOBHighlighter": "CXOB Name Highlighter",
    "CXPOOrderBook": "CXPO Order Book",
    "ChatDeleteButton": "Toggle Chat Delete (Master)",
};
/* harmony export (immutable) */ __webpack_exports__["f"] = FriendlyNames;

const SortingTriangleHTML = `
<div title=""><svg aria-hidden="true" width="10" height="10" role="img" version="1.1" fill="currentcolor" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" style="vertical-align: middle;"><g><path d="M.88681 1.097752l12.13774 21.02318L25.422964 1.105446z"></path></g></svg></div>`;
/* harmony export (immutable) */ __webpack_exports__["l"] = SortingTriangleHTML;

const PlanetCommands = ["ADM", "BSC", "COGC", "COGCPEX", "COGCU", "FLTP", "LR", "LMP", "LM", "PLI", "POPI", "POPR", "PPS", "SHY", "WAR", "BS"];
/* harmony export (immutable) */ __webpack_exports__["j"] = PlanetCommands;

const SystemNames = {
    "ARCLIGHT": "AM-783",
    "FORGE-KEEP": "FK-371",
    "MOUNT OLYMPUS": "HM-049",
    "GATEWAY": "HM-223",
    "NEO EDEN": "JS-299",
    "EBISU": "JS-952",
    "BASTABLON": "KW-020",
    "DOLZENA": "LG-418",
    "TRINITY": "OF-259",
    "MORIA": "OT-580",
    "OUTER HEAVEN": "PG-899",
    "AURUM": "QJ-650",
    "ACETARES": "QJ-684",
    "HUBUR": "TD-203",
    "HOTEI": "UV-135",
    "BENTEN": "UV-351",
    "DAIKOKU": "UV-796",
    "HORTUS": "VH-331",
    "MIDWAY": "WB-675",
    "ANTARES III": "ZV-194",
    "ANTARES I": "ZV-307",
    "ANTARES II": "ZV-759"
};
/* harmony export (immutable) */ __webpack_exports__["n"] = SystemNames;

const PlanetNames = {
    "LEMURIA": "AJ-768a",
    "GALLUS": "AM-783b",
    "EMENTIOR": "AM-783c",
    "TYPHON": "AU-522b",
    "NOVA HONSHU": "BS-788c",
    "TACOTOPIA": "CB-045b",
    "PYRGOS": "CH-771a",
    "TALOSIA": "DC-823b",
    "ORM": "DW-456g",
    "MANIFOLD": "EL-179b",
    "NOVA UNALASKA": "EZ-476b",
    "TOKTU": "FK-037f",
    "LA FORGE": "FK-371b",
    "BOUCHER": "FK-794b",
    "VAULT": "GC-645b",
    "CHU": "GY-110c",
    "POSEIDON": "HM-049b",
    "APOTHECARY": "IA-603b",
    "ELECTRONICA": "IY-028c",
    "NEMESIS": "JS-299a",
    "GIBSON": "JS-952c",
    "AUSTRALIA": "KI-446a",
    "DEMETER": "KI-446b",
    "HERMES": "KI-448b",
    "ROCK": "KQ-966b",
    "MILLIWAYS": "KW-020c",
    "GIEDI PRIME": "KW-358b",
    "ETHERWIND": "KW-688c",
    "KINZA": "LG-418b",
    "PLANET MC PLANETFACE": "LG-913e",
    "ARATORA": "LS-231b",
    "GRIFFONSTONE": "LS-300c",
    "JURA": "OF-259d",
    "BERTHIER": "OF-375b",
    "ADALINA": "OF-375c",
    "DANAKIL": "OT-442b",
    "IIRON": "OT-580a",
    "MONTEM": "OT-580b",
    "VALLIS": "OT-580c",
    "PALLADA": "OT-580d",
    "PRISM": "OT-889a",
    "JEETIYU": "OT-889b",
    "SALADIN": "PG-899b",
    "NASCENT": "QJ-149c",
    "ELON": "QJ-650c",
    "LOM PALANKA": "QJ-684a",
    "ACELAND": "QJ-684b",
    "CIRCA": "QQ-001a",
    "CIRCE": "QQ-001b",
    "CELEBDIL": "QQ-645b",
    "MALAHAT": "RC-040b",
    "IRONFORGE": "RC-040c",
    "ICE STATION ALPHA": "SE-110c",
    "SHEOL": "TD-203b",
    "RHAZES": "TD-228b",
    "ASBESTOS LEAD ASBESTOS": "UV-072c",
    "KATOA": "UV-351a",
    "YANNICK": "UV-351b",
    "UMBRA": "UV-351c",
    "BIOGENESIS": "UV-351d",
    "PROXION": "UV-796b",
    "PHANTASM": "VH-043a",
    "PROMITOR": "VH-331a",
    "HELION PRIME": "VH-331d",
    "ODYSSEUS": "VH-331f",
    "AVALON": "VH-331g",
    "HYDRON": "VH-331i",
    "GASWORLD": "WB-675i",
    "MIMAR": "WC-702b",
    "MAGUS": "XD-354b",
    "UPONOR": "XH-329a",
    "LIBERTAS": "XH-594a",
    "KIRUNA": "XH-594b",
    "CORTEZ": "XH-594c",
    "KUB": "YI-059f",
    "HARPINA": "YI-209h",
    "ARCADIA": "YI-683c",
    "VERDANT": "YI-715b",
    "NORWICK": "YK-649b",
    "NIKE": "ZV-194a",
    "HEPHAESTUS": "ZV-307c",
    "PHOBOS": "ZV-307d",
    "VULCAN": "ZV-759b",
    "DEIMOS": "ZV-759c",
    "HARMONIA": "ZV-896b"
};
/* harmony export (immutable) */ __webpack_exports__["k"] = PlanetNames;

const MaterialNames = {
    "AAR": ["Antenna Array", "electronic devices"],
    "ABH": ["Advanced Bulkhead", "construction prefabs"],
    "ACS": ["Automated Cooling System", "electronic systems"],
    "ADE": ["Advanced Deck Elements", "construction prefabs"],
    "ADR": ["Auto-Doc", "medical equipment"],
    "ADS": ["Audio Distribution System", "electronic systems"],
    "AEF": ["Aerostat Foundation", "construction parts"],
    "AEN": ["Advanced STL Engine", "ship engines"],
    "AFP": ["Advanced Fuel Pump", "ship engines"],
    "AFR": ["Advanced Fuel Rod", "ship engines"],
    "AGS": ["Advanced High-G Seats", "ship parts"],
    "AHP": ["Advanced Hull Plate", "ship parts"],
    "AIR": ["Air Scrubber", "construction parts"],
    "AL": ["Aluminium", "metals"],
    "ALE": ["Stellar Pale Ale", "consumables (luxury)"],
    "ALG": ["Protein-Rich Algae", "agricultural products"],
    "ALO": ["Aluminium Ore", "ores"],
    "AMM": ["Ammonia", "gases"],
    "ANZ": ["Advanced Nozzle", "ship engines"],
    "APT": ["Advanced Thermal Protection Tile", "ship shields"],
    "AR": ["Argon", "gases"],
    "ARP": ["Advanced Anti-rad Plate", "ship shields"],
    "ASE": ["Advanced Structural Elements", "construction prefabs"],
    "AST": ["Alpha-Stabilized Titanium", "alloys"],
    "ATA": ["Advanced Transparent Aperture", "construction prefabs"],
    "ATP": ["Advanced Thermal Protection Material", "ship parts"],
    "AU": ["Gold", "metals"],
    "AUO": ["Gold Ore", "ores"],
    "AWF": ["Active Water Filter", "electronic devices"],
    "AWH": ["Advanced Whipple Shielding", "ship shields"],
    "BAC": ["Helpful Bacteria", "chemicals"],
    "BAI": ["Basic AI Framework", "software components"],
    "BBH": ["Basic Bulkhead", "construction prefabs"],
    "BCO": ["Budget Connectors", "electronic pieces"],
    "BDE": ["Basic Deck Elements", "construction prefabs"],
    "BE": ["Beryllium", "elements"],
    "BEA": ["Protein-Rich Beans", "agricultural products"],
    "BER": ["Beryl Crystals", "minerals"],
    "BFP": ["Basic Fuel Pump", "ship engines"],
    "BFR": ["Basic Fuel Rod", "ship engines"],
    "BGC": ["Shielded Connectors", "electronic pieces"],
    "BGO": ["Blue Gold", "alloys"],
    "BGS": ["Basic High-G Seats", "ship parts"],
    "BHP": ["Basic Hull Plate", "ship parts"],
    "BID": ["Full-Body Interaction Device", "electronic devices"],
    "BL": ["Breathable Liquid", "chemicals"],
    "BLE": ["Desaturation Agent", "chemicals"],
    "BMF": ["Basic Mainframe", "electronic devices"],
    "BND": ["Bandages", "medical equipment"],
    "BOR": ["Boron Crystals", "minerals"],
    "BOS": ["Borosilicate", "alloys"],
    "BPT": ["Basic Thermal Protection Tile", "ship shields"],
    "BR1": ["Command Bridge MK1", "unit prefabs"],
    "BR2": ["Command Bridge MK2", "unit prefabs"],
    "BRM": ["Bioreactive Minerals", "minerals"],
    "BRO": ["Bronze", "alloys"],
    "BRP": ["Basic Anti-rad Plate", "ship shields"],
    "BRS": ["Short-distance Command Bridge", "unit prefabs"],
    "BSC": ["Body Scanner", "electronic devices"],
    "BSE": ["Basic Structural Elements", "construction prefabs"],
    "BTA": ["Basic Transparent Aperture", "construction prefabs"],
    "BTS": ["Bacterial Tungsten Solution", "liquids"],
    "BWH": ["Basic Whipple Shielding", "ship shields"],
    "BWS": ["Basic Workstation", "electronic devices"],
    "C": ["Carbon", "elements"],
    "CA": ["Calcium", "elements"],
    "CAF": ["Caffeinated Beans", "agricultural products"],
    "CAP": ["Electric Field Capacitor", "electronic pieces"],
    "CBL": ["Large Capacitor Bank", "energy systems"],
    "CBM": ["Medium Capacitor Bank", "energy systems"],
    "CBS": ["Small Capacitor Bank", "energy systems"],
    "CC": ["Climate Controller", "electronic systems"],
    "CCD": ["Crowd Control Drone", "drones"],
    "CD": ["Capacitive Display", "electronic parts"],
    "CF": ["Ceramic Fabric", "textiles"],
    "CHA": ["Combustion Chamber", "ship engines"],
    "CL": ["Chlorine", "elements"],
    "CLI": ["Caliche Rock", "minerals"],
    "CMK": ["", "construction materials"],
    "COF": ["Caffeinated Infusion", "consumables (luxury)"],
    "COM": ["Communication System", "electronic systems"],
    "COT": ["Cotton Fabric", "textiles"],
    "CQL": ["Crew Quarters (Large)", "unit prefabs"],
    "CQM": ["Crew Quarters (Medium)", "unit prefabs"],
    "CQS": ["Crew Quarters (Small)", "unit prefabs"],
    "CQT": ["Crew Quarters (Tiny)", "unit prefabs"],
    "CRU": ["Cryogenic Unit", "electronic systems"],
    "CST": ["Cryogenic Stabilizer", "chemicals"],
    "CTF": ["Ceramic-Tungsten Fabric", "textiles"],
    "CU": ["Copper", "metals"],
    "CUO": ["Copper Ore", "ores"],
    "DA": ["Data Analyzer", "software tools"],
    "DCH": ["Drone Chassis", "drones"],
    "DCL": ["Durable Casing L", "plastics"],
    "DCM": ["Durable Casing M", "plastics"],
    "DCS": ["Durable Casing S", "plastics"],
    "DD": ["Distributed Database", "software tools"],
    "DDT": ["DDT Plant Agent", "chemicals"],
    "DEC": ["Decorative Elements", "construction parts"],
    "DIS": ["Information Display", "electronic parts"],
    "DOU": ["Drone Operations Unit", "unit prefabs"],
    "DRF": ["Drone Frame", "drones"],
    "DV": ["Data Visualizer", "software tools"],
    "DW": ["Drinking Water", "consumables (basic)"],
    "EDC": ["Entertainment Data Core", "software tools"],
    "EES": ["Enriched Einsteinium", "chemicals"],
    "ENG": ["Standard STL Engine", "ship engines"],
    "EPO": ["Epoxy Resin", "construction materials"],
    "ES": ["Einsteinium", "elements"],
    "ETC": ["Enriched Technetium", "chemicals"],
    "EXO": ["Exoskeleton Work Suit", "consumables (basic)"],
    "F": ["Fluorine", "gases"],
    "FAL": ["Ferrominium", "alloys"],
    "FAN": ["Active Cooling Device", "electronic parts"],
    "FC": ["Flow Control Device", "construction parts"],
    "FE": ["Iron", "metals"],
    "FEO": ["Iron Ore", "ores"],
    "FET": ["Ferro-Titanium", "alloys"],
    "FF": ["FTL Fuel", "fuels"],
    "FFC": ["FTL Field Controller", "electronic systems"],
    "FIM": ["Flavoured Insta-Meal", "consumables (basic)"],
    "FIR": ["Fission Reactor", "ship engines"],
    "FLO": ["Floating Tank", "construction parts"],
    "FLP": ["Fluid Piping", "construction parts"],
    "FLX": ["Flux", "chemicals"],
    "FOD": ["All-Purpose Fodder", "agricultural products"],
    "FSE": ["Fuel-saving STL Engine", "ship engines"],
    "FUN": ["Entertainment Unit", "unit prefabs"],
    "GAL": ["Galerite Rock", "minerals"],
    "GC": ["Cylindrical Gas Container", "construction parts"],
    "GCH": ["Glass Combustion Chamber", "ship engines"],
    "GEN": ["Glass-based STL Engine", "ship engines"],
    "GIN": ["Einsteinium-Infused Gin", "consumables (luxury)"],
    "GL": ["Glass", "construction materials"],
    "GNZ": ["Glass Nozzle", "ship engines"],
    "GRA": ["Wine-Quality Grapes", "agricultural products"],
    "GRN": ["High-Carb Grains", "agricultural products"],
    "GV": ["Gas Vent", "construction parts"],
    "H": ["Hydrogen", "gases"],
    "H2O": ["Water", "liquids"],
    "HAB": ["Habitat Unit", "unit prefabs"],
    "HAL": ["Halite Crystals", "minerals"],
    "HCC": ["High-Capacity Connectors", "electronic pieces"],
    "HCP": ["Hydrocarbon Plants", "agricultural products"],
    "HD": ["Holographic Display", "electronic devices"],
    "HE": ["Helium", "gases"],
    "HE3": ["Helium-3 Isotope", "gases"],
    "HER": ["Spicy Herbs", "agricultural products"],
    "HEX": ["Heliotrope Extract", "liquids"],
    "HHP": ["Hardened Hull Plate", "ship parts"],
    "HMS": ["HazMat Work Suit", "consumables (basic)"],
    "HNZ": ["Hyperthrust Nozzle", "ship engines"],
    "HOG": ["Holographic Glasses", "electronic devices"],
    "HOP": ["Flowery Hops", "agricultural products"],
    "HPC": ["Handheld Personal Console", "electronic devices"],
    "HPR": ["High-power FTL Reactor", "ship engines"],
    "HSE": ["Hardened Structural Elements", "construction prefabs"],
    "HSS": ["Smart Space Suit", "consumables (basic)"],
    "HTE": ["Hyperthrust STL Engine", "ship engines"],
    "HYR": ["Hyper-power Reactor", "ship engines"],
    "I": ["Iodine", "elements"],
    "IDC": ["Information Data Core", "software systems"],
    "IMM": ["Information Management System", "software systems"],
    "IND": ["Indigo Colorant", "chemicals"],
    "INS": ["InsuFoam", "construction materials"],
    "JUI": ["Sedative Substance", "chemicals"],
    "KOM": ["Kombucha", "consumables (luxury)"],
    "KV": ["Kevlar Fabric", "textiles"],
    "LBH": ["Lightweight Bulkhead", "construction prefabs"],
    "LC": ["AI-Assisted Lab Coat", "consumables (basic)"],
    "LCB": ["Large Cargo Bay Kit", "ship kits"],
    "LCR": ["Liquid Crystals", "chemicals"],
    "LD": ["Local Database", "software components"],
    "LDE": ["Lightweight Deck Elements", "construction prefabs"],
    "LDI": ["Laser Diodes", "electronic pieces"],
    "LES": ["Liquid Einsteinium", "liquids"],
    "LFE": ["Large FTL Emitter", "ship engines"],
    "LFL": ["Large FTL Fuel Tank Kit", "ship kits"],
    "LFP": ["Low-heat Fuel Pump", "ship engines"],
    "LHP": ["Lightweight Hull Plate", "ship parts"],
    "LI": ["Lithium", "metals"],
    "LIO": ["Lithium Ore", "ores"],
    "LIS": ["Life Support System", "electronic systems"],
    "LIT": ["Neon Lighting System", "construction parts"],
    "LOG": ["Logistics System", "electronic systems"],
    "LSE": ["Lightweight Structural Elements", "construction prefabs"],
    "LSL": ["Large STL Fuel Tank Kit", "ship kits"],
    "LST": ["Limestone", "minerals"],
    "LTA": ["Lightweight Transparent Aperture", "construction prefabs"],
    "LU": ["Laboratory Unit", "unit prefabs"],
    "MAG": ["Magnetite", "minerals"],
    "MAI": ["High-Carb Maize", "agricultural products"],
    "MB": ["Motherboard", "electronic parts"],
    "MCB": ["Medium Cargo Bay Kit", "ship kits"],
    "MCG": ["Mineral Construction Granulate", "construction materials"],
    "MEA": ["Quality Meat Meal", "consumables (basic)"],
    "MED": ["Basic Medical Kit", "consumables (basic)"],
    "MFE": ["Medium FTL Emitter", "ship engines"],
    "MFK": ["Medium Fastener Kit", "electronic pieces"],
    "MFL": ["Medium FTL Fuel Tank Kit", "ship kits"],
    "MG": ["Magnesium", "elements"],
    "MGC": ["Magnetic Ground Cover", "construction parts"],
    "MGS": ["Magnesite", "minerals"],
    "MHL": ["Metal-Halide Lighting System", "construction parts"],
    "MHP": ["Micro Headphones", "electronic devices"],
    "MLI": ["Machine Learning Interface", "software components"],
    "MPC": ["Micro-Processor", "electronic parts"],
    "MSL": ["Medium STL Fuel Tank Kit", "ship kits"],
    "MTC": ["MegaTube Coating", "construction materials"],
    "MTP": ["Meat Tissue Patties", "agricultural products"],
    "MUS": ["Protein-Rich Mushrooms", "agricultural products"],
    "MWF": ["Medium Wafer", "electronic pieces"],
    "N": ["Nitrogen", "gases"],
    "NA": ["Sodium", "elements"],
    "NAB": ["Sodium Borohydride", "chemicals"],
    "NCS": ["Nano-Carbon Sheeting", "construction materials"],
    "NE": ["Neon", "gases"],
    "NF": ["Networking Framework", "software components"],
    "NFI": ["Nano Fiber", "construction materials"],
    "NG": ["Nano-Coated Glass", "construction materials"],
    "NL": ["Nylon Fabric", "textiles"],
    "NN": ["Neural Network", "software tools"],
    "NOZ": ["Basic Nozzle", "ship engines"],
    "NR": ["Nano-Enhanced Resin", "chemicals"],
    "NS": ["Nutrient Solution", "chemicals"],
    "NST": ["NeuroStimulants", "consumables (luxury)"],
    "NUT": ["Triglyceride Nuts", "agricultural products"],
    "NV1": ["Navigation Module MK1", "ship parts"],
    "NV2": ["Navigation Module MK2", "ship parts"],
    "O": ["Oxygen", "gases"],
    "OFF": ["Office Supplies", "utility"],
    "OLF": ["Olfactory Substances", "chemicals"],
    "OS": ["Operating System", "software tools"],
    "OVE": ["Basic Overalls", "consumables (basic)"],
    "PCB": ["Printed Circuit Board", "electronic parts"],
    "PDA": ["Personal Data Assistant", "consumables (basic)"],
    "PE": ["Poly-Ethylene", "plastics"],
    "PFE": ["Premium Fertilizer", "chemicals"],
    "PG": ["Polymer Granulate", "plastics"],
    "PIB": ["Pineberries", "agricultural products"],
    "PK": ["Painkillers", "medical equipment"],
    "POW": ["Power Cell", "energy systems"],
    "PPA": ["Protein Paste", "agricultural products"],
    "PSH": ["Pressure Shielding", "construction parts"],
    "PSL": ["Polymer Sheet Type L", "plastics"],
    "PSM": ["Polymer Sheet Type M", "plastics"],
    "PSS": ["Polymer Sheet Type S", "plastics"],
    "PT": ["Power Tools", "consumables (basic)"],
    "PWO": ["Padded Work Overall", "consumables (luxury)"],
    "QCR": ["Quick-charge FTL Reactor", "ship engines"],
    "RAD": ["Radio Device", "electronic devices"],
    "RAG": ["Radioisotope Generator", "ship engines"],
    "RAM": ["Memory Bank", "electronic parts"],
    "RAT": ["Basic Rations", "consumables (basic)"],
    "RBH": ["Reinforced Bulkhead", "construction prefabs"],
    "RCO": ["Raw Cotton Fiber", "agricultural products"],
    "RCS": ["Reactor Control System", "ship engines"],
    "RCT": ["Standard FTL Reactor", "ship engines"],
    "RDE": ["Reinforced Deck Elements", "construction prefabs"],
    "RDL": ["Large Ship-Repair Drone Operations Unit", "unit prefabs"],
    "RDS": ["Small Ship-Repair Drone Operations Unit", "unit prefabs"],
    "REA": ["Chemical Reagents", "chemicals"],
    "RED": ["Rescue Drone", "drones"],
    "REP": ["Repair Kit", "consumables (luxury)"],
    "RG": ["Reinforced Glass", "construction materials"],
    "RGO": ["Red Gold", "alloys"],
    "RHP": ["Reinforced Hull Plate", "ship parts"],
    "ROM": ["Non-Volatile Memory", "electronic parts"],
    "RSE": ["Reinforced Structural Elements", "construction prefabs"],
    "RSH": ["Radiation Shielding", "construction parts"],
    "RSI": ["Raw Silk Strains", "agricultural products"],
    "RTA": ["Reinforced Transparent Aperture", "construction prefabs"],
    "S": ["Sulfur", "elements"],
    "SA": ["Search Algorithm", "software components"],
    "SAL": ["Sorting Algorithm", "software components"],
    "SAR": ["Sensor Array", "electronic devices"],
    "SC": ["Stem Cell Treatment", "consumables (luxury)"],
    "SCB": ["Small Cargo Bay Kit", "ship kits"],
    "SCN": ["Multi-Purpose Scanner", "consumables (basic)"],
    "SCR": ["Sulfur Crystals", "minerals"],
    "SDR": ["Surgical Drone", "drones"],
    "SEA": ["Poly-Sulfite Sealant", "construction materials"],
    "SEN": ["Sensor", "electronic parts"],
    "SEQ": ["Surgical Equipment", "medical equipment"],
    "SF": ["STL Fuel", "fuels"],
    "SFE": ["Small FTL Emitter", "ship engines"],
    "SFK": ["Small Fastener Kit", "electronic pieces"],
    "SFL": ["Small FTL Fuel Tank Kit", "ship kits"],
    "SI": ["Silicon", "metals"],
    "SIL": ["Silken Fabric", "textiles"],
    "SIO": ["Silicon Ore", "ores"],
    "SNM": ["Spatial Navigation Map", "software systems"],
    "SOI": ["Artificial Soil", "chemicals"],
    "SOL": ["Solar Cell", "energy systems"],
    "SP": ["Solar Panel", "energy systems"],
    "SRD": ["Ship-Repair Drone", "drones"],
    "SRP": ["Specialized Anti-rad Plate", "ship shields"],
    "SSC": ["Structural Spacecraft Component", "ship parts"],
    "SSL": ["Small STL Fuel Tank Kit", "ship kits"],
    "STL": ["Steel", "metals"],
    "STR": ["Medical Stretcher", "medical equipment"],
    "STS": ["Stability Support System", "electronic systems"],
    "SU": ["Surgery Unit", "unit prefabs"],
    "SUD": ["Surveillance Drone", "drones"],
    "SUN": ["Safety Uniform", "utility"],
    "SWF": ["Small Wafer", "electronic pieces"],
    "TA": ["Tantalum", "elements"],
    "TAC": ["Targeting Computer", "electronic systems"],
    "TAI": ["Tantalite Rock", "minerals"],
    "TC": ["Technetium", "elements"],
    "TCB": ["Tiny Cargo Bay Kit", "ship kits"],
    "TCL": ["TCL Acid", "chemicals"],
    "TCO": ["Technetium Oxide", "minerals"],
    "TCS": ["Stabilized Technetium", "construction parts"],
    "TCU": ["Trauma Care Unit", "unit prefabs"],
    "THF": ["ThermoFluid", "chemicals"],
    "THP": ["Basic Thermal Protection Material", "ship parts"],
    "TI": ["Titanium", "metals"],
    "TIO": ["Titanium Ore", "ores"],
    "TK": ["TechnoKevlar Fabric", "textiles"],
    "TPU": ["Tensor Processing Unit", "electronic parts"],
    "TRA": ["Audio Transmitter", "electronic parts"],
    "TRN": ["Advanced Transistor", "electronic pieces"],
    "TRU": ["Truss", "construction parts"],
    "TS": ["Tectosilisite", "minerals"],
    "TSH": ["Thermal Shielding", "construction parts"],
    "TUB": ["Test Tubes", "medical equipment"],
    "UTS": ["Universal Toolset", "utility"],
    "VCB": ["High-volume Cargo Bay Kit", "ship kits"],
    "VEG": ["Triglyceride Fruits", "agricultural products"],
    "VG": ["VitaGel", "consumables (luxury)"],
    "VIT": ["Vita Essence", "agricultural products"],
    "VSC": ["Very Small Cargo Bay Kit", "ship kits"],
    "W": ["Tungsten", "metals"],
    "WAI": ["Weak Artificial Intelligence", "software systems"],
    "WAL": ["Alpha-Stabilized Tungsten", "alloys"],
    "WCB": ["High-load Cargo Bay Kit", "ship kits"],
    "WIN": ["Smart Zinfandel", "consumables (luxury)"],
    "WM": ["Window Manager", "software components"],
    "WOR": ["Handcraft Workshop Unit", "unit prefabs"],
    "WR": ["Water Reclaimer", "electronic systems"],
    "WS": ["Scientific Work Station", "consumables (basic)"],
    "ZIR": ["Zircon Crystals", "minerals"],
    "ZR": ["Zirconium", "elements"],
};
/* harmony export (immutable) */ __webpack_exports__["g"] = MaterialNames;

const Materials = {
    "Antenna Array": ["AAR", 0.78, 0.5],
    "Advanced Bulkhead": ["ABH", 0.6, 0.9],
    "Automated Cooling System": ["ACS", 0.3, 0.2],
    "Advanced Deck Elements": ["ADE", 0.4, 1.5],
    "Auto-Doc": ["ADR", 0.1, 0.1],
    "Audio Distribution System": ["ADS", 0.7, 2],
    "Aerostat Foundation": ["AEF", 2, 5],
    "Advanced STL Engine": ["AEN", 14, 7],
    "Advanced Fuel Pump": ["AFP", 1, 0.25],
    "Advanced Fuel Rod": ["AFR", 0.4, 0.1],
    "Advanced High-G Seats": ["AGS", 30, 5],
    "Advanced Hull Plate": ["AHP", 20, 10],
    "Air Scrubber": ["AIR", 1.7, 3],
    "Aluminium": ["AL", 2.7, 1],
    "Stellar Pale Ale": ["ALE", 0.1, 0.1],
    "Protein-Rich Algae": ["ALG", 0.7, 1],
    "Aluminium Ore": ["ALO", 1.35, 1],
    "Ammonia": ["AMM", 0.86, 1],
    "Advanced Nozzle": ["ANZ", 6, 3],
    "Advanced Thermal Protection Tile": ["APT", 0.03, 0.3],
    "Argon": ["AR", 1.784, 1],
    "Advanced Anti-rad Plate": ["ARP", 0.04, 0.2],
    "Advanced Structural Elements": ["ASE", 0.5, 0.6],
    "Alpha-Stabilized Titanium": ["AST", 4.98, 1],
    "Advanced Transparent Aperture": ["ATA", 0.3, 0.4],
    "Advanced Thermal Protection Material": ["ATP", 2.9, 1],
    "Gold": ["AU", 19.32, 1],
    "Gold Ore": ["AUO", 3.86, 1],
    "Active Water Filter": ["AWF", 0.8, 1.2],
    "Advanced Whipple Shielding": ["AWH", 0.12, 1],
    "Helpful Bacteria": ["BAC", 0.15, 0.15],
    "Basic AI Framework": ["BAI", 0.001, 0.01],
    "Basic Bulkhead": ["BBH", 0.5, 0.8],
    "Budget Connectors": ["BCO", 0.005, 0.002],
    "Basic Deck Elements": ["BDE", 0.1, 1.5],
    "Beryllium": ["BE", 1.84, 1],
    "Protein-Rich Beans": ["BEA", 0.8, 1],
    "Beryl Crystals": ["BER", 1.92, 1],
    "Basic Fuel Pump": ["BFP", 0.8, 0.2],
    "Basic Fuel Rod": ["BFR", 0.3, 0.1],
    "Shielded Connectors": ["BGC", 0.01, 0.002],
    "Blue Gold": ["BGO", 19.32, 1],
    "Basic High-G Seats": ["BGS", 20, 3],
    "Basic Hull Plate": ["BHP", 10, 10],
    "Full-Body Interaction Device": ["BID", 0.05, 0.05],
    "Breathable Liquid": ["BL", 1.12, 1],
    "Desaturation Agent": ["BLE", 0.5, 0.5],
    "Basic Mainframe": ["BMF", 0.8, 1.2],
    "Bandages": ["BND", 0.001, 0.005],
    "Boron Crystals": ["BOR", 1.8, 1],
    "Borosilicate": ["BOS", 1.5, 1],
    "Basic Thermal Protection Tile": ["BPT", 0.02, 0.3],
    "Command Bridge MK1": ["BR1", 180, 300],
    "Command Bridge MK2": ["BR2", 280, 400],
    "Bioreactive Minerals": ["BRM", 2.5, 1],
    "Bronze": ["BRO", 8.73, 1],
    "Basic Anti-rad Plate": ["BRP", 0.03, 0.2],
    "Short-distance Command Bridge": ["BRS", 150, 200],
    "Body Scanner": ["BSC", 0.1, 0.1],
    "Basic Structural Elements": ["BSE", 0.3, 0.5],
    "Basic Transparent Aperture": ["BTA", 0.3, 0.4],
    "Bacterial Tungsten Solution": ["BTS", 1.05, 1],
    "Basic Whipple Shielding": ["BWH", 0.1, 1],
    "Basic Workstation": ["BWS", 0.05, 0.1],
    "Carbon": ["C", 2.25, 1],
    "Calcium": ["CA", 1.54, 1],
    "Caffeinated Beans": ["CAF", 0.86, 1],
    "Electric Field Capacitor": ["CAP", 0.001, 0.001],
    "Large Capacitor Bank": ["CBL", 5.4, 2.4],
    "Medium Capacitor Bank": ["CBM", 3.6, 1.6],
    "Small Capacitor Bank": ["CBS", 1.8, 0.8],
    "Climate Controller": ["CC", 0.5, 1],
    "Crowd Control Drone": ["CCD", 0.3, 0.05],
    "Capacitive Display": ["CD", 0.004, 0.002],
    "Ceramic Fabric": ["CF", 2.82, 1],
    "Combustion Chamber": ["CHA", 1.2, 0.7],
    "Chlorine": ["CL", 3.2, 1],
    "Caliche Rock": ["CLI", 2.42, 1],
    "": ["CMK", 4.56, 33.2],
    "Caffeinated Infusion": ["COF", 0.1, 0.1],
    "Communication System": ["COM", 0.5, 1.5],
    "Cotton Fabric": ["COT", 0.77, 1],
    "Crew Quarters (Large)": ["CQL", 75, 150],
    "Crew Quarters (Medium)": ["CQM", 50, 100],
    "Crew Quarters (Small)": ["CQS", 25, 50],
    "Crew Quarters (Tiny)": ["CQT", 12.5, 25],
    "Cryogenic Unit": ["CRU", 2.2, 2],
    "Cryogenic Stabilizer": ["CST", 1.14, 1],
    "Ceramic-Tungsten Fabric": ["CTF", 4.32, 1],
    "Copper": ["CU", 8.92, 1],
    "Copper Ore": ["CUO", 4.01, 1],
    "Data Analyzer": ["DA", 0.001, 0.01],
    "Drone Chassis": ["DCH", 0.2, 0.03],
    "Durable Casing L": ["DCL", 0.08, 0.8],
    "Durable Casing M": ["DCM", 0.04, 0.4],
    "Durable Casing S": ["DCS", 0.01, 0.1],
    "Distributed Database": ["DD", 0.001, 0.01],
    "DDT Plant Agent": ["DDT", 0.11, 0.1],
    "Decorative Elements": ["DEC", 0.5, 2],
    "Information Display": ["DIS", 0.02, 0.02],
    "Drone Operations Unit": ["DOU", 5, 4],
    "Drone Frame": ["DRF", 0.1, 0.02],
    "Data Visualizer": ["DV", 0.001, 0.01],
    "Drinking Water": ["DW", 0.1, 0.1],
    "Entertainment Data Core": ["EDC", 0.001, 0.01],
    "Enriched Einsteinium": ["EES", 9.2, 1],
    "Standard STL Engine": ["ENG", 8, 4],
    "Epoxy Resin": ["EPO", 0.04, 0.02],
    "Einsteinium": ["ES", 0.88, 0.1],
    "Enriched Technetium": ["ETC", 4.1, 1],
    "Exoskeleton Work Suit": ["EXO", 0.1, 0.05],
    "Fluorine": ["F", 1.696, 1],
    "Ferrominium": ["FAL", 3.22, 1],
    "Active Cooling Device": ["FAN", 0.1, 0.1],
    "Flow Control Device": ["FC", 0.5, 0.25],
    "Iron": ["FE", 7.874, 1],
    "Iron Ore": ["FEO", 5.9, 1],
    "Ferro-Titanium": ["FET", 6.85, 1],
    "FTL Fuel": ["FF", 0.05, 0.01],
    "FTL Field Controller": ["FFC", 50, 16],
    "Flavoured Insta-Meal": ["FIM", 0.55, 0.5],
    "Fission Reactor": ["FIR", 7, 4.9],
    "Floating Tank": ["FLO", 1, 2],
    "Fluid Piping": ["FLP", 0.3, 2],
    "Flux": ["FLX", 0.25, 0.1],
    "All-Purpose Fodder": ["FOD", 1.2, 1],
    "Fuel-saving STL Engine": ["FSE", 6, 3],
    "Entertainment Unit": ["FUN", 5, 4],
    "Galerite Rock": ["GAL", 2.51, 1],
    "Cylindrical Gas Container": ["GC", 0.05, 0.1],
    "Glass Combustion Chamber": ["GCH", 1, 0.6],
    "Glass-based STL Engine": ["GEN", 5, 3],
    "Einsteinium-Infused Gin": ["GIN", 0.1, 0.1],
    "Glass": ["GL", 0.016, 0.01],
    "Glass Nozzle": ["GNZ", 1.5, 1],
    "Wine-Quality Grapes": ["GRA", 1.1, 1],
    "High-Carb Grains": ["GRN", 0.9, 1],
    "Gas Vent": ["GV", 0.25, 0.15],
    "Hydrogen": ["H", 0.07, 1],
    "Water": ["H2O", 0.2, 0.2],
    "Habitat Unit": ["HAB", 10, 8],
    "Halite Crystals": ["HAL", 2.17, 1],
    "High-Capacity Connectors": ["HCC", 0.01, 0.002],
    "Hydrocarbon Plants": ["HCP", 0.8, 1],
    "Holographic Display": ["HD", 0.05, 2],
    "Helium": ["HE", 0.145, 1],
    "Helium-3 Isotope": ["HE3", 0.145, 1],
    "Spicy Herbs": ["HER", 0.4, 1],
    "Heliotrope Extract": ["HEX", 1.1, 1],
    "Hardened Hull Plate": ["HHP", 15, 10],
    "HazMat Work Suit": ["HMS", 0.05, 0.05],
    "Hyperthrust Nozzle": ["HNZ", 6, 12],
    "Holographic Glasses": ["HOG", 0.01, 0.01],
    "Flowery Hops": ["HOP", 0.35, 1],
    "Handheld Personal Console": ["HPC", 0.003, 0.003],
    "High-power FTL Reactor": ["HPR", 18, 15],
    "Hardened Structural Elements": ["HSE", 3.1, 0.7],
    "Smart Space Suit": ["HSS", 0.05, 0.05],
    "Hyperthrust STL Engine": ["HTE", 20, 10],
    "Hyper-power Reactor": ["HYR", 35, 25],
    "Iodine": ["I", 4.93, 1],
    "Information Data Core": ["IDC", 0.001, 0.01],
    "Information Management System": ["IMM", 0.001, 0.01],
    "Indigo Colorant": ["IND", 0.21, 0.2],
    "InsuFoam": ["INS", 0.06, 0.1],
    "Sedative Substance": ["JUI", 1.2, 1],
    "Kombucha": ["KOM", 0.1, 0.1],
    "Kevlar Fabric": ["KV", 1.65, 1],
    "Lightweight Bulkhead": ["LBH", 0.2, 0.6],
    "AI-Assisted Lab Coat": ["LC", 0.05, 0.05],
    "Large Cargo Bay Kit": ["LCB", 200, 200],
    "Liquid Crystals": ["LCR", 0.15, 0.1],
    "Local Database": ["LD", 0.001, 0.01],
    "Lightweight Deck Elements": ["LDE", 0.1, 1.2],
    "Laser Diodes": ["LDI", 0.001, 0.001],
    "Liquid Einsteinium": ["LES", 8.84, 1],
    "Large FTL Emitter": ["LFE", 0.4, 1.6],
    "Large FTL Fuel Tank Kit": ["LFL", 60, 10],
    "Low-heat Fuel Pump": ["LFP", 0.5, 0.1],
    "Lightweight Hull Plate": ["LHP", 5, 10],
    "Lithium": ["LI", 0.55, 1],
    "Lithium Ore": ["LIO", 2.75, 1],
    "Life Support System": ["LIS", 5.6, 7],
    "Neon Lighting System": ["LIT", 1, 2],
    "Logistics System": ["LOG", 0.5, 1.5],
    "Lightweight Structural Elements": ["LSE", 0.3, 1.2],
    "Large STL Fuel Tank Kit": ["LSL", 125, 100],
    "Limestone": ["LST", 2.73, 1],
    "Lightweight Transparent Aperture": ["LTA", 0.3, 0.5],
    "Laboratory Unit": ["LU", 8, 6],
    "Magnetite": ["MAG", 5.15, 1],
    "High-Carb Maize": ["MAI", 1.3, 1],
    "Motherboard": ["MB", 0.075, 0.075],
    "Medium Cargo Bay Kit": ["MCB", 100, 100],
    "Mineral Construction Granulate": ["MCG", 0.24, 0.1],
    "Quality Meat Meal": ["MEA", 0.6, 0.5],
    "Basic Medical Kit": ["MED", 0.3, 0.1],
    "Medium FTL Emitter": ["MFE", 0.2, 0.8],
    "Medium Fastener Kit": ["MFK", 0.1, 0.05],
    "Medium FTL Fuel Tank Kit": ["MFL", 24, 4],
    "Magnesium": ["MG", 0.27, 0.16],
    "Magnetic Ground Cover": ["MGC", 0.6, 0.9],
    "Magnesite": ["MGS", 1.73, 1],
    "Metal-Halide Lighting System": ["MHL", 0.1, 0.05],
    "Micro Headphones": ["MHP", 0.001, 0.001],
    "Machine Learning Interface": ["MLI", 0.001, 0.01],
    "Micro-Processor": ["MPC", 0.001, 0.001],
    "Medium STL Fuel Tank Kit": ["MSL", 50, 50],
    "MegaTube Coating": ["MTC", 0.032, 0.01],
    "Meat Tissue Patties": ["MTP", 0.7, 1],
    "Protein-Rich Mushrooms": ["MUS", 0.8, 1],
    "Medium Wafer": ["MWF", 0.008, 0.008],
    "Nitrogen": ["N", 0.807, 1],
    "Sodium": ["NA", 0.97, 1],
    "Sodium Borohydride": ["NAB", 0.1, 0.05],
    "Nano-Carbon Sheeting": ["NCS", 0.028, 0.01],
    "Neon": ["NE", 0.9, 1],
    "Networking Framework": ["NF", 0.001, 0.01],
    "Nano Fiber": ["NFI", 0.032, 0.01],
    "Nano-Coated Glass": ["NG", 0.022, 0.01],
    "Nylon Fabric": ["NL", 1.13, 1],
    "Neural Network": ["NN", 0.001, 0.01],
    "Basic Nozzle": ["NOZ", 3, 1.5],
    "Nano-Enhanced Resin": ["NR", 0.05, 0.05],
    "Nutrient Solution": ["NS", 0.6, 0.5],
    "NeuroStimulants": ["NST", 0.05, 0.05],
    "Triglyceride Nuts": ["NUT", 0.9, 1],
    "Navigation Module MK1": ["NV1", 4.2, 2],
    "Navigation Module MK2": ["NV2", 6.7, 3],
    "Oxygen": ["O", 1.141, 1],
    "Office Supplies": ["OFF", 0.02, 0.2],
    "Olfactory Substances": ["OLF", 0.01, 0.001],
    "Operating System": ["OS", 0.001, 0.01],
    "Basic Overalls": ["OVE", 0.02, 0.025],
    "Printed Circuit Board": ["PCB", 0.05, 0.05],
    "Personal Data Assistant": ["PDA", 0.002, 0.002],
    "Poly-Ethylene": ["PE", 0.01, 0.01],
    "Premium Fertilizer": ["PFE", 0.9, 1],
    "Polymer Granulate": ["PG", 0.002, 0.001],
    "Pineberries": ["PIB", 0.3, 1],
    "Painkillers": ["PK", 0.001, 0.001],
    "Power Cell": ["POW", 0.05, 0.1],
    "Protein Paste": ["PPA", 2, 1],
    "Pressure Shielding": ["PSH", 4.2, 0.8],
    "Polymer Sheet Type L": ["PSL", 0.08, 0.8],
    "Polymer Sheet Type M": ["PSM", 0.04, 0.4],
    "Polymer Sheet Type S": ["PSS", 0.01, 0.1],
    "Power Tools": ["PT", 0.25, 0.2],
    "Padded Work Overall": ["PWO", 0.05, 0.05],
    "Quick-charge FTL Reactor": ["QCR", 14, 10],
    "Radio Device": ["RAD", 0.003, 0.005],
    "Radioisotope Generator": ["RAG", 5, 3.4],
    "Memory Bank": ["RAM", 0.001, 0.001],
    "Basic Rations": ["RAT", 0.21, 0.1],
    "Reinforced Bulkhead": ["RBH", 2.4, 0.9],
    "Raw Cotton Fiber": ["RCO", 0.95, 1],
    "Reactor Control System": ["RCS", 0.67, 0.5],
    "Standard FTL Reactor": ["RCT", 7, 4],
    "Reinforced Deck Elements": ["RDE", 1.4, 1.5],
    "Large Ship-Repair Drone Operations Unit": ["RDL", 150, 30],
    "Small Ship-Repair Drone Operations Unit": ["RDS", 50, 10],
    "Chemical Reagents": ["REA", 0.05, 0.05],
    "Rescue Drone": ["RED", 0.3, 0.05],
    "Repair Kit": ["REP", 0.006, 0.002],
    "Reinforced Glass": ["RG", 0.032, 0.01],
    "Red Gold": ["RGO", 19.32, 1],
    "Reinforced Hull Plate": ["RHP", 12, 10],
    "Non-Volatile Memory": ["ROM", 0.001, 0.001],
    "Reinforced Structural Elements": ["RSE", 1.9, 0.7],
    "Radiation Shielding": ["RSH", 3.7, 0.8],
    "Raw Silk Strains": ["RSI", 1.1, 1],
    "Reinforced Transparent Aperture": ["RTA", 1.5, 0.5],
    "Sulfur": ["S", 0.52, 0.25],
    "Search Algorithm": ["SA", 0.001, 0.01],
    "Sorting Algorithm": ["SAL", 0.001, 0.01],
    "Sensor Array": ["SAR", 1.7, 2],
    "Stem Cell Treatment": ["SC", 0.04, 0.01],
    "Small Cargo Bay Kit": ["SCB", 50, 50],
    "Multi-Purpose Scanner": ["SCN", 0.001, 0.001],
    "Sulfur Crystals": ["SCR", 2.05, 1],
    "Surgical Drone": ["SDR", 0.3, 0.05],
    "Poly-Sulfite Sealant": ["SEA", 0.15, 0.07],
    "Sensor": ["SEN", 0.001, 0.001],
    "Surgical Equipment": ["SEQ", 0.001, 0.01],
    "STL Fuel": ["SF", 0.06, 0.06],
    "Small FTL Emitter": ["SFE", 0.1, 0.4],
    "Small Fastener Kit": ["SFK", 0.04, 0.02],
    "Small FTL Fuel Tank Kit": ["SFL", 9, 1.5],
    "Silicon": ["SI", 2.329, 1],
    "Silken Fabric": ["SIL", 1.21, 1],
    "Silicon Ore": ["SIO", 1.79, 1],
    "Spatial Navigation Map": ["SNM", 0.001, 0.01],
    "Artificial Soil": ["SOI", 0.9, 1],
    "Solar Cell": ["SOL", 0.015, 0.01],
    "Solar Panel": ["SP", 0.15, 0.1],
    "Ship-Repair Drone": ["SRD", 0.3, 0.05],
    "Specialized Anti-rad Plate": ["SRP", 0.1, 0.2],
    "Structural Spacecraft Component": ["SSC", 1, 1],
    "Small STL Fuel Tank Kit": ["SSL", 20, 20],
    "Steel": ["STL", 7.85, 1],
    "Medical Stretcher": ["STR", 0.01, 1],
    "Stability Support System": ["STS", 0.1, 0.1],
    "Surgery Unit": ["SU", 6, 5],
    "Surveillance Drone": ["SUD", 0.3, 0.05],
    "Safety Uniform": ["SUN", 0.05, 0.05],
    "Small Wafer": ["SWF", 0.003, 0.003],
    "Tantalum": ["TA", 16.65, 1],
    "Targeting Computer": ["TAC", 0.15, 1],
    "Tantalite Rock": ["TAI", 7.94, 1],
    "Technetium": ["TC", 11.8, 1],
    "Tiny Cargo Bay Kit": ["TCB", 20, 20],
    "TCL Acid": ["TCL", 0.09, 0.1],
    "Technetium Oxide": ["TCO", 9.8, 1],
    "Stabilized Technetium": ["TCS", 3.4, 1.2],
    "Trauma Care Unit": ["TCU", 5, 4],
    "ThermoFluid": ["THF", 0.6, 0.35],
    "Basic Thermal Protection Material": ["THP", 2.2, 1],
    "Titanium": ["TI", 4.5, 1],
    "Titanium Ore": ["TIO", 1.58, 1],
    "TechnoKevlar Fabric": ["TK", 1.89, 1],
    "Tensor Processing Unit": ["TPU", 0.002, 0.002],
    "Audio Transmitter": ["TRA", 0.005, 0.002],
    "Advanced Transistor": ["TRN", 0.001, 0.001],
    "Truss": ["TRU", 0.1, 1.5],
    "Tectosilisite": ["TS", 2.4, 1],
    "Thermal Shielding": ["TSH", 2.4, 1.5],
    "Test Tubes": ["TUB", 0.002, 0.002],
    "Universal Toolset": ["UTS", 0.05, 0.05],
    "High-volume Cargo Bay Kit": ["VCB", 200, 200],
    "Triglyceride Fruits": ["VEG", 1.1, 1],
    "VitaGel": ["VG", 0.21, 0.1],
    "Vita Essence": ["VIT", 0.9, 1],
    "Very Small Cargo Bay Kit": ["VSC", 35, 35],
    "Tungsten": ["W", 7.519, 1],
    "Weak Artificial Intelligence": ["WAI", 0.001, 0.01],
    "Alpha-Stabilized Tungsten": ["WAL", 6.25, 1],
    "High-load Cargo Bay Kit": ["WCB", 200, 200],
    "Smart Zinfandel": ["WIN", 0.1, 0.1],
    "Window Manager": ["WM", 0.001, 0.01],
    "Handcraft Workshop Unit": ["WOR", 5, 5],
    "Water Reclaimer": ["WR", 6.4, 5],
    "Scientific Work Station": ["WS", 0.05, 0.5],
    "Zircon Crystals": ["ZIR", 4.85, 1],
    "Zirconium": ["ZR", 6.53, 1],
};
/* harmony export (immutable) */ __webpack_exports__["h"] = Materials;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = calculateFinancials;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class Finances {
    constructor(tile, parameters, pmmgSettings, userInfo, webData) {
        this.name = "FINANCES";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
        this.webData = webData;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (this.pmmgSettings["PMMGExtended"]["recording_financials"] == false) {
            const header = document.createElement("h3");
            header.textContent = "You are not recording daily financial data, would you like to enable recording?";
            header.style.textAlign = "center";
            header.style.width = "100%";
            this.tile.appendChild(header);
            const checkboxDiv = document.createElement("div");
            checkboxDiv.style.alignItems = "center";
            checkboxDiv.style.display = "flex";
            checkboxDiv.style.justifyContent = "center";
            checkboxDiv.style.paddingBottom = "5px";
            this.tile.appendChild(checkboxDiv);
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.style.display = "inline-block";
            checkboxDiv.appendChild(checkbox);
            const label = document.createElement("div");
            label.textContent = "Enable Recording (Refresh needed to take effect)";
            label.style.display = "inline-block";
            label.style.marginTop = "2px";
            checkboxDiv.appendChild(label);
            const explainDiv = document.createElement("div");
            explainDiv.style.padding = "5px";
            this.tile.appendChild(explainDiv);
            explainDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("PMMG can record your finances (using FIO data) to provide a more accurate estimate than the in-game FIN screen. The data is pulled at most every 24 hours and is stored locally like your other settings. You can access all the information from the XIT FIN buffer."));
            const pmmgSettings = this.pmmgSettings;
            checkbox.addEventListener("click", function () {
                pmmgSettings["PMMGExtended"]["recording_financials"] = checkbox.checked;
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            });
            return;
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Finance", chooseScreen, [this.tile, this.parameters, this.pmmgSettings, this.webData, this.userInfo, this]);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Finances;

function chooseScreen(finResult, params) {
    finResult = finResult["PMMG-Finance"];
    if (!params[0] || !params[1] || !params[2] || !params[3]) {
        return;
    }
    const tile = params[0];
    const parameters = params[1];
    const pmmgSettings = params[2];
    const webData = params[3];
    const userInfo = params[4];
    const finObj = params[5];
    var CX = "AI1";
    var priceType = "Average";
    if (pmmgSettings["PMMGExtended"]["pricing_scheme"]) {
        const interpreted = interpretCX(pmmgSettings["PMMGExtended"]["pricing_scheme"], pmmgSettings);
        CX = interpreted[0];
        priceType = interpreted[1];
    }
    if (!userInfo["PMMG-User-Info"] || !userInfo["PMMG-User-Info"]["cx_prices"]) {
        return;
    }
    const cxPrices = userInfo["PMMG-User-Info"]["cx_prices"][CX][priceType];
    const weights = { "PIO": 0.7435, "SET": 0.1954, "TEC": 0.0444, "ENG": 0.0132, "SCI": 0.0035 };
    var priceBasket = 0;
    Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */]).forEach(workforce => {
        var tierCost = 0;
        Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */][workforce]).forEach(mat => {
            tierCost += averageCX(userInfo["PMMG-User-Info"]["cx_prices"], mat) * __WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */][workforce][mat];
        });
        priceBasket += tierCost * weights[workforce];
    });
    priceBasket /= 2030.55;
    var currency = "";
    switch (CX) {
        case "AI1":
            currency = __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */].AIC;
            break;
        case "CI1":
        case "CI2":
            currency = __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */].CIS;
            break;
        case "NC1":
        case "NC2":
            currency = __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */].NCC;
            break;
        case "IC1":
            currency = __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */].ICA;
            break;
    }
    if (parameters[1] && (parameters[1].toLowerCase() == "settings" || parameters[1].toLowerCase() == "set")) {
        const pricingHeader = document.createElement('h3');
        pricingHeader.appendChild(document.createTextNode("Pricing Scheme"));
        pricingHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Select a pricing scheme to calculate financials.", "right"));
        pricingHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(pricingHeader);
        const priceDiv = document.createElement("div");
        tile.appendChild(priceDiv);
        const priceLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Pricing Scheme:");
        priceLabel.style.marginBottom = "4px";
        priceDiv.appendChild(priceLabel);
        const priceSelect = document.createElement("select");
        priceSelect.name = "price-select";
        priceSelect.id = "price-select";
        Object.keys(PricingSchemes).forEach(name => {
            priceSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])(name, name));
        });
        Object.keys(CustomSchemes).forEach(name => {
            priceSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])(name, name));
        });
        if (!pmmgSettings["PMMGExtended"]["pricing_scheme"] || (!PricingSchemes[pmmgSettings["PMMGExtended"]["pricing_scheme"]] && !CustomSchemes[pmmgSettings["PMMGExtended"]["pricing_scheme"]])) {
            priceSelect.children[0].selected = true;
        }
        else if (PricingSchemes[pmmgSettings["PMMGExtended"]["pricing_scheme"]]) {
            priceSelect.children[PricingSchemes[pmmgSettings["PMMGExtended"]["pricing_scheme"]]].selected = true;
        }
        else {
            priceSelect.children[CustomSchemes[pmmgSettings["PMMGExtended"]["pricing_scheme"]]].selected = true;
        }
        priceSelect.classList.add("select");
        priceSelect.style.marginLeft = "4px";
        const spreadsheetDiv = document.createElement("div");
        if (pmmgSettings["PMMGExtended"]["pricing_scheme"] != "Custom (Spreadsheet)") {
            spreadsheetDiv.style.display = "none";
        }
        priceSelect.addEventListener("change", function () {
            pmmgSettings["PMMGExtended"]["pricing_scheme"] = priceSelect.selectedOptions[0].value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            switch (priceSelect.selectedOptions[0].value) {
                case "Custom (Spreadsheet)":
                    spreadsheetDiv.style.display = "block";
                    break;
                default:
                    spreadsheetDiv.style.display = "none";
            }
        });
        priceDiv.appendChild(priceSelect);
        tile.appendChild(spreadsheetDiv);
        const backupDiv = document.createElement("div");
        backupDiv.style.marginTop = "8px";
        const backupPriceLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Back Up Pricing Scheme:");
        backupPriceLabel.style.marginBottom = "4px";
        backupDiv.appendChild(backupPriceLabel);
        spreadsheetDiv.appendChild(backupDiv);
        const backupPriceSelect = document.createElement("select");
        backupDiv.appendChild(backupPriceSelect);
        backupPriceSelect.name = "backup-price-select";
        backupPriceSelect.id = "backup-price-select";
        Object.keys(PricingSchemes).forEach(name => {
            backupPriceSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])(name, name));
        });
        if (!pmmgSettings["PMMGExtended"]["backup_pricing_scheme"] || !PricingSchemes[pmmgSettings["PMMGExtended"]["backup_pricing_scheme"]]) {
            backupPriceSelect.children[0].selected = true;
        }
        else {
            backupPriceSelect.children[PricingSchemes[pmmgSettings["PMMGExtended"]["backup_pricing_scheme"]]].selected = true;
        }
        backupPriceSelect.classList.add("select");
        backupPriceSelect.style.marginLeft = "4px";
        backupPriceSelect.addEventListener("change", function () {
            pmmgSettings["PMMGExtended"]["backup_pricing_scheme"] = backupPriceSelect.selectedOptions[0].value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const urlDiv = document.createElement("div");
        spreadsheetDiv.appendChild(urlDiv);
        const urlLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Spreadsheet URL:");
        urlDiv.appendChild(urlLabel);
        const urlInput = document.createElement("input");
        urlInput.classList.add("input-text");
        urlDiv.appendChild(urlInput);
        urlInput.style.marginLeft = "4px";
        if (pmmgSettings["PMMGExtended"]["fin_spreadsheet"]) {
            urlInput.value = pmmgSettings["PMMGExtended"]["fin_spreadsheet"];
        }
        urlInput.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["fin_spreadsheet"] = urlInput.value == "" ? undefined : urlInput.value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const sheetDiv = document.createElement("div");
        spreadsheetDiv.appendChild(sheetDiv);
        const sheetLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Sheet Name:");
        sheetLabel.style.marginBottom = "4px";
        sheetDiv.appendChild(sheetLabel);
        const sheetInput = document.createElement("input");
        sheetDiv.appendChild(sheetInput);
        sheetInput.classList.add("input-text");
        sheetInput.style.marginLeft = "4px";
        if (pmmgSettings["PMMGExtended"]["fin_sheet_name"]) {
            sheetInput.value = pmmgSettings["PMMGExtended"]["fin_sheet_name"];
        }
        sheetInput.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["fin_sheet_name"] = sheetInput.value == "" ? undefined : sheetInput.value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const resultDiv = document.createElement("div");
        spreadsheetDiv.appendChild(resultDiv);
        if (pmmgSettings["PMMGExtended"]["fin_spreadsheet"] && pmmgSettings["PMMGExtended"]["fin_sheet_name"]) {
            const sheetID = pmmgSettings["PMMGExtended"]["fin_spreadsheet"].match(/\/d\/([^\/]+)/);
            if (sheetID && sheetID[1]) {
                drawGSTable(resultDiv, webData["custom_prices"]);
            }
        }
        const importHeader = document.createElement('h3');
        importHeader.appendChild(document.createTextNode("Import/Export Data"));
        importHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Import or export financial data to a json file.", "right"));
        importHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(importHeader);
        const importDiv = document.createElement("div");
        tile.appendChild(importDiv);
        const importButton = document.createElement("button");
        importButton.textContent = "Import Finances";
        importButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        importButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        importButton.style.marginLeft = "4px";
        importButton.style.marginBottom = "4px";
        importDiv.appendChild(importButton);
        const importFile = document.createElement("input");
        importFile.type = "file";
        importFile.accept = ".json";
        importFile.style.display = "none";
        importDiv.appendChild(importFile);
        const errorTextBox = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Error Loading File!");
        errorTextBox.style.display = "none";
        importDiv.appendChild(errorTextBox);
        importButton.addEventListener("click", function () {
            importFile.click();
            return;
        });
        importFile.addEventListener("change", function () {
            if (!this.files) {
                return;
            }
            const file = this.files[0];
            if (!file) {
                return;
            }
            const reader = new FileReader();
            reader.onload = function (e) {
                if (!e || !e.target) {
                    return;
                }
                try {
                    const fileOutput = JSON.parse(e.target.result);
                    finResult = {};
                    Object.keys(fileOutput).forEach(key => {
                        finResult[key] = fileOutput[key];
                        return;
                    });
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])({ "PMMG-Finance": finResult });
                    errorTextBox.style.display = "none";
                }
                catch (ex) {
                    console.log("PMMG: Error encountered processing file!");
                    errorTextBox.style.display = "inline-block";
                }
            };
            reader.readAsText(file);
        });
        const exportButton = document.createElement("button");
        exportButton.textContent = "Export Finances";
        exportButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        exportButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        exportButton.style.marginLeft = "4px";
        exportButton.style.marginBottom = "4px";
        importDiv.appendChild(exportButton);
        exportButton.addEventListener("click", function () {
            const output = {};
            Object.keys(finResult).forEach(key => {
                output[key] = finResult[key];
            });
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */])(output, "pmmg-finance" + Date.now().toString() + ".json");
        });
        const collectHeader = document.createElement('h3');
        collectHeader.appendChild(document.createTextNode("Collect Data"));
        collectHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Manually collects a data point.", "right"));
        collectHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(collectHeader);
        const addButton = document.createElement("button");
        addButton.textContent = "Record Data";
        addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        addButton.style.marginLeft = "4px";
        addButton.style.marginBottom = "4px";
        tile.appendChild(addButton);
        addButton.addEventListener("click", function () {
            calculateFinancials(webData, userInfo, pmmgSettings, true);
            finObj.create_buffer();
        });
        const purgeHeader = document.createElement('h3');
        purgeHeader.appendChild(document.createTextNode("Purge Specific Data Points"));
        purgeHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Purge individual data points from storage.", "right"));
        purgeHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(purgeHeader);
        const tbody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(tile, ["Date", "Equity", "Delete"]);
        for (var i = 0; i < finResult["History"].length; i++) {
            const row = document.createElement("tr");
            tbody.appendChild(row);
            const dateColumn = document.createElement("td");
            dateColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])((new Date(finResult["History"][i][0])).toLocaleTimeString(undefined, { hour: "2-digit", minute: "2-digit" }) + " on " + (new Date(finResult["History"][i][0])).toLocaleDateString(undefined, { month: "2-digit", day: "2-digit" })));
            row.appendChild(dateColumn);
            const equityColumn = document.createElement("td");
            const equity = finResult["History"][i][1] + finResult["History"][i][2] + finResult["History"][i][3] - finResult["History"][i][4];
            equityColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(equity.toLocaleString(undefined, { maximumFractionDigits: 0 })));
            row.appendChild(equityColumn);
            const deleteColumn = document.createElement("td");
            deleteColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["q" /* createSmallButton */])("delete", function (index) {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["O" /* showWarningDialog */])(tile, "Are you sure you want to delete this datapoint?", "Confirm", function () {
                    finResult["History"].splice(index, 1);
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])({ "PMMG-Finance": finResult });
                    finObj.create_buffer();
                });
            }, [i]));
            row.appendChild(deleteColumn);
        }
        const clearHeader = document.createElement('h3');
        clearHeader.appendChild(document.createTextNode("Clear All Data"));
        clearHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Clear all current and historical financial data.", "right"));
        clearHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(clearHeader);
        const clearButton = document.createElement("button");
        clearButton.textContent = "Clear Data";
        clearButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        clearButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        clearButton.style.marginLeft = "4px";
        clearButton.style.marginBottom = "4px";
        tile.appendChild(clearButton);
        clearButton.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["O" /* showWarningDialog */])(tile, "You are about to clear all current and historical financial data. Do you want to continue?", "Confirm", clearData, pmmgSettings);
        });
        return;
    }
    if (!finResult || Object.keys(finResult).length == 0) {
        const header = document.createElement("h3");
        header.textContent = "No data has been recorded yet. Wait a few seconds then refresh the page. If this persists, contact PiBoy314.";
        header.style.textAlign = "center";
        header.style.width = "100%";
        tile.appendChild(header);
        return;
    }
    const locations = {};
    finResult["Buildings"].forEach(inv => {
        if (locations[inv[0]]) {
            locations[inv[0]][0] += inv[1];
            locations[inv[0]][2] += inv[1];
        }
        else {
            locations[inv[0]] = [inv[1], 0, inv[1]];
        }
    });
    finResult["Inventory"].forEach(inv => {
        if (locations[inv[0]]) {
            locations[inv[0]][1] += inv[1];
            locations[inv[0]][2] += inv[1];
        }
        else {
            locations[inv[0]] = [0, inv[1], inv[1]];
        }
    });
    const locationsArray = [];
    Object.keys(locations).forEach(inv => {
        locationsArray.push([inv, locations[inv][0], locations[inv][1], locations[inv][2]]);
    });
    locationsArray.sort(financialSort);
    if (!parameters[1]) {
        const quickHeader = document.createElement('h3');
        quickHeader.appendChild(document.createTextNode("Quick Links"));
        quickHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(quickHeader);
        const quickDiv = document.createElement("div");
        quickDiv.style.marginLeft = "5px";
        tile.appendChild(quickDiv);
        const quickButtons = [["SUMMARY", "SUMMARY"], ["PRODUCTION", "PRODUCTION"], ["CHARTS", "CHART"], ["SETTINGS", "SETTINGS"]];
        quickButtons.forEach(label => {
            const button = document.createElement("button");
            button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
            button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
            button.style.marginBottom = "5px";
            button.textContent = label[0];
            quickDiv.appendChild(button);
            button.addEventListener("click", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT FIN_" + label[1]);
            });
        });
        const chartsHeader = document.createElement('h3');
        chartsHeader.appendChild(document.createTextNode("Individual Charts"));
        chartsHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(chartsHeader);
        const chartsDiv = document.createElement("div");
        chartsDiv.style.marginLeft = "5px";
        tile.appendChild(chartsDiv);
        const chartButtons = [["EQUITY HISTORY", "HISTORY"], ["ASSETS BY TYPE", "ASSETPIE"], ["ASSETS BY LOCATION", "LOCATIONSPIE"]];
        chartButtons.forEach(label => {
            const button = document.createElement("button");
            button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
            button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
            button.style.marginBottom = "5px";
            button.textContent = label[0];
            chartsDiv.appendChild(button);
            button.addEventListener("click", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT FIN_CHART_" + label[1]);
            });
        });
        const infoHeader = document.createElement('h3');
        infoHeader.appendChild(document.createTextNode("Data Info"));
        infoHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(infoHeader);
        const infoDiv = document.createElement("div");
        tile.appendChild(infoDiv);
        infoDiv.style.margin = "5px";
        const dataPoints = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])((finResult["History"] ? finResult["History"].length : 0).toLocaleString() + " data points recorded");
        infoDiv.appendChild(dataPoints);
        dataPoints.style.display = "block";
        if (finResult["History"]) {
            const oldestDate = new Date(finResult["History"][0][0]);
            const oldestDateElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Oldest data recorded on " + oldestDate.toLocaleDateString(undefined, { month: "2-digit", day: "2-digit", year: "numeric" }));
            infoDiv.appendChild(oldestDateElem);
            oldestDateElem.style.marginTop = "5px";
            oldestDateElem.style.display = "block";
            const newestDate = new Date(finResult["History"][finResult["History"].length - 1][0]);
            const newestDateElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Latest data recorded at " + newestDate.toLocaleTimeString(undefined, { hour: "2-digit", minute: "2-digit" }) + " on " + newestDate.toLocaleDateString(undefined, { month: "2-digit", day: "2-digit", year: "numeric" }));
            infoDiv.appendChild(newestDateElem);
            newestDateElem.style.marginTop = "5px";
            newestDateElem.style.display = "block";
        }
    }
    else if (parameters[1].toLowerCase() == "summary" || parameters[1].toLowerCase() == "sum") {
        const lastReading = finResult["History"][finResult["History"].length - 1];
        const lastEquity = lastReading[1] + lastReading[2] + lastReading[3] - lastReading[4];
        const tileHeader = document.createElement("h2");
        tileHeader.title = "Financial Overview";
        tileHeader.textContent = "Key Figures";
        tileHeader.classList.add("fin-title");
        tile.appendChild(tileHeader);
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + Math.round(lastReading[1]).toLocaleString(), "Fixed Assets", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + Math.round(lastReading[2]).toLocaleString(), "Current Assets", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + Math.round(lastReading[3]).toLocaleString(), "Liquid Assets", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + Math.round(lastEquity).toLocaleString(), "Equity", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + Math.round(lastReading[4]).toLocaleString(), "Liabilities", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        for (var i = finResult["History"].length - 1; i >= 0; i--) {
            if (lastReading[0] - finResult["History"][i][0] > 86400000 * 7) {
                break;
            }
        }
        i++;
        const prevEquity = finResult["History"][i][1] + finResult["History"][i][2] + finResult["History"][i][3] - finResult["History"][i][4];
        const profit = Math.round(lastEquity - prevEquity);
        const color = profit > 0 ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success : __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + profit.toLocaleString(), "Profit", color));
        const breakdownHeader = document.createElement("h2");
        breakdownHeader.title = "Financial Breakdown";
        breakdownHeader.textContent = "Inventory Breakdown";
        breakdownHeader.classList.add("fin-title");
        tile.appendChild(breakdownHeader);
        const tbody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(tile, ["Name", "Fixed Assets", "Current Assets", "Total Assets"]);
        locationsArray.forEach(inv => {
            const row = document.createElement("tr");
            tbody.appendChild(row);
            const firstTableElem = document.createElement("td");
            row.appendChild(firstTableElem);
            firstTableElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(inv[0]));
            inv.shift();
            for (let point of inv) {
                const tableElem = document.createElement("td");
                row.appendChild(tableElem);
                tableElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(point.toLocaleString(undefined, { maximumFractionDigits: 0 })));
            }
        });
    }
    else if (parameters[1].toLowerCase() == "chart" || parameters[1].toLowerCase() == "charts") {
        if (parameters[2]) {
            const graphDiv = document.createElement("div");
            graphDiv.style.margin = "5px";
            tile.appendChild(graphDiv);
            const graph = generateGraph(parameters[2], finResult, locationsArray, currency);
            if (!graph) {
                graphDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Error! Not a valid graph type!"));
                return;
            }
            graphDiv.appendChild(graph);
            return;
        }
        if (finResult["History"].length == 0) {
            return;
        }
        const lineHeader = document.createElement('h3');
        lineHeader.appendChild(document.createTextNode("Equity History"));
        lineHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(lineHeader);
        const historyDiv = document.createElement("div");
        historyDiv.style.margin = "5px";
        historyDiv.style.marginTop = "10px";
        tile.appendChild(historyDiv);
        const linePlot = generateGraph("history", finResult, locationsArray, currency);
        if (!linePlot) {
            return;
        }
        linePlot.style.cursor = "pointer";
        linePlot.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT FIN_CHART_HISTORY");
        });
        historyDiv.appendChild(linePlot);
        const pieHeader = document.createElement('h3');
        pieHeader.appendChild(document.createTextNode("Asset Breakdown"));
        pieHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(pieHeader);
        const pieDiv = document.createElement("div");
        pieDiv.style.margin = "5px";
        tile.appendChild(pieDiv);
        const pieCanvas = generateGraph("assetpie", finResult, locationsArray, currency);
        if (!pieCanvas) {
            return;
        }
        pieCanvas.style.cursor = "pointer";
        pieCanvas.style.marginRight = "-25px";
        pieCanvas.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT FIN_CHART_ASSETPIE");
        });
        pieDiv.appendChild(pieCanvas);
        const locPieCanvas = generateGraph("locationspie", finResult, locationsArray, currency);
        if (!locPieCanvas) {
            return;
        }
        locPieCanvas.style.cursor = "pointer";
        locPieCanvas.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT FIN_CHART_LOCATIONSPIE");
        });
        pieDiv.appendChild(locPieCanvas);
    }
    else if (parameters[1].toLowerCase() == "production" || parameters[1].toLowerCase() == "prod") {
        if (!userInfo["PMMG-User-Info"] || !userInfo["PMMG-User-Info"]["workforce"]) {
            tile.id = "pmmg-reload";
            return;
        }
        else {
            tile.textContent = "";
            tile.id = "pmmg-load-success";
        }
        const planets = [];
        userInfo["PMMG-User-Info"]["workforce"].forEach(workforce => {
            if (workforce.PlanetName && !planets.includes(workforce.PlanetName)) {
                planets.push(workforce.PlanetName);
            }
        });
        userInfo["PMMG-User-Info"]["production"].forEach(production => {
            if (production.PlanetName && !planets.includes(production.PlanetName)) {
                planets.push(production.PlanetName);
            }
        });
        const burnFinances = [];
        var totalProduced = 0;
        var totalConsumed = 0;
        planets.forEach(planet => {
            const planetProduction = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planet, userInfo["PMMG-User-Info"]["production"]);
            const planetWorkforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planet, userInfo["PMMG-User-Info"]["workforce"]);
            const planetFinances = [];
            planetFinances.push(planet);
            var produced = 0;
            var consumed = 0;
            if (planetWorkforce) {
                planetWorkforce.workforce.forEach(tier => {
                    tier.needs.forEach(need => {
                        consumed += getPrice(cxPrices, webData["custom_prices"], pmmgSettings["PMMGExtended"]["pricing_scheme"], need.material.ticker, userInfo, priceBasket) * need.unitsPerInterval;
                    });
                });
            }
            var isRecurring = false;
            if (planetProduction && planetProduction.lines) {
                planetProduction.lines.forEach(line => {
                    line.orders.forEach(order => { if (order.recurring) {
                        isRecurring = true;
                    } });
                });
                planetProduction.lines.forEach(line => {
                    var totalDuration = 0;
                    line.orders.forEach(order => {
                        if (!order.started && (!isRecurring || order.recurring)) {
                            totalDuration += order.duration || Infinity;
                        }
                    });
                    line.orders.forEach(order => {
                        if (!order.started && (!isRecurring || order.recurring)) {
                            order.inputs.forEach(mat => {
                                consumed += getPrice(cxPrices, webData["custom_prices"], pmmgSettings["PMMGExtended"]["pricing_scheme"], mat.MaterialTicker, userInfo, priceBasket) * mat.Amount * 86400000 * line.capacity / totalDuration;
                            });
                            order.outputs.forEach(mat => {
                                produced += getPrice(cxPrices, webData["custom_prices"], pmmgSettings["PMMGExtended"]["pricing_scheme"], mat.MaterialTicker, userInfo, priceBasket) * mat.Amount * 86400000 * line.capacity / totalDuration;
                            });
                        }
                    });
                });
            }
            planetFinances.push(produced);
            planetFinances.push(consumed);
            totalProduced += produced;
            totalConsumed += consumed;
            burnFinances.push(planetFinances);
        });
        const tileHeader = document.createElement("h2");
        tileHeader.title = "Production Overview";
        tileHeader.textContent = "Production Overview";
        tileHeader.classList.add("fin-title");
        tile.appendChild(tileHeader);
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + totalProduced.toLocaleString(undefined, { "maximumFractionDigits": 0 }), "Daily Produced", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + totalConsumed.toLocaleString(undefined, { "maximumFractionDigits": 0 }), "Daily Consumed", __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Standard));
        tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["j" /* createFinancialTextBox */])(currency + (totalProduced - totalConsumed).toLocaleString(undefined, { "maximumFractionDigits": 0 }), "Daily Profit", (totalProduced - totalConsumed) > 0 ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success : __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure));
        const planetHeader = document.createElement("h2");
        planetHeader.title = "Planet Breakdown";
        planetHeader.textContent = "Planet Breakdown";
        planetHeader.classList.add("fin-title");
        tile.appendChild(planetHeader);
        const tbody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(tile, ["Name", "Produced", "Consumed", "Profit"]);
        burnFinances.sort(burnProductionSort);
        burnFinances.forEach(inv => {
            if (inv[1] == 0 && inv[2] == 0) {
                return;
            }
            const row = document.createElement("tr");
            tbody.appendChild(row);
            const firstTableElem = document.createElement("td");
            row.appendChild(firstTableElem);
            firstTableElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(inv[0]));
            const producedElem = document.createElement("td");
            row.appendChild(producedElem);
            producedElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(inv[1].toLocaleString(undefined, { maximumFractionDigits: 0 })));
            const consumedElem = document.createElement("td");
            row.appendChild(consumedElem);
            consumedElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(inv[2].toLocaleString(undefined, { maximumFractionDigits: 0 })));
            const profitElem = document.createElement("td");
            row.appendChild(profitElem);
            profitElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])((inv[1] - inv[2]).toLocaleString(undefined, { maximumFractionDigits: 0 })));
            profitElem.style.color = inv[1] - inv[2] > 0 ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success : __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
        });
    }
}
function averageCX(prices, ticker) {
    const CXs = ["AI1", "NC1", "IC1", "CI1"];
    var cxCount = 0;
    var price = 0;
    CXs.forEach(cx => {
        if (prices[cx]["Average"][ticker]) {
            cxCount++;
            price += prices[cx]["Average"][ticker];
        }
    });
    return cxCount == 0 ? 0 : price / cxCount;
}
function drawGSTable(resultDiv, prices) {
    if (!prices) {
        resultDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Error! No Prices Found!"));
    }
    const tbody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(resultDiv, ["Ticker", "Price"]);
    Object.keys(prices).forEach(mat => {
        const row = document.createElement("tr");
        const matElem = document.createElement("td");
        row.appendChild(matElem);
        matElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(mat));
        const priceElem = document.createElement("td");
        row.appendChild(priceElem);
        priceElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(prices[mat].toLocaleString(undefined, { "maximumFractionDigits": 2, "minimumFractionDigits": 2 })));
        tbody.appendChild(row);
    });
}
function generateGraph(graphType, finResult, locationsArray, currency) {
    switch (graphType.toLowerCase()) {
        case "history":
            const dateData = [];
            const finData = [];
            finResult["History"].forEach(entry => {
                if (entry[1] + entry[2] + entry[3] - entry[4] == 0) {
                    return;
                }
                dateData.push(entry[0]);
                finData.push(entry[1] + entry[2] + entry[3] - entry[4]);
            });
            const linePlot = Object(__WEBPACK_IMPORTED_MODULE_0__util__["w" /* drawLineChart */])(dateData, finData, 400, 200, "Date", "Equity", "#f7a600", true, currency);
            return linePlot;
        case "assetpie":
            const latestReport = finResult["History"][finResult["History"].length - 1];
            const pieCanvas = Object(__WEBPACK_IMPORTED_MODULE_0__util__["x" /* drawPieChart */])([latestReport[1], latestReport[2], latestReport[3]], 180, ["Fixed", "Current", "Liquid"]);
            return pieCanvas;
        case "locationspie":
            const locationNames = [];
            const locationValue = [];
            locationsArray.forEach(location => {
                locationNames.push(location[0]);
                locationValue.push(location[1] + location[2] + location[3]);
            });
            const locPieCanvas = Object(__WEBPACK_IMPORTED_MODULE_0__util__["x" /* drawPieChart */])(locationValue, 180, locationNames);
            return locPieCanvas;
    }
    return null;
}
function clearData(result) {
    if (result["PMMGExtended"]) {
        result["PMMGExtended"]["last_fin_recording"] = undefined;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
    }
    try {
        browser.storage.local.remove("PMMG-Finance");
    }
    catch (err) {
        chrome.storage.local.remove("PMMG-Finance");
    }
    return;
}
function getPrice(cxPrices, customPrices, priceScheme, ticker, userInfo, priceBasket) {
    if (priceScheme == "Custom (Spreadsheet)" && customPrices && customPrices[ticker]) {
        return customPrices[ticker];
    }
    else if (priceScheme == "Price Basket") {
        return averageCX(userInfo["PMMG-User-Info"]["cx_prices"], ticker) / priceBasket;
    }
    return cxPrices[ticker] || 0;
}
const PricingSchemes = {
    "AI1 AVG": 0,
    "AI1 ASK": 1,
    "AI1 BID": 2,
    "CI1 AVG": 3,
    "CI1 ASK": 4,
    "CI1 BID": 5,
    "CI2 AVG": 6,
    "CI2 ASK": 7,
    "CI2 BID": 8,
    "IC1 AVG": 9,
    "IC1 ASK": 10,
    "IC1 BID": 11,
    "NC1 AVG": 12,
    "NC1 ASK": 13,
    "NC1 BID": 14,
    "NC2 AVG": 15,
    "NC2 ASK": 16,
    "NC2 BID": 17
};
const CustomSchemes = {
    "Custom (Spreadsheet)": 18
};
function calculateFinancials(webData, userInfo, result, loop) {
    if (loop) {
        if (userInfo["PMMG-User-Info"] && userInfo["PMMG-User-Info"]["cx_prices"]) {
            window.setTimeout(() => calculateFinancials(webData, userInfo, result, false), 100);
            return;
        }
        else {
            window.setTimeout(() => calculateFinancials(webData, userInfo, result, true), 50);
            return;
        }
    }
    result["PMMGExtended"]["last_fin_recording"] = Date.now();
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
    var CX = "AI1";
    var priceType = "Average";
    if (result["PMMGExtended"]["pricing_scheme"]) {
        const interpreted = interpretCX(result["PMMGExtended"]["pricing_scheme"], result);
        CX = interpreted[0];
        priceType = interpreted[1];
    }
    const cxPrices = userInfo["PMMG-User-Info"]["cx_prices"][CX][priceType];
    const weights = { "PIO": 0.7435, "SET": 0.1954, "TEC": 0.0444, "ENG": 0.0132, "SCI": 0.0035 };
    var priceBasket = 0;
    Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */]).forEach(workforce => {
        var tierCost = 0;
        Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */][workforce]).forEach(mat => {
            tierCost += averageCX(userInfo["PMMG-User-Info"]["cx_prices"], mat) * __WEBPACK_IMPORTED_MODULE_2__GameProperties__["a" /* Consumption */][workforce][mat];
        });
        priceBasket += tierCost * weights[workforce];
    });
    priceBasket /= 2030.55;
    const finSnapshot = {};
    finSnapshot["Currencies"] = [];
    if (userInfo["PMMG-User-Info"]["currency"]) {
        userInfo["PMMG-User-Info"]["currency"].forEach(currency => {
            finSnapshot["Currencies"].push([currency["currency"], Math.round(currency["amount"] * 100) / 100]);
        });
    }
    finSnapshot["Inventory"] = [];
    finSnapshot["Buildings"] = [];
    if (userInfo["PMMG-User-Info"]["storage"]) {
        userInfo["PMMG-User-Info"]["storage"].forEach(location => {
            var value = 0;
            location["items"].forEach(mat => {
                value += getPrice(cxPrices, webData["custom_prices"], result["PMMGExtended"]["pricing_scheme"], mat.MaterialTicker, userInfo, priceBasket) * mat.Amount;
            });
            var name;
            if (location.type == "STORE" || location.type == "WAREHOUSE_STORE") {
                name = location.PlanetName;
            }
            else {
                name = location.name;
            }
            if (value == 0) {
                return;
            }
            var isMatch = false;
            finSnapshot["Inventory"].forEach(inv => {
                if (inv[0] == name) {
                    isMatch = true;
                    inv[1] += Math.round(value * 100) / 100;
                }
            });
            if (!isMatch) {
                finSnapshot["Inventory"].push([name, Math.round(value * 100) / 100]);
            }
            return;
        });
    }
    if (userInfo["PMMG-User-Info"]["sites"]) {
        userInfo["PMMG-User-Info"]["sites"].forEach(location => {
            if (location.type != "BASE") {
                return;
            }
            var value = 0;
            location["buildings"].forEach(building => {
                building["reclaimableMaterials"].forEach(mat => {
                    value += getPrice(cxPrices, webData["custom_prices"], result["PMMGExtended"]["pricing_scheme"], mat.material.ticker, userInfo, priceBasket) * mat.amount;
                });
            });
            if (value == 0) {
                return;
            }
            finSnapshot["Buildings"].push([location.PlanetName, Math.round(value * 100) / 100]);
        });
    }
    var contractValue = 0;
    var contractLiability = 0;
    if (userInfo["PMMG-User-Info"]["contracts"]) {
        let validContracts = userInfo["PMMG-User-Info"]["contracts"].filter(c => !invalidContractStatus.includes(c["status"]));
        validContracts.forEach(contract => {
            const party = contract["party"];
            contract["conditions"].forEach(condition => {
                if (condition["status"] == "FULFILLED") {
                    return;
                }
                if (condition["type"] == "DELIVERY" || condition["type"] == "PROVISION") {
                    if (condition["party"] == party) {
                        contractLiability += getPrice(cxPrices, webData["custom_prices"], result["PMMGExtended"]["pricing_scheme"], condition.quantity.material.ticker, userInfo, priceBasket) * condition.quantity.amount;
                    }
                    else {
                        contractValue += getPrice(cxPrices, webData["custom_prices"], result["PMMGExtended"]["pricing_scheme"], condition.quantity.material.ticker, userInfo, priceBasket) * condition.quantity.amount;
                    }
                }
                else if (condition["type"] == "PAYMENT") {
                    if (condition["party"] == party) {
                        contractLiability += condition.amount.amount;
                    }
                    else {
                        contractValue += condition.amount.amount;
                    }
                }
                else if (condition["type"] == "LOAN_INSTALLMENT") {
                    if (condition["party"] == party) {
                        contractLiability += condition.interest.amount + condition.repayment.amount;
                    }
                    else {
                        contractValue += condition.interest.amount + condition.repayment.amount;
                    }
                }
                else if (condition["type"] == "LOAN_PAYOUT") {
                    if (condition["party"] == party) {
                        contractLiability += condition.amount.amount;
                    }
                    else {
                        contractValue += condition.amount.amount;
                    }
                }
            });
        });
        finSnapshot["ContractValue"] = Math.round(contractValue * 100) / 100;
        finSnapshot["ContractLiability"] = Math.round(contractLiability * 100) / 100;
    }
    var cxBuyValue = 0;
    var cxSellValue = 0;
    if (userInfo["PMMG-User-Info"]["cxos"]) {
        userInfo["PMMG-User-Info"]["cxos"].forEach(order => {
            if (order["status"] == "FILLED") {
                return;
            }
            if (order["type"] == "SELLING") {
                cxSellValue += getPrice(cxPrices, webData["custom_prices"], result["PMMGExtended"]["pricing_scheme"], order.material.ticker, userInfo, priceBasket) * order.amount;
            }
            else {
                cxBuyValue += order.limit.amount * order.amount;
            }
        });
    }
    var fxBuyValue = 0;
    var fxSellValue = 0;
    if (userInfo["PMMG-User-Info"]["fxos"]) {
        userInfo["PMMG-User-Info"]["fxos"].forEach(order => {
            if (order["status"] == "FILLED") {
                return;
            }
            if (order["type"] == "SELLING") {
                fxSellValue += order.initialAmount.amount;
            }
            else {
                fxBuyValue += order.limit.rate * order.initialAmount.amount;
            }
        });
    }
    finSnapshot["CXBuy"] = Math.round(cxBuyValue * 100) / 100;
    finSnapshot["CXSell"] = Math.round(cxSellValue * 100) / 100;
    finSnapshot["FXBuy"] = Math.round(fxBuyValue * 100) / 100;
    finSnapshot["FXSell"] = Math.round(fxSellValue * 100) / 100;
    var liquid = 0;
    finSnapshot["Currencies"].forEach(currency => {
        liquid += currency[1];
    });
    liquid += cxBuyValue + fxBuyValue + fxSellValue;
    var fixed = 0;
    finSnapshot["Buildings"].forEach(inv => {
        fixed += inv[1];
    });
    var current = cxSellValue + contractValue;
    finSnapshot["Inventory"].forEach(inv => {
        current += inv[1];
    });
    var liabilities = contractLiability;
    finSnapshot["History"] = [Date.now(), Math.round(fixed * 100) / 100, Math.round(current * 100) / 100, Math.round(liquid * 100) / 100, Math.round(liabilities * 100) / 100];
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Finance", writeFinancials, finSnapshot);
}
function writeFinancials(result, finSnapshot) {
    var history = [];
    if (result["PMMG-Finance"] && result["PMMG-Finance"]["History"]) {
        history = result["PMMG-Finance"]["History"];
    }
    history.push(finSnapshot["History"]);
    finSnapshot["History"] = history;
    result["PMMG-Finance"] = finSnapshot;
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
}
const invalidContractStatus = [
    "FULFILLED",
    "BREACHED",
    "TERMINATED",
    "CANCELLED",
    "REJECTED"
];
function financialSort(a, b) {
    return a[3] < b[3] ? 1 : -1;
}
function burnProductionSort(a, b) {
    return a[1] - a[2] < b[1] - b[2] ? 1 : -1;
}
function interpretCX(CXString, result) {
    var CX = "AI1";
    var priceType = "Average";
    switch (CXString) {
        case "Price Basket":
            break;
        case "Custom (Spreadsheet)":
            if (result["PMMGExtended"]["backup_pricing_scheme"]) {
                const data = interpretCX(result["PMMGExtended"]["backup_pricing_scheme"], result);
                CX = data[0];
                priceType = data[1];
            }
            break;
        default:
            const info = CXString.split(" ");
            CX = info[0];
            switch (info[1]) {
                case "AVG":
                    priceType = "Average";
                    break;
                case "ASK":
                    priceType = "AskPrice";
                    break;
                case "BID":
                    priceType = "BidPrice";
                    break;
            }
    }
    return [CX, priceType];
}


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlightETAs__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LocalMarketAds__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ModuleRunner__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OrderETAs__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ConsumableTimers__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__FleetETAs__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__PostLM__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ShippingAds__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__QueueLoad__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Notifications__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__BackgroundRunner__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__ScreenUnpack__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__Sidebar__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__CommandCorrecter__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__CalculatorButton__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__ImageCreator__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__InventoryOrganizer__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__HeaderMinimizer__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__PendingContracts__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__CompactUI__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__XIT_Finances__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__FormulaEvaluator__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__AdvancedMode__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__CXOBHighlighter__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__CXPOOrderBook__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__ChatDeleteButton__ = __webpack_require__(47);



























function AddScriptToDOM(script_name) {
    var browser = typeof browser === "undefined" ? chrome : browser;
    var s = document.createElement('script');
    s.src = browser.runtime.getURL(script_name);
    s.onload = function () {
        s.remove();
    };
    (document.head || document.documentElement).appendChild(s);
}
AddScriptToDOM("page_script.js");
try {
    browser.storage.local.get("PMMGExtended").then(mainRun, onError);
    console.log("FireFox detected");
}
catch (ex) {
    console.log("Chromium detected");
    chrome.storage.local.get(["PMMGExtended"], function (result) {
        mainRun(result, "chromium");
    });
}
function mainRun(result, browser) {
    if (!result["PMMGExtended"]) {
        result["PMMGExtended"] = {};
    }
    if (!result["PMMGExtended"]["loaded_before"]) {
        console.log("First Time Loading PMMG");
    }
    const style = document.createElement("style");
    style.type = "text/css";
    style.id = "pmmg-style";
    style.textContent = __WEBPACK_IMPORTED_MODULE_11__Style__["g" /* PMMGStyle */];
    const doc = document.querySelector("html");
    if (doc) {
        doc.appendChild(style);
    }
    if (!result["PMMGExtended"]["disabled"]) {
        result["PMMGExtended"]["disabled"] = ["ScreenUnpack"];
    }
    if (result["PMMGExtended"]["color_scheme"] == "enhanced" || !result["PMMGExtended"]["color_scheme"]) {
        const colors = document.createElement("style");
        colors.type = "text/css";
        colors.id = "pmmg-enhanced-colors";
        colors.textContent = __WEBPACK_IMPORTED_MODULE_11__Style__["e" /* EnhancedColors */];
        if (doc) {
            doc.appendChild(colors);
        }
    }
    else if (result["PMMGExtended"]["color_scheme"] == "icons") {
        const colors = document.createElement("style");
        colors.type = "text/css";
        colors.id = "pmmg-icon-colors";
        colors.textContent = __WEBPACK_IMPORTED_MODULE_11__Style__["f" /* IconStyle */];
        if (doc) {
            doc.appendChild(colors);
        }
    }
    if (result["PMMGExtended"]["advanced_mode"] && doc) {
        const advancedStyle = document.createElement("style");
        advancedStyle.type = "text/css";
        advancedStyle.id = "pmmg-advanced";
        advancedStyle.textContent = __WEBPACK_IMPORTED_MODULE_11__Style__["a" /* AdvancedStyle */];
        doc.appendChild(advancedStyle);
    }
    if (result["PMMGExtended"]["chat_delete_hidden"]) {
        const chatDelete = document.createElement("style");
        chatDelete.type = "text/css";
        chatDelete.id = "pmmg-chat-delete-style";
        chatDelete.textContent = __WEBPACK_IMPORTED_MODULE_11__Style__["c" /* ChatDeleteStyle */];
        if (doc) {
            doc.appendChild(chatDelete);
        }
    }
    const userInfo = {};
    const webData = {};
    window.setTimeout(() => Object(__WEBPACK_IMPORTED_MODULE_10__BackgroundRunner__["b" /* getPrices */])(webData, result["PMMGExtended"]["fin_spreadsheet"], result["PMMGExtended"]["fin_sheet_name"]), 1000);
    window.setTimeout(() => Object(__WEBPACK_IMPORTED_MODULE_10__BackgroundRunner__["a" /* getCXPrices */])(userInfo), 1000);
    if (result["PMMGExtended"]["recording_financials"] != false && (!result["PMMGExtended"]["last_fin_recording"] || Date.now() - result["PMMGExtended"]["last_fin_recording"] > 64800000)) {
        window.setTimeout(() => Object(__WEBPACK_IMPORTED_MODULE_21__XIT_Finances__["b" /* calculateFinancials */])(webData, userInfo, result, true), 1000);
    }
    const runner = new __WEBPACK_IMPORTED_MODULE_2__ModuleRunner__["a" /* ModuleRunner */]([
        new __WEBPACK_IMPORTED_MODULE_7__ShippingAds__["a" /* ShippingAds */](),
        new __WEBPACK_IMPORTED_MODULE_1__LocalMarketAds__["a" /* LocalMarketAds */](),
        new __WEBPACK_IMPORTED_MODULE_6__PostLM__["a" /* PostLM */](webData),
        new __WEBPACK_IMPORTED_MODULE_3__OrderETAs__["a" /* OrderETAs */](),
        new __WEBPACK_IMPORTED_MODULE_0__FlightETAs__["a" /* FlightETAs */](),
        new __WEBPACK_IMPORTED_MODULE_5__FleetETAs__["a" /* FleetETAs */](),
        new __WEBPACK_IMPORTED_MODULE_8__QueueLoad__["a" /* QueueLoad */](),
        new __WEBPACK_IMPORTED_MODULE_4__ConsumableTimers__["a" /* ConsumableTimers */](result["PMMGExtended"]["burn_thresholds"], userInfo),
        new __WEBPACK_IMPORTED_MODULE_17__InventoryOrganizer__["a" /* InventoryOrganizer */](userInfo, result),
        new __WEBPACK_IMPORTED_MODULE_9__Notifications__["a" /* Notifications */](),
        new __WEBPACK_IMPORTED_MODULE_16__ImageCreator__["a" /* ImageCreator */](),
        new __WEBPACK_IMPORTED_MODULE_12__ScreenUnpack__["a" /* ScreenUnpack */](result["PMMGExtended"]["unpack_exceptions"]),
        new __WEBPACK_IMPORTED_MODULE_18__HeaderMinimizer__["a" /* HeaderMinimizer */](result["PMMGExtended"]["minimize_by_default"]),
        new __WEBPACK_IMPORTED_MODULE_23__AdvancedMode__["a" /* AdvancedMode */](result["PMMGExtended"]["advanced_mode"]),
        new __WEBPACK_IMPORTED_MODULE_14__CommandCorrecter__["a" /* CommandCorrecter */](),
        new __WEBPACK_IMPORTED_MODULE_15__CalculatorButton__["a" /* CalculatorButton */](),
        new __WEBPACK_IMPORTED_MODULE_13__Sidebar__["a" /* Sidebar */](result["PMMGExtended"]["sidebar"]),
        new __WEBPACK_IMPORTED_MODULE_19__PendingContracts__["a" /* PendingContracts */](userInfo),
        new __WEBPACK_IMPORTED_MODULE_20__CompactUI__["a" /* CompactUI */](result),
        new __WEBPACK_IMPORTED_MODULE_22__FormulaEvaluator__["a" /* FormulaReplacer */](),
        new __WEBPACK_IMPORTED_MODULE_24__CXOBHighlighter__["a" /* CXOBHighlighter */](userInfo),
        new __WEBPACK_IMPORTED_MODULE_25__CXPOOrderBook__["a" /* CXPOOrderBook */](userInfo),
        new __WEBPACK_IMPORTED_MODULE_26__ChatDeleteButton__["a" /* ChatDeleteButton */](result)
    ], result, webData, userInfo, browser);
    (function () {
        runner.loop();
        runner.loopUserInfo();
    })();
}
function onError(err) {
    console.log(err);
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class FlightETAs {
    constructor() {
        this.tag = "pb-sfc-eta";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["z" /* genericCleanup */])(this.tag);
    }
    run(allBuffers) {
        const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("SFC ", allBuffers);
        if (buffers == undefined)
            return;
        buffers.forEach(buffer => {
            const elements = Array.from(buffer.querySelectorAll("table > tbody > tr"));
            var currentTime = 0;
            for (var i = 1; i < elements.length; i++) {
                const targetRow = elements[i];
                const etaData = targetRow.children[3];
                if (etaData.textContent != "") {
                    const duration = Object(__WEBPACK_IMPORTED_MODULE_0__util__["I" /* parseDuration */])(etaData.textContent);
                    const eta = Object(__WEBPACK_IMPORTED_MODULE_0__util__["h" /* convertDurationToETA */])(duration + currentTime);
                    etaData.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(` (${eta})`, this.tag));
                    currentTime += duration;
                }
            }
            const firstRow = elements[0];
            if (!firstRow) {
                return;
            }
            const firstEtaData = firstRow.children[3];
            if (!firstEtaData) {
                return;
            }
            if (firstEtaData.textContent != "") {
                const totalEta = Object(__WEBPACK_IMPORTED_MODULE_0__util__["h" /* convertDurationToETA */])(currentTime);
                firstEtaData.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(` (${totalEta})`, this.tag));
            }
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FlightETAs;



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class LocalMarketAds {
    constructor() {
        this.tag = "pb-lm-ads";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_1__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        const elements = document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].LMCommodityAdText);
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            const text = element.textContent;
            const matches = text && text.match(/(BUYING|SELLING|CORP)\s(\d+)\s.*\s@\s([\d,.]+)\s[A-Z]+\sfor/);
            if (matches && matches.length > 3) {
                const count = parseInt(matches[2]);
                const totalCents = parseInt(matches[3].replace(/[,.]/g, ''));
                var priceSpan;
                Array.from(element.childNodes).forEach(node => {
                    if (node.nodeValue && node.nodeValue.slice(1) in __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */]) {
                        priceSpan = node;
                    }
                });
                const perItem = (totalCents / count / 100).toLocaleString(undefined, { maximumFractionDigits: 2 });
                if (!priceSpan) {
                    return;
                }
                priceSpan.after(Object(__WEBPACK_IMPORTED_MODULE_1__util__["t" /* createTextSpan */])(` (${perItem} ea)`, this.tag));
            }
        }
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LocalMarketAds;



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XITHandler__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Selector__ = __webpack_require__(1);




class ModuleRunner {
    constructor(modules, result, webData, userInfo, browser) {
        this.modules = modules.map(m => this.moduleToME(m));
        this.xit = new __WEBPACK_IMPORTED_MODULE_0__XITHandler__["a" /* XITHandler */](result, userInfo, webData, this.modules, browser);
        this.result = result;
        this.userInfo = userInfo;
        this.updateActiveModules(result);
    }
    updateActiveModules(result) {
        if (result["PMMGExtended"]["disabled"] == undefined) {
            return;
        }
        this.modules.forEach(mp => {
            if (result["PMMGExtended"]["disabled"] && result["PMMGExtended"]["disabled"].includes(mp.name)) {
                mp.enabled = false;
            }
        });
    }
    moduleToME(module) {
        return {
            module,
            name: module.constructor.name,
            friendlyName: __WEBPACK_IMPORTED_MODULE_2__GameProperties__["f" /* FriendlyNames */][module.constructor.name] || module.constructor.name,
            enabled: true,
            count: 0,
            cleanupTime: 0,
            runTime: 0
        };
    }
    loop() {
        const bufferDivs = Object(__WEBPACK_IMPORTED_MODULE_1__util__["A" /* getBuffers */])("");
        const buffers = [];
        bufferDivs.forEach(buffer => {
            const header = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_3__Selector__["a" /* Selector */].BufferHeader);
            if (!header) {
                return;
            }
            const parameters = header.textContent;
            buffers.push([parameters, buffer]);
        });
        this.xit.run(buffers);
        if (!this.result["PMMGExtended"]["loaded_before"]) {
            this.result["PMMGExtended"]["loaded_before"] = Object(__WEBPACK_IMPORTED_MODULE_1__util__["N" /* showBuffer */])("XIT START");
            if (this.result["PMMGExtended"]["loaded_before"]) {
                Object(__WEBPACK_IMPORTED_MODULE_1__util__["M" /* setSettings */])(this.result);
            }
        }
        this.modules.map(entry => {
            if (entry.enabled) {
                const t0 = performance.now();
                entry.module.cleanup();
                const cleanupTime = performance.now() - t0;
                const t1 = performance.now();
                entry.module.run(buffers);
                const runTime = performance.now() - t1;
                entry.count++;
                entry.cleanupTime += cleanupTime;
                entry.runTime += runTime;
            }
        });
        window.setTimeout(() => this.loop(), 250);
    }
    loopUserInfo() {
        Object(__WEBPACK_IMPORTED_MODULE_1__util__["D" /* getLocalStorage */])("PMMG-User-Info", updateUserInfo, this.userInfo);
        window.setTimeout(() => this.loopUserInfo(), 500);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ModuleRunner;

function updateUserInfo(result, userInfo) {
    userInfo["PMMG-User-Info"] = result["PMMG-User-Info"] || {};
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__XIT_Inventory__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__XIT_Chat__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__XIT_Calculator__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__XIT_DataHealth__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__XIT_Burn__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__XIT_Contracts__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__XIT_CommandLists__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__XIT_Debug__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__XIT_Finances__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__XIT_Help__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__XIT_Repairs__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__XIT_Settings__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__XIT_Sort__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__XIT_Start__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__XIT_Web__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__XIT_Checklists__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__XIT_Notes__ = __webpack_require__(25);



















class XITModule {
}
/* unused harmony export XITModule */

const XITClasses = {
    "INV": __WEBPACK_IMPORTED_MODULE_2__XIT_Inventory__["a" /* FIOInventory */],
    "CALCULATOR": __WEBPACK_IMPORTED_MODULE_4__XIT_Calculator__["a" /* Calculator */],
    "CALC": __WEBPACK_IMPORTED_MODULE_4__XIT_Calculator__["a" /* Calculator */],
    "CHAT": __WEBPACK_IMPORTED_MODULE_3__XIT_Chat__["a" /* FIOChat */],
    "HEALTH": __WEBPACK_IMPORTED_MODULE_5__XIT_DataHealth__["a" /* DataHealth */],
    "BURN": __WEBPACK_IMPORTED_MODULE_6__XIT_Burn__["a" /* Burn */],
    "CONTS": __WEBPACK_IMPORTED_MODULE_7__XIT_Contracts__["a" /* Contracts */],
    "CONTRACTS": __WEBPACK_IMPORTED_MODULE_7__XIT_Contracts__["a" /* Contracts */],
    "LIST": __WEBPACK_IMPORTED_MODULE_8__XIT_CommandLists__["a" /* CommandLists */],
    "LISTS": __WEBPACK_IMPORTED_MODULE_8__XIT_CommandLists__["a" /* CommandLists */],
    "DEBUG": __WEBPACK_IMPORTED_MODULE_9__XIT_Debug__["a" /* Debug */],
    "FIN": __WEBPACK_IMPORTED_MODULE_10__XIT_Finances__["a" /* Finances */],
    "FINANCE": __WEBPACK_IMPORTED_MODULE_10__XIT_Finances__["a" /* Finances */],
    "FINANCES": __WEBPACK_IMPORTED_MODULE_10__XIT_Finances__["a" /* Finances */],
    "HELP": __WEBPACK_IMPORTED_MODULE_11__XIT_Help__["a" /* Help */],
    "REPAIRS": __WEBPACK_IMPORTED_MODULE_12__XIT_Repairs__["a" /* Repairs */],
    "SET": __WEBPACK_IMPORTED_MODULE_13__XIT_Settings__["a" /* Settings */],
    "SETTINGS": __WEBPACK_IMPORTED_MODULE_13__XIT_Settings__["a" /* Settings */],
    "SORT": __WEBPACK_IMPORTED_MODULE_14__XIT_Sort__["a" /* Sort */],
    "START": __WEBPACK_IMPORTED_MODULE_15__XIT_Start__["a" /* Start */],
    "PRUN": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["b" /* PrUN */],
    "PROSPERITY": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["c" /* Prosperity */],
    "SHEET": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["e" /* Sheets */],
    "SHEETS": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["e" /* Sheets */],
    "WIKI": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["f" /* Wiki */],
    "PLANNER": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["d" /* PrunPlanner */],
    "PLAN": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["d" /* PrunPlanner */],
    "PRUNPLANNER": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["d" /* PrunPlanner */],
    "FIO": __WEBPACK_IMPORTED_MODULE_16__XIT_Web__["a" /* FIO */],
    "CHECK": __WEBPACK_IMPORTED_MODULE_17__XIT_Checklists__["a" /* Checklists */],
    "CHECKLIST": __WEBPACK_IMPORTED_MODULE_17__XIT_Checklists__["a" /* Checklists */],
    "CHECKLISTS": __WEBPACK_IMPORTED_MODULE_17__XIT_Checklists__["a" /* Checklists */],
    "NOTE": __WEBPACK_IMPORTED_MODULE_18__XIT_Notes__["a" /* Notes */],
    "NOTES": __WEBPACK_IMPORTED_MODULE_18__XIT_Notes__["a" /* Notes */]
};
class XITHandler {
    constructor(pmmgSettings, userInfo, webData, modules, browser) {
        this.tag = "pb-xit";
        this.userInfo = userInfo;
        this.webData = webData;
        this.modules = modules;
        this.pmmgSettings = pmmgSettings;
        this.browser = browser;
    }
    cleanup() {
    }
    run(buffers) {
        const matchingBuffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("XIT", buffers);
        if (!matchingBuffers)
            return;
        matchingBuffers.forEach(buffer => {
            const tile = (buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].XITTile));
            if (!tile) {
                return;
            }
            if (tile.firstChild && (tile.firstChild.id == "pmmg-load-success" || tile.firstChild.id == "pmmg-no-match")) {
                return;
            }
            const header = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferHeader);
            if (!header) {
                return;
            }
            const parametersRaw = header.textContent;
            if (!parametersRaw)
                return;
            var parameters = [];
            if (parametersRaw.charAt(4) == "1") {
                const keyValues = parametersRaw.slice(4).split(" ");
                keyValues.forEach(key => {
                    parameters.push(key.slice(2));
                    return;
                });
            }
            else {
                parameters = parametersRaw.slice(4).split("_");
            }
            if (!parameters)
                return;
            for (var i = 0; i < parameters.length; i++) {
                parameters[i] = parameters[i].trim();
            }
            tile.classList.add("xit-tile");
            if (tile.firstChild) {
                tile.firstChild.style.backgroundColor = "#222222";
            }
            const refreshButton = document.createElement("div");
            if (!tile.firstChild || (tile.firstChild && (tile.firstChild.id != "pmmg-no-match"))) {
                if (buffer.getElementsByClassName("refresh").length == 0) {
                    refreshButton.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("⟳"));
                    refreshButton.classList.add("button-upper-right");
                    refreshButton.classList.add(this.tag);
                    refreshButton.style.fontSize = "16px";
                    refreshButton.style.paddingTop = this.browser == "chromium" ? "12px" : "7px";
                    refreshButton.classList.add("refresh");
                    (buffer.children[3] || buffer.children[2]).insertBefore(refreshButton, (buffer.children[3] || buffer.children[2]).firstChild);
                }
            }
            const contentDiv = document.createElement("div");
            contentDiv.style.height = "100%";
            contentDiv.style.flexGrow = "1";
            tile.appendChild(contentDiv);
            if (!XITClasses[parameters[0].toUpperCase()]) {
                tile.textContent = "Error! No Matching Function!";
                if (!tile.firstChild) {
                    return;
                }
                tile.firstChild.id = "pmmg-no-match";
            }
            else {
                tile.firstChild.id = "pmmg-load-success";
                const XITObj = new XITClasses[parameters[0].toUpperCase()](contentDiv, parameters, this.pmmgSettings, this.userInfo, this.webData, this.modules);
                refreshButton.addEventListener("click", function () { XITObj.create_buffer(); });
                buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferTitle).textContent = XITObj.name;
                XITObj.create_buffer();
            }
            return;
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = XITHandler;



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameProperties__ = __webpack_require__(3);


class FIOInventory {
    constructor(tile, parameters, pmmgSettings) {
        this.name = "FIO INVENTORY";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const apikey = this.pmmgSettings["PMMGExtended"]["apikey"];
        if (this.parameters.length < 2) {
            this.tile.textContent = "Error! Not Enough Parameters!";
            return;
        }
        if (this.parameters.length == 2) {
            this.parameters.push(apikey);
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* XITWebRequest */])(this.tile, this.parameters, FIOInv_getAllStorages, "https://rest.fnar.net/auth/group/" + this.parameters[1], "GET", ["Authorization", apikey], undefined);
        }
        else {
            for (var i = 3; i < this.parameters.length; i++) {
                this.parameters[2] += " " + this.parameters[i];
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* XITWebRequest */])(this.tile, this.parameters, FIOInv_post, "https://rest.fnar.net/storage/" + this.parameters[1] + "/" + this.parameters[2], "GET", ["Authorization", apikey], undefined);
        }
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FIOInventory;

function FIOInv_post(tile, parameters, jsondata) {
    const tag = "FIO";
    if (jsondata == undefined || jsondata == null) {
        return;
    }
    var inventoryData;
    try {
        inventoryData = JSON.parse(jsondata);
    }
    catch (SyntaxError) {
        tile.textContent = "Error! Could Not Load Data!";
        return;
    }
    if (!inventoryData) {
        return;
    }
    const volumeUsed = inventoryData["VolumeLoad"];
    const volumeTotal = inventoryData["VolumeCapacity"];
    const weightUsed = inventoryData["WeightLoad"];
    const weightTotal = inventoryData["WeightCapacity"];
    const header = document.createElement("div");
    header.classList.add("inv-header");
    header.id = "header";
    header.classList.add(tag);
    tile.appendChild(header);
    const body = document.createElement("div");
    tile.appendChild(body);
    body.classList.add(tag);
    body.classList.add("inv-body");
    body.id = "body";
    header.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(parameters[2], tag));
    header.appendChild(document.createElement("br"));
    const userElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(parameters[1], tag);
    userElem.style.paddingLeft = "8px";
    header.appendChild(userElem);
    const volumeLine = document.createElement("div");
    volumeLine.id = "volume-line";
    volumeLine.style.padding = "2px 8px";
    volumeLine.style.color = "#999999";
    volumeLine.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Volume ", tag));
    const volumeBar = document.createElement("progress");
    volumeBar.id = "volume-bar";
    volumeBar.classList.add(tag);
    volumeBar.classList.add("progress-bar");
    volumeBar.max = 1;
    volumeBar.value = volumeUsed / volumeTotal;
    volumeLine.appendChild(volumeBar);
    volumeLine.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(volumeUsed.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) + " / " + volumeTotal.toLocaleString(undefined, { maximumFractionDigits: 0, minimumFractionDigits: 0 }) + " m³", tag));
    header.appendChild(volumeLine);
    const weightLine = document.createElement("div");
    weightLine.id = "weight-line";
    weightLine.style.padding = "2px 8px";
    weightLine.style.color = "#999999";
    weightLine.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Weight ", tag));
    const weightBar = document.createElement("progress");
    weightBar.id = "weight-bar";
    weightBar.classList.add(tag);
    weightBar.classList.add("progress-bar");
    weightBar.max = 1;
    weightBar.value = weightUsed / weightTotal;
    weightLine.appendChild(weightBar);
    weightLine.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(weightUsed.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) + " / " + weightTotal.toLocaleString(undefined, { maximumFractionDigits: 0, minimumFractionDigits: 0 }) + " t", tag));
    header.appendChild(weightLine);
    inventoryData["StorageItems"].sort(fioMatsAlphabetSort);
    for (let item of inventoryData["StorageItems"]) {
        const mat = Object(__WEBPACK_IMPORTED_MODULE_0__util__["l" /* createMaterialElement */])(item["MaterialTicker"], tag, item["MaterialAmount"], true);
        if (mat) {
            body.appendChild(mat);
        }
    }
    return;
}
function FIOInv_getAllStorages(tile, parameters, jsondata) {
    var userJSON;
    try {
        userJSON = JSON.parse(jsondata);
    }
    catch (SyntaxError) {
        tile.textContent = "Error! Bad Data from FIO!";
    }
    var usernames = [];
    userJSON["GroupUsers"].forEach(user => {
        usernames.push(user["GroupUserName"]);
        return;
    });
    parameters.push(userJSON["GroupName"]);
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* XITWebRequest */])(tile, parameters, FIOInv_allDisplay, "https://rest.fnar.net/fioweb/grouphub", "POST", ["Authorization", parameters[2]], JSON.stringify(usernames));
    return;
}
function FIOInv_allDisplay(tile, parameters, jsondata) {
    var groupData = [];
    try {
        groupData = JSON.parse(jsondata);
    }
    catch (SyntaxError) {
        tile.textContent = "Error! Bad Data from FIO!";
    }
    const titleDiv = document.createElement("div");
    titleDiv.classList.add("title");
    titleDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(parameters[3] + " Inventories"));
    tile.appendChild(titleDiv);
    const bodyDiv = document.createElement("div");
    tile.appendChild(bodyDiv);
    bodyDiv.classList.add("flex-table");
    if (groupData["PlayerModels"] == undefined) {
        tile.textContent = "Error! Bad Data!";
        return;
    }
    groupData["PlayerModels"].forEach(player => {
        if (player["Locations"].length == 0) {
            return;
        }
        const playerDiv = document.createElement("div");
        playerDiv.classList.add("list");
        playerDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(player["UserName"]));
        playerDiv.firstChild.style.fontWeight = "bold";
        player["Locations"].forEach(location => {
            playerDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(location["LocationName"], "XIT INV_" + player["UserName"] + "_" + location["LocationName"].replace(/ /, "_")));
            return;
        });
        bodyDiv.appendChild(playerDiv);
        return;
    });
    parameters.pop();
    parameters.pop();
    return;
}
function fioMatsAlphabetSort(a, b) {
    if (!a["MaterialTicker"] || !b["MaterialTicker"] || !__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][a["MaterialTicker"]] || !__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][b["MaterialTicker"]]) {
        return 0;
    }
    if (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][a["MaterialTicker"]][1] == __WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][b["MaterialTicker"]][1]) {
        return a["MaterialTicker"].localeCompare(b["MaterialTicker"]);
    }
    return __WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][a["MaterialTicker"]][1].localeCompare(__WEBPACK_IMPORTED_MODULE_1__GameProperties__["g" /* MaterialNames */][b["MaterialTicker"]][1]);
}


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class FIOChat {
    constructor(tile, parameters) {
        this.name = "FIO Chat";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (this.parameters.length < 2) {
            this.tile.textContent = "Error! Not Enough Parameters!";
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* XITWebRequest */])(this.tile, this.parameters, Chat_post, "https://rest.fnar.net/chat/display/" + this.parameters[1], "GET", undefined, undefined);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FIOChat;

function Chat_post(chatDiv, parameters, jsondata) {
    if (jsondata == undefined || jsondata == null) {
        return;
    }
    var chatData;
    try {
        chatData = JSON.parse(jsondata);
    }
    catch (SyntaxError) {
        chatDiv.textContent = "Error! Could Not Load Data!";
        return;
    }
    const titleDiv = document.createElement("div");
    titleDiv.textContent = parameters[1] + " Global Site Owners";
    titleDiv.classList.add("title");
    chatDiv.appendChild(titleDiv);
    chatData.forEach(chat => {
        const chatLine = document.createElement("div");
        chatLine.classList.add("chat-line");
        chatDiv.appendChild(chatLine);
        const timeDateDiv = document.createElement("div");
        const dateDiv = document.createElement("div");
        timeDateDiv.appendChild(dateDiv);
        dateDiv.textContent = (new Date(chat["MessageTimestamp"])).toLocaleDateString(undefined, { month: "2-digit", day: "2-digit" });
        dateDiv.classList.add("time-date");
        const timeDiv = document.createElement("div");
        timeDateDiv.appendChild(timeDiv);
        timeDiv.textContent = (new Date(chat["MessageTimestamp"])).toLocaleTimeString(undefined, { hour: "2-digit", minute: "2-digit" });
        timeDiv.classList.add("time-date");
        timeDiv.style.color = "#999999";
        chatLine.appendChild(timeDateDiv);
        const nameDiv = document.createElement("div");
        chatLine.appendChild(nameDiv);
        nameDiv.classList.add("chat-name");
        const messageDiv = document.createElement("div");
        chatLine.appendChild(messageDiv);
        messageDiv.classList.add("chat-message");
        switch (chat["MessageType"]) {
            case "CHAT":
                nameDiv.textContent = chat["UserName"];
                messageDiv.textContent = chat["MessageText"];
                break;
            case "JOINED":
                messageDiv.textContent = chat["UserName"] + " joined.";
                messageDiv.style.fontStyle = "italic";
                break;
            case "LEFT":
                messageDiv.textContent = chat["UserName"] + " left.";
                messageDiv.style.fontStyle = "italic";
                break;
        }
        return;
    });
    return;
}


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class Calculator {
    constructor(tile) {
        this.name = "CALCULATOR";
        this.tile = tile;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const calcDiv = document.createElement("div");
        this.tile.appendChild(calcDiv);
        this.tile.style.display = "flex";
        this.tile.style.flexDirection = "row";
        calcDiv.style.maxHeight = "400px";
        const output = document.createElement("input");
        output.classList.add("input-text");
        output.style.fontSize = "20px";
        output.readOnly = true;
        output.style.textAlign = "right";
        calcDiv.style.display = "flex";
        calcDiv.style.flexDirection = "column";
        calcDiv.style.alignItems = "center";
        calcDiv.style.width = "60%";
        calcDiv.style.minWidth = "180px";
        const historyDiv = document.createElement("div");
        this.tile.appendChild(historyDiv);
        historyDiv.style.width = "35%";
        historyDiv.style.marginTop = "10px";
        historyDiv.style.display = "block";
        historyDiv.style.maxHeight = "195px";
        historyDiv.style.backgroundColor = "rgb(35, 40, 43)";
        historyDiv.style.borderColor = "rgb(43,72,90)";
        historyDiv.style.borderWidth = "1px";
        historyDiv.style.borderStyle = "solid";
        const historyTable = document.createElement("table");
        historyDiv.appendChild(historyTable);
        const historyTableBody = document.createElement("tbody");
        historyTable.appendChild(historyTableBody);
        output.style.display = "block";
        output.style.width = "90%";
        output.style.height = "36px";
        output.style.margin = "10px";
        output.style.cursor = "default";
        calcDiv.appendChild(output);
        var currentString = "";
        var prevValue = null;
        var currentOperation = null;
        var clearOnNext = false;
        var doubleClear = false;
        const keypad = document.createElement("div");
        calcDiv.appendChild(keypad);
        keypad.style.width = "95%";
        keypad.style.display = "grid";
        keypad.style.gridTemplateColumns = "repeat(4, 1fr)";
        const layout = [[7, null], [8, null], [9, null], ["÷", "#3fa2de"], [4, null], [5, null], [6, null], ["x", "#3fa2de"], [1, null], [2, null], [3, null], ["-", "#3fa2de"], [0, null], [".", null], ["±", null], ["+", "#3fa2de"]];
        layout.forEach(opt => {
            const button = document.createElement("button");
            button.classList.add("refresh-button");
            button.style.fontSize = "20px";
            button.textContent = (opt[0] == 0 ? "0" : opt[0] || "").toString();
            if (opt[1] != null) {
                button.style.backgroundColor = opt[1];
            }
            keypad.appendChild(button);
            button.onclick = function () {
                if (opt[0] == "+" || opt[0] == "-" || opt[0] == "x" || opt[0] == "÷") {
                    if (currentOperation != null) {
                        currentString = calculate(prevValue, currentString, currentOperation);
                        currentOperation = null;
                        prevValue = null;
                    }
                    currentOperation = opt[0];
                    clearOnNext = true;
                    output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
                }
                else if (opt[0] == "±") {
                    if (currentString.toString().charAt(0) == "-") {
                        currentString = currentString.substring(1);
                    }
                    else {
                        currentString = "-" + currentString;
                    }
                    output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
                }
                else {
                    if (clearOnNext) {
                        prevValue = parseFloat(currentString);
                        currentString = "";
                        clearOnNext = false;
                    }
                    currentString += (opt[0] == 0 ? "0" : opt[0] || "").toString();
                    output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
                }
                doubleClear = false;
            };
            return;
        });
        const bottomDiv = document.createElement("div");
        calcDiv.appendChild(bottomDiv);
        bottomDiv.style.width = "95%";
        bottomDiv.style.display = "grid";
        bottomDiv.style.gridTemplateColumns = "repeat(2, 1fr)";
        const clear = document.createElement("button");
        bottomDiv.appendChild(clear);
        clear.textContent = "Clear";
        clear.classList.add("refresh-button");
        clear.style.fontSize = "20px";
        clear.style.backgroundColor = "rgb(217, 83, 79)";
        clear.onclick = function () {
            currentString = "";
            output.value = currentString;
            currentOperation = null;
            prevValue = null;
            clearOnNext = false;
            if (doubleClear) {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(historyTableBody);
            }
            doubleClear = true;
        };
        const enter = document.createElement("button");
        enter.onclick = function () {
            if (currentOperation != null) {
                currentString = calculate(prevValue, currentString, currentOperation);
                currentOperation = null;
                prevValue = null;
            }
            output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
            const tr = document.createElement("tr");
            const td = document.createElement("td");
            td.textContent = output.value;
            tr.appendChild(td);
            if (historyTableBody.children.length > 11) {
                historyTableBody.removeChild(historyTableBody.children[historyTableBody.children.length - 1]);
            }
            if (historyTableBody.children.length > 0) {
                historyTableBody.insertBefore(tr, historyTableBody.firstChild);
            }
            else {
                historyTableBody.appendChild(tr);
            }
            doubleClear = false;
        };
        bottomDiv.appendChild(enter);
        enter.textContent = "Enter";
        enter.classList.add("refresh-button");
        enter.style.fontSize = "20px";
        enter.style.backgroundColor = "#5cb85c";
        this.tile.addEventListener("keydown", (e) => {
            if (e.key === "1" || e.key === "2" || e.key === "3" || e.key === "4" || e.key === "5" || e.key === "6" || e.key === "7" || e.key === "8" || e.key === "9" || e.key === "0" || e.key === ".") {
                if (clearOnNext) {
                    prevValue = parseFloat(currentString);
                    currentString = "";
                    clearOnNext = false;
                }
                currentString += e.key;
                output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
            }
            else if (e.key === "+" || e.key === "-" || e.key === "x" || e.key === "*" || e.key === "/") {
                if (currentOperation != null) {
                    currentString = calculate(prevValue, currentString, currentOperation);
                    currentOperation = null;
                    prevValue = null;
                }
                currentOperation = e.key;
                clearOnNext = true;
                output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
            }
            else if (e.key === "Enter" || e.key === "=") {
                if (currentOperation != null) {
                    currentString = calculate(prevValue, currentString, currentOperation);
                    currentOperation = null;
                    prevValue = null;
                }
                output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
                const tr = document.createElement("tr");
                const td = document.createElement("td");
                td.textContent = output.value;
                tr.appendChild(td);
                if (historyTableBody.children.length > 11) {
                    historyTableBody.removeChild(historyTableBody.children[historyTableBody.children.length - 1]);
                }
                if (historyTableBody.children.length > 0) {
                    historyTableBody.insertBefore(tr, historyTableBody.firstChild);
                }
                else {
                    historyTableBody.appendChild(tr);
                }
                doubleClear = false;
            }
            else if (e.key === "Escape") {
                currentString = "";
                output.value = currentString;
                currentOperation = null;
                prevValue = null;
                clearOnNext = false;
                if (doubleClear) {
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(historyTableBody);
                }
                doubleClear = true;
            }
            else if (e.key === "Backspace") {
                if (currentString.length > 0) {
                    currentString = currentString.slice(0, -1);
                    output.value = parseFloat(currentString).toLocaleString(undefined, { maximumFractionDigits: 12 });
                }
            }
        });
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Calculator;

function calculate(prevValue, currentString, currentOperation) {
    currentString = parseFloat(currentString);
    if (currentOperation == "+") {
        return prevValue + currentString;
    }
    else if (currentOperation == "-") {
        return prevValue - currentString;
    }
    else if (currentOperation == "x" || currentOperation == "*") {
        return prevValue * currentString;
    }
    else if (currentOperation == "÷" || currentOperation == "/") {
        return prevValue / currentString;
    }
    else {
        return 0;
    }
}


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class DataHealth {
    constructor(tile, parameters, pmmgSettings, userInfo) {
        this.name = "DATA HEALTH";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const baseTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Bases");
        baseTitle.classList.add("title");
        this.tile.appendChild(baseTitle);
        const baseBody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(this.tile, ["Planet", "Workforce", "Production", "Storage"]);
        const baseInfo = {};
        if (!this.userInfo["PMMG-User-Info"]) {
            this.tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("No collected data is present. Refresh the buffer. If the problem persists, contact Pi314 on Discord."));
            return;
        }
        (this.userInfo["PMMG-User-Info"]["workforce"] || []).forEach(workforce => {
            if (workforce.PlanetName && !baseInfo[workforce.PlanetName]) {
                baseInfo[workforce.PlanetName] = [true, false, false];
            }
        });
        (this.userInfo["PMMG-User-Info"]["production"] || []).forEach(production => {
            if (production.PlanetName && !baseInfo[production.PlanetName]) {
                baseInfo[production.PlanetName] = [false, true, false];
            }
            else if (production.PlanetName) {
                baseInfo[production.PlanetName][1] = true;
            }
        });
        (this.userInfo["PMMG-User-Info"]["storage"] || []).forEach(storage => {
            if (storage.PlanetName && storage.type == "STORE" && !baseInfo[storage.PlanetName]) {
                baseInfo[storage.PlanetName] = [false, false, true];
            }
            else if (storage.PlanetName && storage.type == "STORE") {
                baseInfo[storage.PlanetName][2] = true;
            }
        });
        Object.keys(baseInfo).forEach(planet => {
            const row = document.createElement("tr");
            baseBody.appendChild(row);
            const planetElem = document.createElement("td");
            planetElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(planet));
            row.appendChild(planetElem);
            baseInfo[planet].forEach(present => {
                const textElem = document.createElement("td");
                textElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(present ? "✓" : "X"));
                textElem.style.color = present ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success : __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
                row.appendChild(textElem);
            });
        });
        const otherTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Other Data");
        otherTitle.classList.add("title");
        otherTitle.style.paddingTop = "10px";
        this.tile.appendChild(otherTitle);
        const otherTable = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(this.tile, ["Parameter", "Value"]);
        const numBaseSites = (this.userInfo["PMMG-User-Info"]["sites"] || []).filter(item => item.type === "BASE").length;
        otherTable.appendChild(createTableRow("Base Sites", numBaseSites));
        const numWarehouseSites = (this.userInfo["PMMG-User-Info"]["sites"] || []).filter(item => item.type !== "BASE").length;
        otherTable.appendChild(createTableRow("Warehouse Sites", numWarehouseSites));
        const numBaseStores = (this.userInfo["PMMG-User-Info"]["storage"] || []).filter(item => item.type === "STORE").length;
        otherTable.appendChild(createTableRow("Base Stores", numBaseStores));
        const numWarehouseStores = (this.userInfo["PMMG-User-Info"]["storage"] || []).filter(item => item.type === "WAREHOUSE_STORE").length;
        otherTable.appendChild(createTableRow("Warehouse Stores", numWarehouseStores));
        const numShipStores = (this.userInfo["PMMG-User-Info"]["storage"] || []).filter(item => item.type === "SHIP_STORE").length;
        otherTable.appendChild(createTableRow("Ship Stores", numShipStores));
        const numWorkforces = (this.userInfo["PMMG-User-Info"]["workforce"] || []).length;
        otherTable.appendChild(createTableRow("Workforces", numWorkforces));
        const numProduction = (this.userInfo["PMMG-User-Info"]["production"] || []).length;
        otherTable.appendChild(createTableRow("Production Sites", numProduction));
        const contracts = (this.userInfo["PMMG-User-Info"]["contracts"] || []).length;
        otherTable.appendChild(createTableRow("Contracts", contracts));
        const cxos = (this.userInfo["PMMG-User-Info"]["cxos"] || []).length;
        otherTable.appendChild(createTableRow("CXOS", cxos));
        const fxos = (this.userInfo["PMMG-User-Info"]["fxos"] || []).length;
        otherTable.appendChild(createTableRow("FXOS", fxos));
        otherTable.appendChild(createTableRow("Currency", this.userInfo["PMMG-User-Info"]["currency"] && this.userInfo["PMMG-User-Info"]["currency"][0] != undefined));
        const cxPriceAge = this.userInfo["PMMG-User-Info"]["cx_prices"] ? ((Date.now() - this.userInfo["PMMG-User-Info"]["cx_prices"]["Age"]) / 3600000).toLocaleString(undefined, { maximumFractionDigits: 0 }) + "h" : false;
        otherTable.appendChild(createTableRow("CX Price Age", cxPriceAge));
        const clearButton = document.createElement("button");
        clearButton.textContent = "Clear User Data";
        clearButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        clearButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        clearButton.style.margin = "4px";
        clearButton.style.display = "block";
        clearButton.addEventListener("click", function () {
            try {
                browser.storage.local.remove("PMMG-User-Info");
            }
            catch (err) {
                chrome.storage.local.remove("PMMG-User-Info");
            }
        });
        this.tile.appendChild(clearButton);
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DataHealth;

function createTableRow(parameter, value) {
    const row = document.createElement("tr");
    const paramElem = document.createElement("td");
    paramElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(parameter));
    row.appendChild(paramElem);
    const valueElem = document.createElement("td");
    if (value === true) {
        valueElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("✓"));
        valueElem.style.color = __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success;
    }
    else if (value === false) {
        valueElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("X"));
        valueElem.style.color = __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
    }
    else {
        valueElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(value));
    }
    row.appendChild(valueElem);
    return row;
}


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__GameProperties__ = __webpack_require__(3);




class Burn {
    constructor(tile, parameters, pmmgSettings, userInfo) {
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
        this.alive = true;
        if (parameters[1] && !parameters[2]) {
            this.name = "ENHANCED BURN" + (parameters[1] ? " - " + parameters[1].toUpperCase() : "");
        }
        else {
            this.name = "ENHANCED BURN";
        }
    }
    create_buffer() {
        const parameters = this.parameters;
        const pmmgSettings = this.pmmgSettings;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (!this.parameters[1]) {
            this.tile.textContent = "Error! Enter a planet name after XIT BURN (XIT BURN_UV-351a)";
            return;
        }
        if (!this.userInfo["PMMG-User-Info"] || !this.userInfo["PMMG-User-Info"]["workforce"]) {
            this.tile.textContent = "Loading Burn Data...";
            this.tile.id = "pmmg-reload";
            return;
        }
        this.tile.id = "pmmg-load-success";
        var planetBurn;
        var settings;
        var production = { lines: [] };
        var workforce = { workforce: [] };
        var inv = { items: [] };
        if (this.parameters[1].toLowerCase() == "all") {
            this.userInfo["PMMG-User-Info"]["workforce"].forEach(planetWorkforce => {
                if (!planetWorkforce.PlanetName) {
                    return;
                }
                const planetProduction = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetWorkforce.PlanetName, this.userInfo["PMMG-User-Info"]["production"]);
                const planetInv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetWorkforce.PlanetName, this.userInfo["PMMG-User-Info"]["storage"], true);
                if (planetProduction && planetProduction.lines) {
                    planetProduction.lines.forEach(line => {
                        production.lines.push(line);
                    });
                }
                if (planetWorkforce && planetWorkforce.workforce) {
                    planetWorkforce.workforce.forEach(worker => {
                        workforce.workforce.push(worker);
                    });
                }
                if (planetInv && planetInv.items) {
                    planetInv.items.forEach(item => {
                        inv.items.push(item);
                    });
                }
            });
        }
        else if (!this.parameters[2]) {
            production = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(this.parameters[1], this.userInfo["PMMG-User-Info"]["production"]);
            workforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(this.parameters[1], this.userInfo["PMMG-User-Info"]["workforce"]);
            inv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(this.parameters[1], this.userInfo["PMMG-User-Info"]["storage"], true);
        }
        else {
            const planets = [...parameters];
            planets.shift();
            planets.forEach(planet => {
                const planetProduction = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planet, this.userInfo["PMMG-User-Info"]["production"]);
                const planetWorkforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planet, this.userInfo["PMMG-User-Info"]["workforce"]);
                const planetInv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planet, this.userInfo["PMMG-User-Info"]["storage"], true);
                if (planetProduction && planetProduction.lines) {
                    planetProduction.lines.forEach(line => {
                        production.lines.push(line);
                    });
                }
                if (planetWorkforce && planetWorkforce.workforce) {
                    planetWorkforce.workforce.forEach(worker => {
                        workforce.workforce.push(worker);
                    });
                }
                if (planetInv && planetInv.items) {
                    planetInv.items.forEach(item => {
                        inv.items.push(item);
                    });
                }
            });
        }
        planetBurn = Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* calculateBurn */])(production, workforce, inv);
        if (!planetBurn) {
            return;
        }
        const screenNameElem = document.querySelector(__WEBPACK_IMPORTED_MODULE_2__Selector__["a" /* Selector */].ScreenName);
        const screenName = screenNameElem ? screenNameElem.textContent : "";
        if (!this.pmmgSettings["PMMGExtended"]["burn_display_settings"]) {
            this.pmmgSettings["PMMGExtended"]["burn_display_settings"] = [];
        }
        var settingsIndex = FindBurnSettings(this.pmmgSettings["PMMGExtended"]["burn_display_settings"], screenName + this.parameters[1]);
        const dispSettings = settingsIndex == -1 ? [1, 1, 1, 1] : this.pmmgSettings["PMMGExtended"]["burn_display_settings"][settingsIndex][1];
        const table = document.createElement("table");
        const bufferHeader = document.createElement("div");
        bufferHeader.style.display = "flex";
        this.tile.appendChild(bufferHeader);
        const settingsDiv = document.createElement("div");
        settingsDiv.style.display = "flex";
        bufferHeader.appendChild(settingsDiv);
        settingsDiv.appendChild(createSettingsButton("RED", 22.025, dispSettings[0], function () {
            dispSettings[0] = dispSettings[0] ? 0 : 1;
            UpdateBurn(table, dispSettings);
            if (settingsIndex == -1) {
                pmmgSettings["PMMGExtended"]["burn_display_settings"].push([screenName + parameters[1], dispSettings]);
                settingsIndex = pmmgSettings["PMMGExtended"]["burn_display_settings"].length - 1;
            }
            else {
                pmmgSettings["PMMGExtended"]["burn_display_settings"][settingsIndex][1] = dispSettings;
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        }));
        settingsDiv.appendChild(createSettingsButton("YELLOW", 40.483, dispSettings[1], function () {
            dispSettings[1] = dispSettings[1] ? 0 : 1;
            UpdateBurn(table, dispSettings);
            if (settingsIndex == -1) {
                pmmgSettings["PMMGExtended"]["burn_display_settings"].push([screenName + parameters[1], dispSettings]);
                settingsIndex = pmmgSettings["PMMGExtended"]["burn_display_settings"].length - 1;
            }
            else {
                pmmgSettings["PMMGExtended"]["burn_display_settings"][settingsIndex][1] = dispSettings;
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        }));
        settingsDiv.appendChild(createSettingsButton("GREEN", 34.65, dispSettings[2], function () {
            dispSettings[2] = dispSettings[2] ? 0 : 1;
            UpdateBurn(table, dispSettings);
            if (settingsIndex == -1) {
                pmmgSettings["PMMGExtended"]["burn_display_settings"].push([screenName + parameters[1], dispSettings]);
                settingsIndex = pmmgSettings["PMMGExtended"]["burn_display_settings"].length - 1;
            }
            else {
                pmmgSettings["PMMGExtended"]["burn_display_settings"][settingsIndex][1] = dispSettings;
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        }));
        settingsDiv.appendChild(createSettingsButton("INF", 19.6, dispSettings[3], function () {
            dispSettings[3] = dispSettings[3] ? 0 : 1;
            UpdateBurn(table, dispSettings);
            if (settingsIndex == -1) {
                pmmgSettings["PMMGExtended"]["burn_display_settings"].push([screenName + parameters[1], dispSettings]);
                settingsIndex = pmmgSettings["PMMGExtended"]["burn_display_settings"].length - 1;
            }
            else {
                pmmgSettings["PMMGExtended"]["burn_display_settings"][settingsIndex][1] = dispSettings;
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        }));
        const head = document.createElement("thead");
        const headRow = document.createElement("tr");
        head.appendChild(headRow);
        table.appendChild(head);
        for (let title of ["Needs", "Production", "Inv", "Amt. Needed", "Burn"]) {
            const header = document.createElement("th");
            header.textContent = title;
            header.style.paddingTop = "0";
            headRow.appendChild(header);
        }
        headRow.firstChild.colSpan = 2;
        const body = document.createElement("tbody");
        table.appendChild(body);
        var burnMaterials = Object.keys(planetBurn);
        burnMaterials.sort(__WEBPACK_IMPORTED_MODULE_0__util__["a" /* CategorySort */]);
        for (let material of burnMaterials) {
            var included = true;
            if (settings != undefined && this.parameters[1].toLowerCase() != "group") {
                settings["MaterialExclusions"].forEach((mat) => {
                    if (mat["MaterialTicker"] == material) {
                        included = false;
                        return;
                    }
                    return;
                });
            }
            if (!included) {
                continue;
            }
            const row = document.createElement("tr");
            body.appendChild(row);
            const materialColumn = document.createElement("td");
            materialColumn.style.width = "32px";
            materialColumn.style.paddingRight = "0px";
            materialColumn.style.paddingLeft = "0px";
            const matElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["l" /* createMaterialElement */])(material, "prun-remove-js", "none", false, true);
            if (matElem) {
                materialColumn.appendChild(matElem);
            }
            row.appendChild(materialColumn);
            const nameSpan = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(__WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][material][0]);
            nameSpan.style.fontWeight = "bold";
            const nameColumn = document.createElement("td");
            nameColumn.appendChild(nameSpan);
            row.appendChild(nameColumn);
            const consColumn = document.createElement("td");
            consColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(planetBurn[material]["DailyAmount"].toLocaleString(undefined, { maximumFractionDigits: Math.abs(planetBurn[material]["DailyAmount"]) < 1 ? 2 : 1, minimumFractionDigits: Math.abs(planetBurn[material]["DailyAmount"]) < 1 ? 2 : undefined }) + " / Day"));
            row.appendChild(consColumn);
            const invColumn = document.createElement("td");
            const invAmount = planetBurn[material]["Inventory"] == undefined ? 0 : planetBurn[material]["Inventory"];
            invColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(invAmount.toLocaleString(undefined)));
            row.appendChild(invColumn);
            const burn = planetBurn[material]["DaysLeft"];
            const burnColumn = document.createElement("td");
            burnColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(((burn != "∞" && burn < 500 && planetBurn[material]["DailyAmount"] < 0) ? Math.floor(burn).toLocaleString(undefined, { maximumFractionDigits: 0 }) : "∞") + " Days"));
            if (planetBurn[material]["DailyAmount"] >= 0) {
                burnColumn.classList.add("burn-green");
                burnColumn.classList.add("burn-infinite");
            }
            else if (burn <= (this.pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3, 7])[0]) {
                burnColumn.classList.add("burn-red");
            }
            else if (burn <= (this.pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3, 7])[1]) {
                burnColumn.classList.add("burn-yellow");
            }
            else {
                burnColumn.classList.add("burn-green");
            }
            const needColumn = document.createElement("td");
            const needAmt = burn > (this.pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3, 7])[1] || planetBurn[material]["DailyAmount"] > 0 ? 0 : (burn - (this.pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3, 7])[1]) * planetBurn[material]["DailyAmount"];
            needColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(needAmt.toLocaleString(undefined, { maximumFractionDigits: 0 })));
            row.appendChild(needColumn);
            row.appendChild(burnColumn);
        }
        UpdateBurn(table, dispSettings);
        this.tile.appendChild(table);
        this.update_buffer();
        return;
    }
    update_buffer() {
        this.alive = document.body.contains(this.tile);
        if (this.alive) {
            window.setTimeout(() => this.create_buffer(), 3000);
        }
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Burn;

function FindBurnSettings(array, matchString) {
    for (var i = 0; i < array.length; i++) {
        if (matchString == array[i][0]) {
            return i;
        }
    }
    return -1;
}
function UpdateBurn(table, dispSettings) {
    Array.from(table.children[1].children).forEach(row => {
        if (row.children[5].classList.contains("burn-infinite")) {
            row.style.display = dispSettings[3] ? "table-row" : "none";
            row.style.visibility = dispSettings[3] ? "visible" : "hidden";
            row.style.width = dispSettings[3] ? "auto" : "0px";
            row.style.height = dispSettings[3] ? "auto" : "0px";
        }
        else if (row.children[5].classList.contains("burn-green")) {
            row.style.display = dispSettings[2] ? "table-row" : "none";
            row.style.visibility = dispSettings[2] ? "visible" : "hidden";
            row.style.width = dispSettings[2] ? "auto" : "0px";
            row.style.height = dispSettings[2] ? "auto" : "0px";
        }
        else if (row.children[5].classList.contains("burn-yellow")) {
            row.style.display = dispSettings[1] ? "table-row" : "none";
            row.style.visibility = dispSettings[1] ? "visible" : "hidden";
            row.style.width = dispSettings[1] ? "auto" : "0px";
            row.style.height = dispSettings[1] ? "auto" : "0px";
        }
        else if (row.children[5].classList.contains("burn-red")) {
            row.style.display = dispSettings[0] ? "table-row" : "none";
            row.style.visibility = dispSettings[0] ? "visible" : "hidden";
            row.style.width = dispSettings[0] ? "auto" : "0px";
            row.style.height = dispSettings[0] ? "auto" : "0px";
        }
        return;
    });
    return;
}
function createSettingsButton(text, width, toggled, f) {
    const button = document.createElement("span");
    const bar = document.createElement("div");
    if (toggled) {
        bar.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarToggled);
    }
    else {
        bar.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarUntoggled);
    }
    const textBox = document.createElement("div");
    textBox.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsText);
    textBox.textContent = text;
    button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsButton);
    bar.style.width = width + "px";
    bar.style.maxWidth = width + "px";
    bar.style.height = "2px";
    button.appendChild(bar);
    button.appendChild(textBox);
    button.addEventListener("click", function () {
        if (toggled) {
            bar.classList.remove(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarToggled);
            bar.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarUntoggled);
            toggled = false;
        }
        else {
            bar.classList.remove(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarUntoggled);
            bar.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SettingsBarToggled);
            toggled = true;
        }
        f();
    });
    return button;
}


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class Contracts {
    constructor(tile, parameters, pmmgSettings, userInfo) {
        this.name = "CONTRACTS";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
        this.alive = true;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (!this.userInfo["PMMG-User-Info"] || !this.userInfo["PMMG-User-Info"]["contracts"]) {
            this.tile.textContent = "Loading Contract Data...";
            this.tile.id = "pmmg-reload";
            return;
        }
        const contractData = this.userInfo["PMMG-User-Info"]["contracts"];
        let validContracts = contractData.filter(c => !invalidContractStatus.includes(c["status"]));
        validContracts.map(contract => {
            contract["IsFaction"] = false;
            contract["materialConditions"] = [];
            let selfConditions = [];
            let partnerConditions = [];
            contract.conditions.map((condition) => {
                if (condition["type"] === "REPUTATION")
                    contract["IsFaction"] = true;
                if (condition["quantity"] !== null && materialFulfilmentType.includes(condition["type"]))
                    contract["materialConditions"].push(condition);
                if (condition["party"] === contract["party"])
                    selfConditions.push(condition);
                else
                    partnerConditions.push(condition);
            });
            selfConditions.sort(conditionSort);
            partnerConditions.sort(conditionSort);
            contract.FilteredConditions = {};
            contract.FilteredConditions["self"] = selfConditions;
            contract.FilteredConditions["partner"] = partnerConditions;
        });
        validContracts.sort(ContractSort);
        const table = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(this.tile, ["Contract ID", "Material", "Partner's Conditions", "My Conditions"]);
        if (validContracts.length === 0) {
            const row = createNoContractsRow(4);
            table.appendChild(row);
        }
        else {
            validContracts.forEach(contract => {
                const row = createContractRow(contract);
                table.appendChild(row);
            });
        }
        this.update_buffer();
        return;
    }
    update_buffer() {
        this.alive = document.body.contains(this.tile);
        if (this.alive) {
            window.setTimeout(() => this.create_buffer(), 3000);
        }
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Contracts;

const invalidContractStatus = [
    "FULFILLED",
    "BREACHED",
    "TERMINATED",
    "CANCELLED",
    "REJECTED"
];
function createContractRow(contract) {
    var row = document.createElement("tr");
    let contractLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(contract["name"] || contract["localId"], "CONT " + contract["localId"]);
    const contractIdColumn = document.createElement("td");
    contractIdColumn.appendChild(contract["IsFaction"] ? factionContract(contractLink) : contractLink);
    row.appendChild(contractIdColumn);
    const materialColumn = document.createElement("td");
    materialColumn.style.width = "32px";
    materialColumn.style.paddingLeft = "10px";
    const materialDiv = document.createElement("div");
    materialColumn.appendChild(materialDiv);
    if (contract["materialConditions"].length > 0) {
        contract["materialConditions"].forEach(materialCondition => {
            if (!materialCondition.quantity || !materialCondition.quantity.material) {
                return;
            }
            const materialElement = Object(__WEBPACK_IMPORTED_MODULE_0__util__["l" /* createMaterialElement */])(materialCondition.quantity.material.ticker, "prun-remove-js", materialCondition.quantity.amount, false, true);
            if (materialElement) {
                materialElement.style.marginBottom = "4px";
                materialDiv.appendChild(materialElement);
            }
            return;
        });
    }
    row.appendChild(materialColumn);
    const partnerColumn = document.createElement("td");
    var faction;
    if (contract["IsFaction"]) {
        Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["e" /* FactionHeaders */]).forEach(factionName => {
            if (contract.partner.name.includes(factionName)) {
                faction = __WEBPACK_IMPORTED_MODULE_2__GameProperties__["e" /* FactionHeaders */][factionName];
            }
            return;
        });
    }
    if (!faction) {
        let partnerLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(contract.partner.name, "CO " + contract.partner.code);
        partnerColumn.appendChild(partnerLink);
    }
    else {
        let partnerLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(contract.partner.name, "FA " + faction);
        partnerColumn.appendChild(partnerLink);
    }
    for (let condition of contract.FilteredConditions["partner"])
        partnerColumn.appendChild(conditionStatus(condition));
    row.appendChild(partnerColumn);
    const selfColumn = document.createElement("td");
    for (let condition of contract.FilteredConditions["self"])
        selfColumn.appendChild(conditionStatus(condition));
    row.appendChild(selfColumn);
    return row;
}
;
function createNoContractsRow(colspan) {
    var line = document.createElement("tr");
    const textColumn = document.createElement("td");
    textColumn.setAttribute('colspan', `${colspan}`);
    textColumn.textContent = "No contracts";
    line.appendChild(textColumn);
    return line;
}
function conditionSort(a, b) {
    return a["index"] > b["index"] ? 1 : -1;
}
function ContractSort(a, b) {
    return (a["date"] ? a["date"]["timestamp"] : 0) > (b["date"] ? b["date"]["timestamp"] : 0) ? 1 : -1;
}
function factionContract(link) {
    let conditionDiv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["s" /* createTextDiv */])("");
    let marker = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(" ★");
    marker.style.color = __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Yellow;
    marker.style.fontWeight = "bold";
    marker.style.cursor = "default";
    marker.title = "Faction Contract";
    link.style.display = "inline";
    conditionDiv.appendChild(link);
    conditionDiv.appendChild(marker);
    return conditionDiv;
}
function conditionStatus(condition) {
    let conditionDiv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["s" /* createTextDiv */])("");
    let marker = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(condition["status"] === "FULFILLED" ? "✓" : "X");
    marker.style.color = condition["status"] === "FULFILLED" ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Success : __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
    marker.style.fontWeight = "bold";
    let text = friendlyConditionText[condition.type] ? friendlyConditionText[condition.type] : condition.type;
    let textSpan = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(" " + text);
    conditionDiv.appendChild(marker);
    conditionDiv.appendChild(textSpan);
    return conditionDiv;
}
const friendlyConditionText = {
    COMEX_PURCHASE_PICKUP: "Material Pickup",
    DELIVERY: "Delivery",
    DELIVERY_SHIPMENT: "Deliver Shipment",
    EXPLORATION: "Exploration",
    REPUTATION: "Reputation",
    PAYMENT: "Payment",
    PICKUP_SHIPMENT: "Pickup Shipment",
    PROVISION_SHIPMENT: "Provision",
    PROVISION: "Provision",
    LOAN_PAYOUT: "Loan Payout",
    LOAN_INSTALLMENT: "Loan Installment",
    POWER: "Become Governor"
};
const materialFulfilmentType = [
    "DELIVERY",
    "DELIVERY_SHIPMENT",
    "PROVISION_SHIPMENT",
    "COMEX_PURCHASE_PICKUP"
];


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class CommandLists {
    constructor(tile, parameters) {
        this.name = "COMMAND LIST";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (this.parameters.length == 1) {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Lists", generateListTable, this.tile);
        }
        else {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Lists", dispStoredList, [this.tile, this.parameters, this]);
        }
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CommandLists;

function generateListTable(result, tile) {
    const table = document.createElement("table");
    tile.appendChild(table);
    const head = document.createElement("thead");
    const headRow = document.createElement("tr");
    head.appendChild(headRow);
    table.appendChild(head);
    for (let title of ["Name", "Length", "Delete"]) {
        const header = document.createElement("th");
        header.textContent = title;
        header.style.paddingTop = "0";
        headRow.appendChild(header);
    }
    const body = document.createElement("tbody");
    table.appendChild(body);
    if (!result["PMMG-Lists"]) {
        result["PMMG-Lists"] = {};
    }
    const names = Array.from(Object.keys(result["PMMG-Lists"]));
    names.forEach(name => {
        const row = document.createElement("tr");
        const nameColumn = document.createElement("td");
        const lengthColumn = document.createElement("td");
        const deleteColumn = document.createElement("td");
        row.appendChild(nameColumn);
        row.appendChild(lengthColumn);
        row.appendChild(deleteColumn);
        body.appendChild(row);
        nameColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(name, "XIT LIST_" + name));
        lengthColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(result["PMMG-Lists"][name].length.toLocaleString()));
        const deleteButton = document.createElement("button");
        deleteButton.classList.add("delete-button");
        deleteButton.textContent = "DELETE";
        deleteColumn.appendChild(deleteButton);
        deleteButton.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["O" /* showWarningDialog */])(tile, "Are you sure you want to delete " + name + "?", "Confirm", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Lists", updateThenStoreList, [name, ""]);
                row.style.display = "none";
                return;
            });
            return;
        });
    });
    if (names.length == 0) {
        var line = document.createElement("tr");
        const textColumn = document.createElement("td");
        textColumn.colSpan = 3;
        textColumn.textContent = "No Command Lists.";
        line.appendChild(textColumn);
        body.appendChild(line);
    }
    return;
}
function updateThenStoreList(result, params) {
    if (!params || !params[0]) {
        return;
    }
    const noteName = params[0];
    const noteText = params[1];
    if (!result["PMMG-Lists"]) {
        result["PMMG-Lists"] = {};
    }
    result["PMMG-Lists"][noteName] = noteText.length == 0 ? undefined : noteText;
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
    return;
}
function dispStoredList(result, param) {
    const tile = param[0];
    const parameters = param[1];
    const listObj = param[2];
    const listName = (parameters.slice(1)).join("_");
    const nameDiv = document.createElement("div");
    nameDiv.classList.add("title");
    nameDiv.textContent = listName;
    tile.appendChild(nameDiv);
    if (!result["PMMG-Lists"]) {
        result["PMMG-Lists"] = {};
    }
    const table = document.createElement("table");
    tile.appendChild(table);
    const head = document.createElement("thead");
    const headRow = document.createElement("tr");
    head.appendChild(headRow);
    table.appendChild(head);
    for (let title of [""]) {
        const header = document.createElement("th");
        header.textContent = title;
        header.style.paddingTop = "0";
        headRow.appendChild(header);
    }
    const body = document.createElement("tbody");
    table.appendChild(body);
    if (result["PMMG-Lists"][listName] && result["PMMG-Lists"][listName].length > 0) {
        result["PMMG-Lists"][listName].forEach(linkInfo => {
            if (!linkInfo[0] || !linkInfo[1]) {
                return;
            }
            var line = document.createElement("tr");
            const textColumn = document.createElement("td");
            textColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(linkInfo[0], linkInfo[1]));
            line.appendChild(textColumn);
            body.appendChild(line);
            return;
        });
    }
    else {
        var line = document.createElement("tr");
        const textColumn = document.createElement("td");
        textColumn.colSpan = 1;
        textColumn.textContent = "No Commands.";
        line.appendChild(textColumn);
        body.appendChild(line);
    }
    const addButton = document.createElement("button");
    addButton.textContent = "Edit";
    tile.appendChild(addButton);
    addButton.style.marginLeft = "5px";
    addButton.style.marginTop = "5px";
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    addButton.addEventListener("click", function () {
        createEditInterface(tile, result, parameters, result["PMMG-Lists"][listName] || [], listObj);
        return;
    });
}
function createEditInterface(tile, result, parameters, settings = [], listObj) {
    const prefilled = settings.length != 0;
    const listName = (parameters.slice(1)).join("_");
    const overlapDiv = document.createElement("div");
    overlapDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].OverlappingDiv);
    const greyStripes = document.createElement("div");
    greyStripes.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].GreyStripes);
    overlapDiv.appendChild(greyStripes);
    tile.insertBefore(overlapDiv, tile.firstChild);
    greyStripes.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["G" /* makePopupSpacer */])(tile, overlapDiv));
    const addInterfaceWrapper = document.createElement("div");
    addInterfaceWrapper.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].CenterInterface);
    greyStripes.appendChild(addInterfaceWrapper);
    const addInterface = document.createElement("div");
    addInterface.classList.add("DraftConditionEditor__form___fF72bJM");
    addInterfaceWrapper.appendChild(addInterface);
    const addHeader = document.createElement('h3');
    addHeader.appendChild(document.createTextNode("Command List Editor"));
    addHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
    addInterface.appendChild(addHeader);
    addHeader.style.margin = "0.5em 0 0.5em";
    const form = document.createElement("div");
    addInterface.appendChild(form);
    if (prefilled) {
        for (var i = 0; i < settings.length; i++) {
            form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link " + (i + 1) + " Label", settings[i][0], i == 0 ? "The label of the first link." : ""));
            form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link " + (i + 1) + " Command", settings[i][1], i == 0 ? "The command opened by the first link (ex: CX NC1)" : ""));
        }
    }
    else {
        form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link 1 Label", "", "The label of the first link."));
        form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link 1 Command", "", "The command opened by the first link (ex: CX NC1)"));
    }
    const addRow = document.createElement("div");
    addRow.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveRow);
    form.appendChild(addRow);
    const addLabel = document.createElement("label");
    addLabel.textContent = "Add Link";
    addLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveLabel);
    addRow.appendChild(addLabel);
    const addInputDiv = document.createElement("div");
    addInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveInput);
    addRow.appendChild(addInputDiv);
    const addButton = document.createElement("button");
    addButton.textContent = "ADD LINK";
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    addInputDiv.appendChild(addButton);
    addButton.addEventListener("click", function () {
        const catNumber = (form.children.length) / 2;
        form.insertBefore(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link " + catNumber + " Label"), form.children[form.children.length - 2]);
        form.insertBefore(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Link " + catNumber + " Command"), form.children[form.children.length - 2]);
    });
    const saveRow = document.createElement("div");
    saveRow.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveRow);
    form.appendChild(saveRow);
    const saveLabel = document.createElement("label");
    saveLabel.textContent = "CMD";
    saveLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveLabel);
    saveRow.appendChild(saveLabel);
    const saveInputDiv = document.createElement("div");
    saveInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveInput);
    saveRow.appendChild(saveInputDiv);
    const saveButton = document.createElement("button");
    saveButton.textContent = "SAVE";
    saveButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    saveButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    saveInputDiv.appendChild(saveButton);
    saveButton.addEventListener("click", function () {
        const commandInfo = [];
        for (var i = 0; i < form.children.length - 2; i += 2) {
            if (!form.children[i] || !form.children[i + 1]) {
                break;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i]) == "" || Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i + 1]) == "") {
                continue;
            }
            commandInfo.push([Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i]), Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i + 1])]);
        }
        tile.removeChild(overlapDiv);
        result["PMMG-Lists"][listName] = commandInfo;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
        listObj.create_buffer();
        return;
    });
    greyStripes.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["G" /* makePopupSpacer */])(tile, overlapDiv));
    return;
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class Debug {
    constructor(tile, parameters, pmmgSettings, userInfo, webData) {
        this.name = "DEBUG";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
        this.webData = webData;
    }
    create_buffer() {
        const tile = this.tile;
        const parameters = this.parameters;
        const pmmgSettings = this.pmmgSettings;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const downloadButtons = document.createElement("div");
        this.tile.appendChild(downloadButtons);
        downloadButtons.appendChild(createDownloadButton(this.pmmgSettings["PMMGExtended"], "Download Full Settings", "pmmg-settings" + Date.now().toString() + ".json"));
        downloadButtons.appendChild(createDownloadButton(this.webData, "Download All Web Data", "pmmg-web-data" + Date.now().toString() + ".json"));
        downloadButtons.appendChild(createDownloadButton(this.userInfo, "Download All Collected Data", "pmmg-user-info" + Date.now().toString() + ".json"));
        const endpointLabel = document.createElement("div");
        endpointLabel.textContent = "Get FIO Endpoint (ex: /infrastructure/Proxion)";
        endpointLabel.style.display = "block";
        endpointLabel.style.marginLeft = "4px";
        downloadButtons.appendChild(endpointLabel);
        const endpointInput = document.createElement("input");
        endpointInput.classList.add("input-text");
        endpointInput.style.display = "block";
        downloadButtons.appendChild(endpointInput);
        const endpointButton = document.createElement("button");
        endpointButton.textContent = "Download FIO Endpoint";
        endpointButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        endpointButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        endpointButton.style.marginLeft = "4px";
        endpointButton.style.marginBottom = "4px";
        endpointButton.style.display = "block";
        endpointButton.addEventListener("click", function () {
            const url = "https://rest.fnar.net" + (endpointInput.value.charAt(0) == "/" ? "" : "/") + endpointInput.value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* XITWebRequest */])(tile, parameters, Debug_post, url, "GET", ["Authorization", pmmgSettings["PMMGExtended"]["apikey"]], null);
        });
        downloadButtons.appendChild(endpointButton);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Debug;

function Debug_post(tile, parameters, jsondata) {
    try {
        console.log(JSON.parse(jsondata));
    }
    catch (ex) { }
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */])(jsondata, "fio-endpoint" + Date.now().toString() + ".json", false);
    return [tile, parameters];
}
function createDownloadButton(data, buttonName, fileName) {
    const downloadButton = document.createElement("button");
    downloadButton.textContent = buttonName;
    downloadButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    downloadButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    downloadButton.style.marginLeft = "4px";
    downloadButton.style.marginBottom = "4px";
    downloadButton.style.display = "block";
    downloadButton.addEventListener("click", function () {
        console.log(data);
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */])(data, fileName);
    });
    return downloadButton;
}


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class Help {
    constructor(tile) {
        this.name = "HELP";
        this.tile = tile;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const featureHeader = document.createElement('h3');
        featureHeader.appendChild(document.createTextNode("Features"));
        featureHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        this.tile.appendChild(featureHeader);
        var table = document.createElement("table");
        this.tile.appendChild(table);
        var head = document.createElement("thead");
        var headRow = document.createElement("tr");
        head.appendChild(headRow);
        table.appendChild(head);
        for (let title of ["Name", "Description"]) {
            const header = document.createElement("th");
            header.textContent = title;
            header.style.paddingTop = "0";
            headRow.appendChild(header);
        }
        var body = document.createElement("tbody");
        table.appendChild(body);
        createTableRow(body, ["LM Unit Prices", "Displays per unit prices on the local market."]);
        createTableRow(body, ["LM Posting Unit Prices", "Displaces per unit prices when posting ads."]);
        createTableRow(body, ["Contract Drafts", "Displays per unit prices when creating CONTD."]);
        createTableRow(body, ["Order ETAs", "Displays the date and time when production orders are complete."]);
        createTableRow(body, ["Flight ETAs", "Displays the arrival time when planning a flight."]);
        createTableRow(body, ["Fleet ETAs", "Displays the arrival time of your fleet."]);
        createTableRow(body, ["Queue Load", "Queue Percent Display."]);
        createTableRow(body, ["Consumable Timers", "Adds the number of days of consumables left to WF buffers."]);
        createTableRow(body, ["Notifications", "Shortens and color codes notifications."]);
        createTableRow(body, ["Screen Unpack", "Unpacks the list of screens to the top bar."]);
        createTableRow(body, ["Image Creator", "Loads images and GIFs into chats."]);
        createTableRow(body, ["Inventory Organizer", "Allows for custom sorting of inventories."]);
        createTableRow(body, ["Command Correcter", "Allows for planet names in stock commands (Montem, Promitor, etc.)"]);
        createTableRow(body, ["Sidebar", "Allows the user to customize the left sidebar in XIT SETTINGS."]);
        createTableRow(body, ["Pending Contracts", "Displays the name of the other party in pending contracts."]);
        createTableRow(body, ["Compacted UI", "Minimizes unused portions of the UI"]);
        createTableRow(body, ["Header Minimizer", "Allows minimizing contract and CX headers."]);
        createTableRow(body, ["CXOB Name Highlighter", "Highlights your company name in CXOB buffers."]);
        createTableRow(body, ["CXPO Order Book", "Adds CXOB information to CXPO buffers."]);
        createTableRow(body, ["Toggle Chat Delete", "Allows hiding the chat delete button."]);
        createTableRow(body, ["Color Schemes", "Changes the colors used on material icons. Set in XIT SETTINGS."]);
        createTableRow(body, ["Advanced Mode", "Hides many pieces of information further minimizing the UI. For experienced users only."]);
        const xitHeader = document.createElement('h3');
        xitHeader.appendChild(document.createTextNode("XIT Commands"));
        xitHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        this.tile.appendChild(xitHeader);
        table = document.createElement("table");
        this.tile.appendChild(table);
        head = document.createElement("thead");
        headRow = document.createElement("tr");
        head.appendChild(headRow);
        table.appendChild(head);
        for (let title of ["Name", "Command", "Parameters", "Description"]) {
            const header = document.createElement("th");
            header.textContent = title;
            header.style.paddingTop = "0";
            headRow.appendChild(header);
        }
        body = document.createElement("tbody");
        table.appendChild(body);
        createTableRow(body, ["Burn", "XIT BURN", "Planet", "Shows the number of days of consumables left."]);
        createTableRow(body, ["Repairs", "XIT REPAIRS", "Planet (optional)", "Shows the materials to repair buildings."]);
        createTableRow(body, ["Contracts", "XIT CONTRACTS", "None", "Shows pending contracts."]);
        createTableRow(body, ["Finances", "XIT FIN", "None", "Shows financial information."]);
        createTableRow(body, ["FIO Inventory", "XIT INV", "Username, Planet", "Shows the inventory of another FIO user."]);
        createTableRow(body, ["Notes", "XIT NOTES", "Note Name (optional)", "Provides a text area to type a note in."]);
        createTableRow(body, ["Checklists", "XIT CHECKLIST", "Checklist Name (optional)", "Provides checklist you can add items to."]);
        createTableRow(body, ["Command Lists", "XIT LIST", "List Name (optional)", "Provides a customizable list of command links."]);
        createTableRow(body, ["Settings", "XIT SETTINGS", "None", "Open PMMG settings."]);
        createTableRow(body, ["Calculator", "XIT CALC", "None", "Provides an ingame calculator."]);
        createTableRow(body, ["Chat", "XIT CHAT", "Planet", "Provides read-only access to a planet chat."]);
        createTableRow(body, ["Data Health", "XIT HEALTH", "None", "Shows statistics on collected data."]);
        createTableRow(body, ["Debug", "XIT DEBUG", "None", "Debugging menu."]);
        createTableRow(body, ["Start", "XIT START", "None", "First time user popup."]);
        createTableRow(body, ["PrUN Planner", "XIT PLANNER", "Specific Page (optional)", "Links to PrUN Planner."]);
        createTableRow(body, ["Wiki", "XIT WIKI", "None", "Links PrUN wiki."]);
        createTableRow(body, ["FIO", "XIT FIO", "None", "Links to FIO Web."]);
        createTableRow(body, ["Discord", "XIT DISCORD", "Server ID/Name, Channel ID", "Allows you to chat in Discord."]);
        createTableRow(body, ["Sheets", "XIT SHEETS", "Sheet ID", "Connects to Google Sheets."]);
        createTableRow(body, ["Prosperity", "XIT PROSPERITY", "None", "Accesses the Prosperity map tool."]);
        createTableRow(body, ["PrUN", "XIT PRUN", "None", "Opens PrUN... in PrUN!"]);
        const bugHeader = document.createElement('h3');
        bugHeader.appendChild(document.createTextNode("Common Issues"));
        bugHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        this.tile.appendChild(bugHeader);
        table = document.createElement("table");
        this.tile.appendChild(table);
        head = document.createElement("thead");
        headRow = document.createElement("tr");
        head.appendChild(headRow);
        table.appendChild(head);
        for (let title of ["Description", "Explanation", "Solution"]) {
            const header = document.createElement("th");
            header.textContent = title;
            header.style.paddingTop = "0";
            headRow.appendChild(header);
        }
        body = document.createElement("tbody");
        table.appendChild(body);
        createTableRow(body, ["Seeing green buffers", "PMMG is crashing", "Contact PiBoy314 on Discord"]);
        createTableRow(body, ["Data not scanning in", "PMMG's listener is becoming detached.", "Close Prosperous Universe and reopen it. Check your data in XIT HEALTH."]);
        createTableRow(body, ["Want to clear data", "N/A", "Click on extension icon in upper right, click \"Clear Settings\""]);
        createTableRow(body, ["Something else", "N/A", "Ask on Discord, ping PiBoy314."]);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Help;

function createTableRow(body, contents) {
    const row = document.createElement("tr");
    contents.forEach(text => {
        const td = document.createElement("td");
        td.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(text));
        row.appendChild(td);
        return;
    });
    body.appendChild(row);
    return;
}


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameProperties__ = __webpack_require__(3);


class Repairs {
    constructor(tile, parameters, pmmgSettings, userInfo) {
        this.name = "REPAIRS";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
    }
    create_buffer() {
        const pmmgSettings = this.pmmgSettings;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (!this.userInfo["PMMG-User-Info"] || !this.userInfo["PMMG-User-Info"]["sites"]) {
            this.tile.textContent = "Loading Repair Data...";
            this.tile.id = "pmmg-reload";
            return;
        }
        if (this.parameters.length < 2) {
            const title = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("All Repairs");
            title.classList.add("title");
            this.tile.appendChild(title);
            const inputDiv = document.createElement("div");
            this.tile.appendChild(inputDiv);
            const thresholdDiv = document.createElement("div");
            thresholdDiv.style.display = "inline";
            inputDiv.appendChild(thresholdDiv);
            const thresholdInput = document.createElement("input");
            thresholdInput.classList.add("input-text");
            const thresholdText = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Age Threshold:");
            thresholdText.style.paddingLeft = "5px";
            thresholdInput.type = "number";
            thresholdInput.value = this.pmmgSettings["PMMGExtended"]["repair_threshold"] ? this.pmmgSettings["PMMGExtended"]["repair_threshold"] : "70";
            thresholdInput.style.width = "60px";
            thresholdDiv.appendChild(thresholdText);
            thresholdDiv.appendChild(thresholdInput);
            const offsetDiv = document.createElement("div");
            offsetDiv.style.display = "inline";
            inputDiv.appendChild(offsetDiv);
            const offsetInput = document.createElement("input");
            offsetInput.classList.add("input-text");
            const offsetText = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Days Until Repair:");
            offsetText.style.paddingLeft = "5px";
            offsetInput.type = "number";
            offsetInput.value = this.pmmgSettings["PMMGExtended"]["repair_offset"] ? this.pmmgSettings["PMMGExtended"]["repair_offset"] : "0";
            offsetInput.style.width = "60px";
            offsetDiv.appendChild(offsetText);
            offsetDiv.appendChild(offsetInput);
            const matTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Shopping Cart");
            matTitle.classList.add("title");
            matTitle.style.paddingBottom = "2px";
            this.tile.appendChild(matTitle);
            const matDiv = document.createElement("div");
            this.tile.appendChild(matDiv);
            const buiTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Buildings");
            buiTitle.classList.add("title");
            buiTitle.style.paddingTop = "5px";
            buiTitle.style.paddingBottom = "2px";
            this.tile.appendChild(buiTitle);
            const table = document.createElement("table");
            const head = document.createElement("thead");
            const hr = document.createElement("tr");
            head.appendChild(hr);
            table.appendChild(head);
            this.tile.appendChild(table);
            for (let t of ["Ticker", "Planet", "Age", "Condition"]) {
                const header = document.createElement("th");
                header.textContent = t;
                header.style.paddingTop = "0";
                hr.appendChild(header);
            }
            var buildings = [];
            this.userInfo["PMMG-User-Info"]["sites"].forEach(site => {
                if (site.type != "BASE") {
                    return;
                }
                site.buildings.forEach(build => {
                    buildings.push([site["PlanetName"], build]);
                    return;
                });
                return;
            });
            buildings.sort(buildingSort);
            const body = document.createElement("tbody");
            table.appendChild(body);
            generateGeneralRepairScreen(body, matDiv, buildings, thresholdInput, offsetInput, true);
            thresholdInput.addEventListener("input", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(body);
                generateGeneralRepairScreen(body, matDiv, buildings, thresholdInput, offsetInput, true);
                pmmgSettings["PMMGExtended"]["repair_threshold"] = thresholdInput.value || "70";
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            });
            offsetInput.addEventListener("input", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(body);
                generateGeneralRepairScreen(body, matDiv, buildings, thresholdInput, offsetInput, true);
                pmmgSettings["PMMGExtended"]["repair_offset"] = offsetInput.value || "0";
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            });
        }
        else {
            const title = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(this.parameters[1] + " Repairs");
            title.classList.add("title");
            this.tile.appendChild(title);
            var siteData = [];
            this.userInfo["PMMG-User-Info"]["sites"].forEach(site => {
                if (site.type == "BASE" && (site["PlanetName"].toUpperCase() == this.parameters[1].toUpperCase() || site["PlanetNaturalId"].toUpperCase() == this.parameters[1].toUpperCase()) && site.buildings) {
                    site.buildings.forEach(building => {
                        siteData.push([this.parameters[1], building]);
                    });
                }
                return;
            });
            const inputDiv = document.createElement("div");
            this.tile.appendChild(inputDiv);
            const thresholdDiv = document.createElement("div");
            thresholdDiv.style.display = "inline";
            inputDiv.appendChild(thresholdDiv);
            const thresholdInput = document.createElement("input");
            thresholdInput.classList.add("input-text");
            const thresholdText = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Age Threshold:");
            thresholdText.style.paddingLeft = "5px";
            thresholdInput.type = "number";
            thresholdInput.value = this.pmmgSettings["PMMGExtended"]["repair_threshold"] ? this.pmmgSettings["PMMGExtended"]["repair_threshold"] : "70";
            thresholdInput.style.width = "60px";
            thresholdDiv.appendChild(thresholdText);
            thresholdDiv.appendChild(thresholdInput);
            const offsetDiv = document.createElement("div");
            offsetDiv.style.display = "inline";
            inputDiv.appendChild(offsetDiv);
            const offsetInput = document.createElement("input");
            offsetInput.classList.add("input-text");
            const offsetText = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Days Until Repair:");
            offsetText.style.paddingLeft = "5px";
            offsetInput.type = "number";
            offsetInput.value = this.pmmgSettings["PMMGExtended"]["repair_offset"] ? this.pmmgSettings["PMMGExtended"]["repair_offset"] : "0";
            offsetInput.style.width = "60px";
            offsetDiv.appendChild(offsetText);
            offsetDiv.appendChild(offsetInput);
            const matTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Shopping Cart");
            matTitle.classList.add("title");
            matTitle.style.paddingBottom = "2px";
            this.tile.appendChild(matTitle);
            const matDiv = document.createElement("div");
            this.tile.appendChild(matDiv);
            const buiTitle = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Buildings");
            buiTitle.classList.add("title");
            buiTitle.style.paddingTop = "5px";
            buiTitle.style.paddingBottom = "2px";
            this.tile.appendChild(buiTitle);
            const table = document.createElement("table");
            const head = document.createElement("thead");
            const hr = document.createElement("tr");
            head.appendChild(hr);
            table.appendChild(head);
            this.tile.appendChild(table);
            for (let t of ["Ticker", "Age", "Condition"]) {
                const header = document.createElement("th");
                header.textContent = t;
                header.style.paddingTop = "0";
                hr.appendChild(header);
            }
            siteData.sort(buildingSort);
            const body = document.createElement("tbody");
            table.appendChild(body);
            generateGeneralRepairScreen(body, matDiv, siteData, thresholdInput, offsetInput, false);
            thresholdInput.addEventListener("input", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(body);
                generateGeneralRepairScreen(body, matDiv, siteData, thresholdInput, offsetInput, false);
                pmmgSettings["PMMGExtended"]["repair_threshold"] = thresholdInput.value || "70";
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            });
            offsetInput.addEventListener("input", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(body);
                generateGeneralRepairScreen(body, matDiv, siteData, thresholdInput, offsetInput, false);
                pmmgSettings["PMMGExtended"]["repair_offset"] = offsetInput.value || "0";
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            });
        }
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Repairs;

function generateGeneralRepairScreen(body, matDiv, buildings, thresholdInput, offsetInput, isGlobal) {
    const materials = {};
    if (!buildings) {
        return;
    }
    buildings.forEach(buildingInfo => {
        const planet = buildingInfo[0];
        const building = buildingInfo[1];
        if (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["i" /* NonProductionBuildings */].includes(building["buildingTicker"])) {
            return;
        }
        const buildingRow = document.createElement("tr");
        body.appendChild(buildingRow);
        const date = (((new Date()).getTime() - building.lastRepair) / 86400000);
        if (date < parseFloat(thresholdInput.value || "0") - parseFloat(offsetInput.value || "0")) {
            return;
        }
        var rowData;
        if (isGlobal) {
            rowData = [building["buildingTicker"], planet, date.toLocaleString(undefined, { maximumFractionDigits: 1 }), (building["condition"] * 100).toLocaleString(undefined, { maximumFractionDigits: 1 }) + "%"];
        }
        else {
            rowData = [building["buildingTicker"], date.toLocaleString(undefined, { maximumFractionDigits: 1 }), (building["condition"] * 100).toLocaleString(undefined, { maximumFractionDigits: 1 }) + "%"];
        }
        rowData.forEach(data => {
            const tableElem = document.createElement("td");
            buildingRow.appendChild(tableElem);
            tableElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(data));
        });
        const buildingMaterials = {};
        building.reclaimableMaterials.forEach(mat => {
            const amount = mat.amount;
            const ticker = mat.material.ticker;
            if (buildingMaterials[ticker]) {
                buildingMaterials[ticker] += amount;
            }
            else {
                buildingMaterials[ticker] = amount;
            }
        });
        building.repairMaterials.forEach(mat => {
            const amount = mat.amount;
            const ticker = mat.material.ticker;
            if (buildingMaterials[ticker]) {
                buildingMaterials[ticker] += amount;
            }
            else {
                buildingMaterials[ticker] = amount;
            }
        });
        const adjustedDate = date + parseFloat(offsetInput.value || "0");
        Object.keys(buildingMaterials).forEach(ticker => {
            const amount = adjustedDate > 180 ? buildingMaterials[ticker] : Math.ceil(buildingMaterials[ticker] * adjustedDate / 180);
            if (materials[ticker]) {
                materials[ticker] += amount;
            }
            else {
                materials[ticker] = amount;
            }
        });
    });
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(matDiv);
    matDiv.style.maxWidth = "200px";
    const table = document.createElement("table");
    matDiv.appendChild(table);
    const head = document.createElement("thead");
    const hr = document.createElement("tr");
    head.appendChild(hr);
    table.appendChild(head);
    for (let t of ["Material", "Amount"]) {
        const header = document.createElement("th");
        header.textContent = t;
        header.style.paddingTop = "0";
        hr.appendChild(header);
    }
    const mbody = document.createElement("tbody");
    table.appendChild(mbody);
    Object.keys(materials).sort().forEach(mat => {
        const row = document.createElement("tr");
        mbody.appendChild(row);
        var rowData = [mat, materials[mat].toLocaleString(undefined)];
        for (let point of rowData) {
            const tableElem = document.createElement("td");
            row.appendChild(tableElem);
            tableElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(point));
        }
        return;
    });
    return;
}
function buildingSort(a, b) {
    return a[1]["condition"] > b[1]["condition"] ? 1 : -1;
}


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class Settings {
    constructor(tile, parameters, pmmgSettings, userInfo, webData, modules) {
        this.name = "PMMG SETTINGS";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
        this.userInfo = userInfo;
        this.webData = webData;
        this.modules = modules;
    }
    create_buffer() {
        const tile = this.tile;
        const pmmgSettings = this.pmmgSettings;
        const modules = this.modules;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(tile);
        const warningDiv = document.createElement("div");
        tile.appendChild(warningDiv);
        warningDiv.style.marginTop = "4px";
        warningDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Changes require a refresh to take effect."));
        const helpDiv = document.createElement("div");
        tile.appendChild(helpDiv);
        helpDiv.style.marginTop = "4px";
        helpDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("See a full list of features on "));
        const websiteLink = document.createElement("a");
        websiteLink.href = "https://sites.google.com/view/pmmgextended/features?authuser=0";
        websiteLink.target = "_blank";
        websiteLink.style.display = "inline-block";
        websiteLink.classList.add("link");
        websiteLink.textContent = "PMMG's Website";
        helpDiv.appendChild(websiteLink);
        const enhancedColorHeader = document.createElement('h3');
        enhancedColorHeader.appendChild(document.createTextNode("Color Scheme"));
        enhancedColorHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Select a color scheme to customize material icons.", "right"));
        enhancedColorHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(enhancedColorHeader);
        const colorDiv = document.createElement("div");
        const colorLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Color Scheme:");
        colorLabel.style.marginBottom = "4px";
        colorDiv.appendChild(colorLabel);
        const colorSelect = document.createElement("select");
        colorSelect.name = "colors-select";
        colorSelect.id = "colors-select";
        colorSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])("Enhanced", "enhanced"));
        colorSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])("Icons", "icons"));
        colorSelect.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["p" /* createSelectOption */])("Default", "default"));
        colorSelect.classList.add("select");
        colorSelect.style.marginLeft = "4px";
        if (pmmgSettings["PMMGExtended"]["color_scheme"] == "enhanced" || !pmmgSettings["PMMGExtended"]["color_scheme"]) {
            colorSelect.children[0].selected = true;
        }
        else if (pmmgSettings["PMMGExtended"]["color_scheme"] == "icons") {
            colorSelect.children[1].selected = true;
        }
        else {
            colorSelect.children[2].selected = true;
        }
        colorSelect.style.display = "inline-block";
        colorSelect.addEventListener("change", function () {
            pmmgSettings["PMMGExtended"]["color_scheme"] = colorSelect.selectedOptions[0].value || undefined;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        colorDiv.appendChild(colorSelect);
        tile.appendChild(colorDiv);
        const finDiv = document.createElement("div");
        const finLabel = document.createElement('h3');
        finLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Enable Financial Recording"));
        finLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Record financial info daily. Open XIT FIN for more info.", "right"));
        finLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        finLabel.style.marginBottom = "4px";
        finDiv.appendChild(finLabel);
        const finCheckbox = document.createElement("input");
        finCheckbox.type = "checkbox";
        finCheckbox.checked = pmmgSettings["PMMGExtended"]["recording_financials"] == false ? false : true;
        finDiv.appendChild(finCheckbox);
        tile.appendChild(finDiv);
        finCheckbox.addEventListener("click", function () {
            pmmgSettings["PMMGExtended"]["recording_financials"] = finCheckbox.checked;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const minDiv = document.createElement("div");
        const minLabel = document.createElement('h3');
        minLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Minimize Headers by Default"));
        minLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Minimized contract and CX headers by default.", "right"));
        minLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        minLabel.style.marginBottom = "4px";
        minDiv.appendChild(minLabel);
        const minCheckbox = document.createElement("input");
        minCheckbox.type = "checkbox";
        minCheckbox.checked = pmmgSettings["PMMGExtended"]["minimize_by_default"];
        minDiv.appendChild(minCheckbox);
        tile.appendChild(minDiv);
        minCheckbox.addEventListener("click", function () {
            pmmgSettings["PMMGExtended"]["minimize_by_default"] = minCheckbox.checked;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const advDiv = document.createElement("div");
        const advLabel = document.createElement('h3');
        advLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Advanced Minimalist Mode"));
        advLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Removes redundant information from most buffers. Not recommended for players unfamiliar with the interface.", "right"));
        advLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        advLabel.style.marginBottom = "4px";
        advDiv.appendChild(advLabel);
        const advCheckbox = document.createElement("input");
        advCheckbox.type = "checkbox";
        advCheckbox.checked = pmmgSettings["PMMGExtended"]["advanced_mode"];
        advDiv.appendChild(advCheckbox);
        tile.appendChild(advDiv);
        advCheckbox.addEventListener("click", function () {
            pmmgSettings["PMMGExtended"]["advanced_mode"] = advCheckbox.checked;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const burnDiv = document.createElement("div");
        const burnLabel = document.createElement('h3');
        burnLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Burn Settings"));
        burnLabel.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Set the thresholds for yellow and red consumable levels in burn tiles (in days).", "right"));
        burnLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        burnLabel.style.marginBottom = "4px";
        burnDiv.appendChild(burnLabel);
        if (!pmmgSettings["PMMGExtended"]["burn_thresholds"]) {
            pmmgSettings["PMMGExtended"]["burn_thresholds"] = [3, 7];
        }
        const setDiv = document.createElement("div");
        burnDiv.appendChild(setDiv);
        setDiv.style.display = "flex";
        const redDiv = document.createElement("div");
        setDiv.appendChild(redDiv);
        redDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Red Threshold: "));
        const redIn = document.createElement("input");
        redIn.type = "number";
        redIn.value = (pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3])[0].toLocaleString(undefined, { maximumFractionDigits: 0 });
        redDiv.appendChild(redIn);
        redIn.classList.add("input-text");
        redIn.style.width = "50px";
        redIn.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["burn_thresholds"][0] = parseFloat(redIn.value);
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        const yelDiv = document.createElement("div");
        setDiv.appendChild(yelDiv);
        yelDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Yellow Threshold: "));
        const yelIn = document.createElement("input");
        yelIn.type = "number";
        yelIn.value = (pmmgSettings["PMMGExtended"]["burn_thresholds"] || [3, 7])[1].toLocaleString(undefined, { maximumFractionDigits: 0 });
        yelDiv.appendChild(yelIn);
        yelIn.classList.add("input-text");
        yelIn.style.width = "50px";
        yelIn.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["burn_thresholds"][1] = parseFloat(yelIn.value);
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        tile.appendChild(burnDiv);
        const hotkeyHeader = document.createElement('h3');
        hotkeyHeader.appendChild(document.createTextNode("Left Sidebar Buttons"));
        hotkeyHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Create hotkeys on the left sidebar. The first value is what will be displayed, the second is the command.", "right"));
        hotkeyHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(hotkeyHeader);
        const hotkeyInputDiv = document.createElement("div");
        tile.appendChild(hotkeyInputDiv);
        if (!pmmgSettings["PMMGExtended"]["sidebar"]) {
            pmmgSettings["PMMGExtended"]["sidebar"] = [["BS", "BS"], ["CONT", "CONTS"], ["COM", "COM"], ["CORP", "CORP"], ["CXL", "CXL"], ["FIN", "FIN"], ["FLT", "FLT"], ["INV", "INV"], ["MAP", "MAP"], ["PROD", "PROD"], ["CMDS", "CMDS"], ["SET", "XIT SETTINGS"]];
        }
        pmmgSettings["PMMGExtended"]["sidebar"].forEach(hotkey => {
            const div = createInputPair(hotkey, pmmgSettings, hotkeyInputDiv);
            if (div != null) {
                hotkeyInputDiv.appendChild(div);
            }
            return;
        });
        const addButton = makePushButton("+", function () {
            const div = createInputPair([[], []], pmmgSettings, hotkeyInputDiv);
            if (div != null) {
                hotkeyInputDiv.appendChild(div);
            }
        }, __WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonSuccess);
        addButton.style.marginLeft = "4px";
        addButton.style.marginBottom = "4px";
        tile.appendChild(addButton);
        const authenticationHeader = document.createElement('h3');
        authenticationHeader.appendChild(document.createTextNode("Authentication Settings"));
        authenticationHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Enter your FIO username and API key", "right"));
        authenticationHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(authenticationHeader);
        const usernameDiv = document.createElement("div");
        const usernameLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("FIO Username: ");
        const usernameInput = document.createElement("input");
        usernameInput.value = pmmgSettings["PMMGExtended"]["username"] || "";
        usernameInput.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["username"] = !usernameInput.value || usernameInput.value == "" ? undefined : usernameInput.value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        usernameInput.classList.add("input-text");
        usernameDiv.appendChild(usernameLabel);
        usernameDiv.appendChild(usernameInput);
        tile.appendChild(usernameDiv);
        const apiDiv = document.createElement("div");
        const apiLabel = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("FIO API Key: ");
        apiLabel.style.minWidth = "77px";
        apiLabel.style.display = "inline-block";
        const apiInput = document.createElement("input");
        apiInput.value = pmmgSettings["PMMGExtended"]["apikey"] || "";
        apiInput.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["apikey"] = !apiInput.value || apiInput.value == "" ? undefined : apiInput.value;
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        apiInput.classList.add("input-text");
        apiInput.type = "password";
        apiDiv.appendChild(apiLabel);
        apiDiv.appendChild(apiInput);
        tile.appendChild(apiDiv);
        const screenUnpackHeader = document.createElement('h3');
        screenUnpackHeader.appendChild(document.createTextNode("Screen Unpack Exclusions"));
        screenUnpackHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("List screens to be excluded from screen unpack. Separate screens with a comma.", "right"));
        screenUnpackHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(screenUnpackHeader);
        const notifDiv = document.createElement("div");
        tile.appendChild(notifDiv);
        notifDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("List screen names separated by commas, no spaces."));
        const exclusionInput = document.createElement("input");
        exclusionInput.classList.add("input-text");
        exclusionInput.value = pmmgSettings["PMMGExtended"]["unpack_exceptions"] == undefined ? "" : pmmgSettings["PMMGExtended"]["unpack_exceptions"].join(",");
        exclusionInput.addEventListener("input", function () {
            pmmgSettings["PMMGExtended"]["unpack_exceptions"] = exclusionInput.value.split(",");
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        });
        tile.appendChild(exclusionInput);
        const moduleSettingsHeader = document.createElement('h3');
        moduleSettingsHeader.appendChild(document.createTextNode("Toggle Features"));
        moduleSettingsHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["u" /* createToolTip */])("Toggle features on and off. The yellow X cleans up any stray elements.", "right"));
        moduleSettingsHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(moduleSettingsHeader);
        const content = document.createElement("div");
        content.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionContent);
        tile.appendChild(content);
        modules.forEach(mp => {
            const line = document.createElement('div');
            line.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_1__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarLine, __WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FontsRegular));
            content.appendChild(line);
            line.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(mp.friendlyName));
            content.appendChild(line);
            const right = document.createElement("span");
            right.style.flexGrow = "1";
            right.style.textAlign = "right";
            line.appendChild(right);
            if (pmmgSettings["PMMGExtended"]["disabled"] == undefined) {
                pmmgSettings["PMMGExtended"]["disabled"] = [];
            }
            const toggle = makeToggleButton("On", "Off", () => {
                mp.enabled = !mp.enabled;
                if (pmmgSettings["PMMGExtended"]["disabled"].includes(mp.name)) {
                    if (mp.enabled) {
                        for (var i = 0; i < pmmgSettings["PMMGExtended"]["disabled"].length; i++) {
                            if (pmmgSettings["PMMGExtended"]["disabled"][i] == mp.name) {
                                pmmgSettings["PMMGExtended"]["disabled"].splice(i, 1);
                                i--;
                            }
                        }
                    }
                }
                else {
                    if (!mp.enabled) {
                        pmmgSettings["PMMGExtended"]["disabled"].push(mp.name);
                    }
                }
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
            }, mp.enabled);
            if (pmmgSettings["PMMGExtended"]["disabled"].includes(mp.name)) {
                toggle.setAttribute("data-state", "false");
                mp.enabled = false;
                toggle.classList.remove(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonSuccess);
                toggle.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
                toggle.innerText = "Off";
            }
            right.appendChild(toggle);
            const cleanup = makePushButton("x", () => mp.module.cleanup(true));
            cleanup.style.marginRight = "8px";
            right.appendChild(cleanup);
            return;
        });
        const importHeader = document.createElement('h3');
        importHeader.appendChild(document.createTextNode("Import/Export Settings"));
        importHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
        tile.appendChild(importHeader);
        tile.appendChild(createImportExportButton("Settings", function (e, errorTextBox) {
            if (!e || !e.target) {
                return;
            }
            try {
                const fileOutput = JSON.parse(e.target.result);
                const exclude = ["username", "apikey", "webappid"];
                Object.keys(fileOutput).forEach(key => {
                    if (!exclude.includes(key)) {
                        pmmgSettings["PMMGExtended"][key] = fileOutput[key];
                    }
                });
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
                errorTextBox.style.display = "none";
            }
            catch (ex) {
                console.error(ex);
                console.log("PMMG: Error encountered processing file!");
                errorTextBox.style.display = "inline-block";
            }
        }, function () {
            const output = {};
            const exclude = ["username", "apikey", "webappid"];
            Object.keys(pmmgSettings["PMMGExtended"]).forEach(key => {
                if (!exclude.includes(key)) {
                    output[key] = pmmgSettings["PMMGExtended"][key];
                }
            });
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */])(output, "pmmg-settings" + Date.now().toString() + ".json");
        }));
        tile.appendChild(createImportExportButton("Notes", function (e, errorTextBox) {
            if (!e || !e.target) {
                return;
            }
            try {
                const fileOutput = JSON.parse(e.target.result);
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(fileOutput);
                errorTextBox.style.display = "none";
            }
            catch (ex) {
                console.log("PMMG: Error encountered processing file!");
                errorTextBox.style.display = "inline-block";
            }
        }, function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Notes", __WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */], "pmmg-notes" + Date.now().toString() + ".json");
        }));
        tile.appendChild(createImportExportButton("Lists", function (e, errorTextBox) {
            if (!e || !e.target) {
                return;
            }
            try {
                const fileOutput = JSON.parse(e.target.result);
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(fileOutput);
                errorTextBox.style.display = "none";
            }
            catch (ex) {
                console.log("PMMG: Error encountered processing file!");
                errorTextBox.style.display = "inline-block";
            }
        }, function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Lists", __WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */], "pmmg-lists" + Date.now().toString() + ".json");
        }));
        tile.appendChild(createImportExportButton("Finances", function (e, errorTextBox) {
            if (!e || !e.target) {
                return;
            }
            try {
                const fileOutput = JSON.parse(e.target.result);
                const finResult = {};
                Object.keys(fileOutput).forEach(key => {
                    finResult[key] = fileOutput[key];
                    return;
                });
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])({ "PMMG-Finance": finResult });
                errorTextBox.style.display = "none";
            }
            catch (ex) {
                console.log("PMMG: Error encountered processing file!");
                errorTextBox.style.display = "inline-block";
            }
        }, function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Finance", parseFinThenDownload);
        }));
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Settings;

function parseFinThenDownload(pmmgSettings) {
    const output = {};
    Object.keys(pmmgSettings["PMMG-Finance"]).forEach(key => {
        output[key] = pmmgSettings["PMMG-Finance"][key];
    });
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["v" /* downloadFile */])(output, "pmmg-finance" + Date.now().toString() + ".json");
    return;
}
function createImportExportButton(label, importFunction, exportFunction) {
    const buttonDiv = document.createElement("div");
    const importButton = document.createElement("button");
    importButton.textContent = "Import " + label;
    importButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    importButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    importButton.style.marginLeft = "4px";
    importButton.style.marginBottom = "4px";
    buttonDiv.appendChild(importButton);
    const importFileInput = document.createElement("input");
    importFileInput.type = "file";
    importFileInput.accept = ".json";
    importFileInput.style.display = "none";
    buttonDiv.appendChild(importFileInput);
    importButton.addEventListener("click", function () {
        importFileInput.click();
        return;
    });
    const errorTextBox = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Error Loading File!");
    errorTextBox.style.display = "none";
    buttonDiv.appendChild(errorTextBox);
    importFileInput.addEventListener("change", function () {
        if (!this.files) {
            return;
        }
        const file = this.files[0];
        if (!file) {
            return;
        }
        const reader = new FileReader();
        reader.onload = function (e) {
            importFunction(e, errorTextBox);
        };
        reader.readAsText(file);
        return;
    });
    const exportButton = document.createElement("button");
    exportButton.textContent = "Export " + label;
    exportButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    exportButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    exportButton.style.marginLeft = "4px";
    exportButton.style.marginBottom = "4px";
    buttonDiv.appendChild(exportButton);
    exportButton.addEventListener("click", function () {
        exportFunction();
    });
    return buttonDiv;
}
function createInputPair(hotkey, pmmgSettings, fullDiv) {
    if (hotkey.length != 2) {
        return null;
    }
    const div = document.createElement("div");
    const displayedValue = document.createElement("input");
    displayedValue.classList.add("input-text");
    displayedValue.style.display = "inline-block";
    div.appendChild(displayedValue);
    const command = document.createElement("input");
    command.classList.add("input-text");
    command.style.display = "inline-block";
    div.appendChild(command);
    const remove = makePushButton("X", function () {
        displayedValue.value = "";
        command.value = "";
        displayedValue.dispatchEvent(new Event("input"));
        Array.from(div.children).forEach(elem => { div.removeChild(elem); return; });
    }, __WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonDanger);
    remove.style.display = "inline-block";
    div.appendChild(remove);
    displayedValue.value = hotkey[0];
    command.value = hotkey[1];
    displayedValue.addEventListener("input", function () {
        var hotkeys = [];
        Array.from(fullDiv.children).forEach(option => {
            if (option.children[0] != undefined && option.children[1] != undefined && option.children[0].value != "" && option.children[0].value != undefined && option.children[1].value != "" && option.children[1].value != undefined) {
                hotkeys.push([option.children[0].value, option.children[1].value]);
            }
            return;
        });
        pmmgSettings["PMMGExtended"]["sidebar"] = hotkeys;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
    });
    command.addEventListener("input", function () {
        var hotkeys = [];
        Array.from(fullDiv.children).forEach(option => {
            if (option.children[0] != undefined && option.children[1] != undefined && option.children[0].value != "" && option.children[0].value != undefined && option.children[1].value != "" && option.children[1].value != undefined) {
                hotkeys.push([option.children[0].value, option.children[1].value]);
            }
            return;
        });
        pmmgSettings["PMMGExtended"]["sidebar"] = hotkeys;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
    });
    return div;
}
function makePushButton(text, f, style = __WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary) {
    const button = document.createElement('button');
    button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    button.classList.add(...style);
    button.onclick = f;
    button.innerText = text;
    return button;
}
function makeToggleButton(on, off, f, state = false) {
    const toggle = document.createElement('button');
    toggle.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    const setLook = (s) => {
        toggle.innerText = s ? on : off;
        if (s) {
            toggle.classList.remove(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
            toggle.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonSuccess);
        }
        else {
            toggle.classList.remove(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonSuccess);
            toggle.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
        }
    };
    toggle.setAttribute("data-state", String(state));
    setLook(state);
    toggle.onclick = () => {
        const newState = !(toggle.getAttribute("data-state") === "true");
        toggle.setAttribute("data-state", String(newState));
        setLook(newState);
        f();
    };
    toggle.style.width = "40px";
    return toggle;
}


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);


class Sort {
    constructor(tile, parameters, pmmgSettings) {
        this.name = "SORTING OPTIONS";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgSettings = pmmgSettings;
    }
    create_buffer() {
        const tile = this.tile;
        const parameters = this.parameters;
        const pmmgSettings = this.pmmgSettings;
        const sortObj = this;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(tile);
        if (!parameters[1]) {
            tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Add a planet name to the end of the command!"));
            return;
        }
        if (!pmmgSettings["PMMGExtended"]["sorting"]) {
            pmmgSettings["PMMGExtended"]["sorting"] = [];
        }
        const table = document.createElement("table");
        tile.appendChild(table);
        const head = document.createElement("thead");
        const headRow = document.createElement("tr");
        head.appendChild(headRow);
        table.appendChild(head);
        for (let title of ["Abbreviation", "Categories", "Modify"]) {
            const header = document.createElement("th");
            header.textContent = title;
            header.style.paddingTop = "0";
            headRow.appendChild(header);
        }
        const body = document.createElement("tbody");
        table.appendChild(body);
        const addButton = document.createElement("button");
        addButton.textContent = "Add New";
        tile.appendChild(addButton);
        addButton.style.marginLeft = "5px";
        addButton.style.marginTop = "5px";
        addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonSuccess);
        addButton.addEventListener("click", function () {
            createAddInterface(sortObj, tile, pmmgSettings, parameters);
        });
        var isSorting = false;
        pmmgSettings["PMMGExtended"]["sorting"].forEach(settings => {
            if (!settings[0] || !settings[1] || !settings[2]) {
                return;
            }
            if (settings[1].toUpperCase() != parameters[1].toUpperCase()) {
                return;
            }
            isSorting = true;
            const row = document.createElement("tr");
            const nameColumn = document.createElement("td");
            const catColumn = document.createElement("td");
            const modifyColumn = document.createElement("td");
            row.appendChild(nameColumn);
            row.appendChild(catColumn);
            row.appendChild(modifyColumn);
            body.appendChild(row);
            nameColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(settings[0]));
            var categories = "";
            settings[2].forEach(category => {
                if (!category[0]) {
                    return;
                }
                categories += category[0] + ", ";
                return;
            });
            categories = categories.slice(0, -2);
            catColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(categories));
            modifyColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["q" /* createSmallButton */])("edit", createAddInterface, [sortObj, tile, pmmgSettings, parameters, settings]));
            modifyColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["q" /* createSmallButton */])("delete", function (pmmgSettings, row, settings) {
                for (var i = 0; i < pmmgSettings["PMMGExtended"]["sorting"].length; i++) {
                    if (pmmgSettings["PMMGExtended"]["sorting"][i] == settings) {
                        pmmgSettings["PMMGExtended"]["sorting"].splice(i, 1);
                        row.style.display = "none";
                        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
                        break;
                    }
                }
            }, [pmmgSettings, row, settings]));
            return;
        });
        if (!isSorting) {
            var line = document.createElement("tr");
            const textColumn = document.createElement("td");
            textColumn.colSpan = 3;
            textColumn.textContent = "No Sorting Options";
            line.appendChild(textColumn);
            body.appendChild(line);
        }
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sort;

function createAddInterface(sortObj, tile, pmmgSettings, parameters, settings = []) {
    const prefilled = settings.length != 0;
    const overlapDiv = document.createElement("div");
    overlapDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].OverlappingDiv);
    const greyStripes = document.createElement("div");
    greyStripes.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].GreyStripes);
    overlapDiv.appendChild(greyStripes);
    tile.insertBefore(overlapDiv, tile.firstChild);
    greyStripes.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["G" /* makePopupSpacer */])(tile, overlapDiv));
    const addInterfaceWrapper = document.createElement("div");
    addInterfaceWrapper.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].CenterInterface);
    greyStripes.appendChild(addInterfaceWrapper);
    const addInterface = document.createElement("div");
    addInterface.classList.add("NLOrH7hF5fbKIesqW3uSkA==");
    addInterfaceWrapper.appendChild(addInterface);
    const addHeader = document.createElement('h3');
    addHeader.appendChild(document.createTextNode("Sorting Options Editor"));
    addHeader.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSectionHead);
    addInterface.appendChild(addHeader);
    addHeader.style.margin = "0.5em 0 0.5em";
    const form = document.createElement("div");
    addInterface.appendChild(form);
    form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Abbreviation", prefilled ? settings[0] : "", "The abbreviation showing at the top of the inventory (ABC, CAT, etc.)"));
    if (prefilled) {
        for (var i = 0; i < settings[2].length; i++) {
            form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category " + (i + 1) + " Name", prefilled ? settings[2][i][0] : "", i == 0 ? "The name of the first category for materials" : ""));
            form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category " + (i + 1) + " MATs", prefilled ? settings[2][i][1].join(", ") : "", i == 0 ? "A list of materials in the first category. Separate tickers by a comma. (RAT, DW, etc.)" : ""));
        }
    }
    else {
        form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category 1 Name", "", "The name of the first category for materials."));
        form.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category 1 MATs", "", "A list of materials in the first category. Separate tickers by a comma. (RAT, DW, etc.)"));
    }
    const addRow = document.createElement("div");
    addRow.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveRow);
    form.appendChild(addRow);
    const addLabel = document.createElement("label");
    addLabel.textContent = "Add Category";
    addLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveLabel);
    addRow.appendChild(addLabel);
    const addInputDiv = document.createElement("div");
    addInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveInput);
    addRow.appendChild(addInputDiv);
    const addButton = document.createElement("button");
    addButton.textContent = "ADD CATEGORY";
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    addInputDiv.appendChild(addButton);
    addButton.addEventListener("click", function () {
        const catNumber = (form.children.length - 3) / 2;
        form.insertBefore(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category " + catNumber + " Name"), form.children[form.children.length - 4]);
        form.insertBefore(Object(__WEBPACK_IMPORTED_MODULE_0__util__["o" /* createPopupInputRow */])("Category " + catNumber + " MATs"), form.children[form.children.length - 4]);
    });
    const burnRow = Object(__WEBPACK_IMPORTED_MODULE_0__util__["n" /* createPopupCheckboxRow */])("Burn Sorting", settings[3] || false, "Add burn sorting as a secondary sorting method. Burn categories will show under the categories defined above.");
    form.appendChild(burnRow);
    const zeroRow = Object(__WEBPACK_IMPORTED_MODULE_0__util__["n" /* createPopupCheckboxRow */])("Show Zeros", settings[4] || false, "Show item icons that have zero quantity.");
    form.appendChild(zeroRow);
    const saveRow = document.createElement("div");
    saveRow.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveRow);
    form.appendChild(saveRow);
    const saveLabel = document.createElement("label");
    saveLabel.textContent = "CMD";
    saveLabel.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveLabel);
    saveRow.appendChild(saveLabel);
    const saveInputDiv = document.createElement("div");
    saveInputDiv.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].FormSaveInput);
    saveRow.appendChild(saveInputDiv);
    const saveButton = document.createElement("button");
    saveButton.textContent = "SAVE";
    saveButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    saveButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    saveInputDiv.appendChild(saveButton);
    saveButton.addEventListener("click", function () {
        const itemAbbreviation = Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.firstChild);
        const sortingInfo = [];
        for (var i = 1; i < form.children.length - 4; i += 2) {
            if (!form.children[i] || !form.children[i + 1]) {
                break;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i]) == "" || Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i + 1]) == "") {
                continue;
            }
            sortingInfo.push([Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i]), Object(__WEBPACK_IMPORTED_MODULE_0__util__["F" /* getValueOfPopupRow */])(form.children[i + 1]).replace(/ /g, "").split(",")]);
        }
        tile.removeChild(overlapDiv);
        if (!itemAbbreviation) {
            return;
        }
        if (prefilled) {
            for (var i = 0; i < pmmgSettings["PMMGExtended"]["sorting"].length; i++) {
                if (pmmgSettings["PMMGExtended"]["sorting"][i] == settings) {
                    pmmgSettings["PMMGExtended"]["sorting"][i] = [itemAbbreviation, parameters[1], sortingInfo, Object(__WEBPACK_IMPORTED_MODULE_0__util__["C" /* getCheckOfPopupRow */])(burnRow), Object(__WEBPACK_IMPORTED_MODULE_0__util__["C" /* getCheckOfPopupRow */])(zeroRow)];
                    break;
                }
            }
        }
        else {
            pmmgSettings["PMMGExtended"]["sorting"].push([itemAbbreviation, parameters[1], sortingInfo, Object(__WEBPACK_IMPORTED_MODULE_0__util__["C" /* getCheckOfPopupRow */])(burnRow), Object(__WEBPACK_IMPORTED_MODULE_0__util__["C" /* getCheckOfPopupRow */])(zeroRow)]);
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
        sortObj.create_buffer();
        return;
    });
    greyStripes.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["G" /* makePopupSpacer */])(tile, overlapDiv));
}


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class Start {
    constructor(tile) {
        this.name = "PMMG INTRODUCTION";
        this.tile = tile;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        this.tile.style.fontSize = "12px";
        this.tile.style.paddingLeft = "2px";
        const welcome = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Thank you for using PMMG Extended!");
        welcome.classList.add("title");
        welcome.style.paddingLeft = "0";
        this.tile.appendChild(welcome);
        this.tile.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("This is a short tutorial on how to get the most out of the extension."));
        const websiteLinkDiv = document.createElement("div");
        websiteLinkDiv.style.paddingTop = "15px";
        this.tile.appendChild(websiteLinkDiv);
        websiteLinkDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Details on what PMMG offers can be found here: "));
        const websiteLink = document.createElement("a");
        websiteLink.href = "https://sites.google.com/view/pmmgextended/home?authuser=0";
        websiteLink.target = "_blank";
        websiteLink.style.display = "inline-block";
        websiteLink.classList.add("link");
        websiteLink.textContent = "PMMG Extended";
        websiteLinkDiv.appendChild(websiteLink);
        const helpDiv = document.createElement("div");
        this.tile.appendChild(helpDiv);
        helpDiv.style.paddingTop = "15px";
        helpDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("You can find a list of all of the PMMG commands using "));
        const helpLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])("XIT HELP", "XIT HELP");
        helpLink.style.display = "inline-block";
        helpDiv.appendChild(helpLink);
        const settingsDiv = document.createElement("div");
        this.tile.appendChild(settingsDiv);
        settingsDiv.style.paddingTop = "15px";
        settingsDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("PMMG's settings can be accessed using "));
        const settingsLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])("XIT SETTINGS", "XIT SETTINGS");
        settingsLink.style.display = "inline-block";
        settingsDiv.appendChild(settingsLink);
        const scanDiv = document.createElement("div");
        this.tile.appendChild(scanDiv);
        scanDiv.style.paddingTop = "15px";
        scanDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("To get PMMG to show you data about your space empire, you need to 'scan in' your bases by refreshing the page, then opening each of your production lines. You can check how much data has been scanned in using the XIT HEALTH buffer."));
        const finDiv = document.createElement("div");
        this.tile.appendChild(finDiv);
        finDiv.style.paddingTop = "15px";
        finDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Once you have scanned in your data, one of the biggest PMMG features is in the XIT FIN buffer. It tracks your finances more accurately than the in game FIN buffer."));
        const conclusionDiv = document.createElement("div");
        this.tile.appendChild(conclusionDiv);
        conclusionDiv.style.paddingTop = "15px";
        conclusionDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Contact PiBoy314 in game or on Discord if you have questions."));
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Start;



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class PrUN {
    constructor(tile) {
        this.name = "PRUN-CEPTION";
        this.tile = tile;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const prun = document.createElement("iframe");
        prun.src = "https://apex.prosperousuniverse.com/#/";
        prun.width = "100%";
        prun.height = "100%";
        prun.style.borderWidth = "0";
        this.tile.appendChild(prun);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = PrUN;

class Prosperity {
    constructor(tile, parameters) {
        this.name = "PROSPERITY";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        var url = "https://prosperity-prun.netlify.app/";
        if (this.parameters.length == 3) {
            url += "?from=" + this.parameters[1] + "&to=" + this.parameters[2];
        }
        const prosp = document.createElement("iframe");
        prosp.src = url;
        prosp.width = "100%";
        prosp.height = "100%";
        prosp.style.borderWidth = "0";
        this.tile.appendChild(prosp);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = Prosperity;

class Sheets {
    constructor(tile, parameters) {
        this.name = "GOOGLE SHEETS";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (this.parameters.length < 2) {
            this.tile.textContent = "Error! Not Enough Parameters!";
            return;
        }
        for (var i = 2; i < this.parameters.length; i++) {
            this.parameters[1] += "_" + this.parameters[i];
        }
        const sheet = document.createElement("iframe");
        sheet.src = "https://docs.google.com/spreadsheets/d/" + this.parameters[1] + "/edit?usp=sharing";
        sheet.style.borderWidth = "0";
        sheet.style.height = "100%";
        sheet.style.width = "100%";
        this.tile.appendChild(sheet);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["e"] = Sheets;

class Wiki {
    constructor(tile, parameters) {
        this.name = "PRUN WIKI";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const frame = document.createElement("iframe");
        frame.src = this.parameters[1] && this.parameters[1].toLowerCase() == "resources" ? "https://handbook.apex.prosperousuniverse.com/wiki/community-resources/index.html" : "https://handbook.apex.prosperousuniverse.com/wiki/index.html";
        frame.style.borderWidth = "0";
        frame.style.height = "100%";
        frame.style.width = "100%";
        this.tile.appendChild(frame);
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["f"] = Wiki;

class PrunPlanner {
    constructor(tile, parameters) {
        this.name = "PRUN PLANNER";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        var link = "https://prunplanner.org";
        for (var i = 1; i < this.parameters.length; i++) {
            link += "/" + this.parameters[i];
        }
        const frame = document.createElement("iframe");
        frame.src = link;
        frame.style.borderWidth = "0";
        frame.style.height = "100%";
        frame.style.width = "100%";
        this.tile.appendChild(frame);
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = PrunPlanner;

class FIO {
    constructor(tile) {
        this.name = "FIO";
        this.tile = tile;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        const frame = document.createElement("iframe");
        frame.src = "https://fio.fnar.net/";
        frame.style.borderWidth = "0";
        frame.style.height = "100%";
        frame.style.width = "100%";
        this.tile.appendChild(frame);
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FIO;



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class Checklists {
    constructor(tile, parameters, pmmgResult, userInfo) {
        this.name = "CHECKLIST";
        this.tile = tile;
        this.parameters = parameters;
        this.pmmgResult = pmmgResult;
        this.userInfo = userInfo;
    }
    create_buffer() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(this.tile);
        if (this.parameters.length == 1) {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", generateCheckTable, this.tile);
        }
        else {
            const checkName = (this.parameters.slice(1)).join(" ");
            displayChecklist(this.tile, this.userInfo, checkName);
        }
        return;
    }
    update_buffer() {
    }
    destroy_buffer() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Checklists;

function generateCheckTable(result, tile) {
    if (!tile) {
        return;
    }
    if (!result["PMMG-Checklists"]) {
        result["PMMG-Checklists"] = {};
    }
    const tbody = Object(__WEBPACK_IMPORTED_MODULE_0__util__["r" /* createTable */])(tile, ["Name", "Incomplete", "Due Date", "Modify"]);
    if (Object.keys(result["PMMG-Checklists"]).length == 0) {
        const line = document.createElement("tr");
        const textColumn = document.createElement("td");
        textColumn.colSpan = 4;
        textColumn.textContent = "No Checklists";
        line.appendChild(textColumn);
        tbody.appendChild(line);
    }
    const checklistList = Object.entries(result["PMMG-Checklists"]);
    checklistList.sort(checklistDuedateSort);
    checklistList.forEach(obj => {
        const listName = obj[0];
        const checklist = obj[1];
        const row = document.createElement("tr");
        tbody.appendChild(row);
        const nameElem = document.createElement("td");
        nameElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(listName, "XIT CHECKLIST_" + listName.replace(/ /, "_")));
        row.appendChild(nameElem);
        var incomplete = 0;
        var duedate;
        checklist.forEach(condition => {
            if (!condition.completed) {
                incomplete++;
                if (condition.duedate && (!duedate || condition.duedate < duedate)) {
                    duedate = condition.duedate;
                }
            }
        });
        const incompleteElem = document.createElement("td");
        incompleteElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(incomplete.toLocaleString(undefined, { "maximumFractionDigits": 0 })));
        row.appendChild(incompleteElem);
        const duedateElem = document.createElement("td");
        duedateElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(duedate ? (new Date(duedate)).toLocaleDateString() : "--"));
        if (duedate && duedate < Date.now()) {
            duedateElem.style.color = __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure;
        }
        row.appendChild(duedateElem);
        const modifyElem = document.createElement("td");
        row.appendChild(modifyElem);
        const deleteButton = document.createElement("button");
        deleteButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
        deleteButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonDanger);
        modifyElem.appendChild(deleteButton);
        deleteButton.textContent = "delete";
        deleteButton.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["O" /* showWarningDialog */])(tile, "Are you sure you want to delete this checklist?", "Confirm", function () {
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", deleteChecklist, [listName, tile]);
            });
        });
    });
    tile.style.minHeight = "auto";
    return;
}
function checklistDuedateSort(a, b) {
    const aDuedate = calculateDuedate(a[1]);
    const bDuedate = calculateDuedate(b[1]);
    if (aDuedate && bDuedate) {
        return aDuedate > bDuedate ? 1 : -1;
    }
    else if (aDuedate && !bDuedate) {
        return -1;
    }
    else {
        return 1;
    }
}
function calculateDuedate(checklist) {
    var duedate;
    checklist.forEach(condition => {
        if (!condition.completed) {
            if (condition.duedate && (!duedate || condition.duedate < duedate)) {
                duedate = condition.duedate;
            }
        }
    });
    return duedate;
}
function deleteChecklist(result, params) {
    if (!params[0] || !params[1]) {
        return;
    }
    const checklistName = params[0];
    const tile = params[1];
    if (!result["PMMG-Checklists"][checklistName]) {
        return;
    }
    delete result["PMMG-Checklists"][checklistName];
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(tile);
    generateCheckTable(result, tile);
}
function displayChecklist(tile, userInfo, checkName) {
    const nameDiv = document.createElement("div");
    nameDiv.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(checkName));
    nameDiv.classList.add("title");
    tile.appendChild(nameDiv);
    const checkDiv = document.createElement("div");
    tile.appendChild(checkDiv);
    const checklist = new Checklist(checkName, checkDiv, tile, userInfo);
    const addButton = document.createElement("button");
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].Button);
    addButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    tile.appendChild(addButton);
    addButton.style.margin = "5px";
    addButton.textContent = "ADD ITEM";
    addButton.addEventListener("click", function () {
        generateEditPopup(tile, checklist, userInfo);
    });
    return;
}
function generateEditPopup(tile, checklist, userInfo, info) {
    if (!info) {
        info = { "type": "Text", "completed": false, "id": generateRandomHexSequence(8), "created": Date.now() };
    }
    const popup = new __WEBPACK_IMPORTED_MODULE_0__util__["b" /* Popup */](tile, "Checklist Item Editor");
    popup.addPopupRow("dropdown", "Type", ["Text", "Resupply", "Repair", editPopupTypes[info.type]], "The type of checklist item being added.", updatePopupInfo, [popup, info, userInfo]);
    var date;
    if (info.duedate) {
        date = new Date(info.duedate);
        date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    }
    popup.addPopupRow("date", "Due Date", info.duedate ? date.toISOString().slice(0, 16) : undefined, undefined, updatePopupInfo, [popup, info, userInfo]);
    popup.addPopupRow("number", "Recurring Period", info.recurring, "How often the checklist item will be added back. Will not function without a due date.", updatePopupInfo, [popup, info, userInfo]);
    popup.addPopupRow("button", "CMD", "SAVE", "Save and add the checklist item.", addChecklistItem, [popup, info, checklist, userInfo]);
    popup.addPopupRow("button", "DELETE", "DELETE", "Delete the current checklist item.", deleteChecklistItem, [popup, info, checklist]);
    popup.getRowByName("DELETE").rowInput.classList.remove(__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonPrimary);
    popup.getRowByName("DELETE").rowInput.classList.add(__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ButtonDanger);
    updatePopupInfo(null, [popup, info, userInfo, true]);
}
const editPopupTypes = {
    "Text": 0,
    "Resupply": 1,
    "Repair": 2
};
function updatePopupInfo(junk, params) {
    if (!params[0] || !params[1] || !params[2]) {
        return;
    }
    const popup = params[0];
    const info = params[1];
    const userInfo = params[2];
    const manuallyUpdate = params[3];
    const typeValue = popup.rows[0].rowInput.selectedOptions[0].value;
    if (info.type != typeValue || manuallyUpdate) {
        const numRows = popup.rows.length;
        for (var i = 3; i < numRows - 2; i++) {
            popup.removePopupRow(3);
        }
        if (typeValue == "Text") {
            popup.addPopupRow("text", "Text", info["name"], undefined, updatePopupInfo, [popup, info, userInfo]);
        }
        else if (typeValue == "Resupply") {
            var planetNames = [];
            if (userInfo["PMMG-User-Info"]["workforce"]) {
                planetNames = userInfo["PMMG-User-Info"]["workforce"].map(planet => planet.PlanetName);
            }
            if (info["planet"] && planetNames.includes(info["planet"]) && planetNames.length !== 1) {
                planetNames.push(planetNames.indexOf(info["planet"]));
            }
            popup.addPopupRow("dropdown", "Planet", planetNames, "The base to resupply.", updatePopupInfo, [popup, info, userInfo]);
            popup.addPopupRow("number", "Days", info["days"] ? info["days"].toString() : "0", "The number of days of supplies", updatePopupInfo, [popup, info, userInfo]);
        }
        else if (typeValue == "Repair") {
            var planetNames = [];
            if (userInfo["PMMG-User-Info"]["sites"]) {
                planetNames = userInfo["PMMG-User-Info"]["sites"].filter(site => site.type == "BASE").map(site => site.PlanetName);
            }
            if (info["planet"] && planetNames.includes(info["planet"]) && planetNames.length !== 1) {
                planetNames.push(planetNames.indexOf(info["planet"]));
            }
            popup.addPopupRow("dropdown", "Planet", planetNames, "The base to repair.", updatePopupInfo, [popup, info, userInfo]);
            popup.addPopupRow("number", "Threshold", info["days"] ? info["days"].toString() : "0", "The cutoff for the age of buildings displayed (in days)", updatePopupInfo, [popup, info, userInfo]);
        }
        popup.moveRowToBottom(3);
        popup.moveRowToBottom(3);
    }
    switch (typeValue) {
        case "Text":
            const textRow = popup.getRowByName("Text");
            if (textRow) {
                info["name"] = textRow.rowInput.value;
            }
            break;
        case "Resupply":
            var planetRow = popup.getRowByName("Planet");
            var daysRow = popup.getRowByName("Days");
            if (planetRow) {
                info["planet"] = planetRow.rowInput.selectedOptions[0].value;
            }
            if (daysRow) {
                info["days"] = daysRow.rowInput.value;
            }
            break;
        case "Repair":
            planetRow = popup.getRowByName("Planet");
            daysRow = popup.getRowByName("Threshold");
            if (planetRow) {
                info["planet"] = planetRow.rowInput.selectedOptions[0].value;
            }
            if (daysRow) {
                info["days"] = daysRow.rowInput.value;
            }
    }
    info["type"] = typeValue;
    info["duedate"] = popup.rows[1].rowInput.value == "" ? undefined : (new Date(popup.rows[1].rowInput.value)).getTime();
    info["recurring"] = popup.rows[2].rowInput.value == "" ? undefined : popup.rows[2].rowInput.value;
    return junk;
}
function deleteChecklistItem(params) {
    if (!params[0] || !params[1] || !params[2]) {
        return;
    }
    const popup = params[0];
    const info = params[1];
    const checklist = params[2];
    popup.destroy();
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", updateStoredChecklists, [info, checklist, true, false]);
    return;
}
function addChecklistItem(params) {
    if (!params[0] || !params[1] || !params[2] || !params[3]) {
        return;
    }
    const popup = params[0];
    const info = params[1];
    const checklist = params[2];
    const userInfo = params[3];
    switch (info.type) {
        case "Resupply":
            info.name = "Supply [[p:" + info["planet"] + "]] with " + info["days"] + " " + (info["days"] == "1" ? "day" : "days") + " of consumables.";
            const planetWorkforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(info["planet"], userInfo["PMMG-User-Info"]["workforce"]);
            const planetProduction = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(info["planet"], userInfo["PMMG-User-Info"]["production"]);
            const burn = Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* calculateBurn */])(planetProduction, planetWorkforce, null);
            info["children"] = [];
            Object.keys(burn).forEach(mat => {
                if (burn[mat]["DailyAmount"] < 0) {
                    const amt = -burn[mat]["DailyAmount"] * parseFloat(info.days);
                    const child = {};
                    child.id = generateRandomHexSequence(8);
                    child.isChild = true;
                    child.name = amt.toLocaleString(undefined, { maximumFractionDigits: 0 }) + " [[m:" + mat + "]]";
                    info["children"].push(child);
                }
            });
            break;
        case "Repair":
            info.name = "Repair buildings on [[p:" + info["planet"] + "]] older than " + info["days"] + (info["days"] == "1" ? " day" : " days");
            const mats = {};
            const site = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(info["planet"], userInfo["PMMG-User-Info"]["sites"], true);
            info["children"] = [];
            if (site.buildings) {
                site.buildings.forEach(building => {
                    if (!__WEBPACK_IMPORTED_MODULE_2__GameProperties__["i" /* NonProductionBuildings */].includes(building.buildingTicker) && Date.now() - building.lastRepair > parseFloat(info.days) * 86400000) {
                        building.repairMaterials.forEach(mat => {
                            if (mats[mat.material.ticker]) {
                                mats[mat.material.ticker] += mat.amount;
                            }
                            else {
                                mats[mat.material.ticker] = mat.amount;
                            }
                        });
                    }
                });
            }
            Object.keys(mats).forEach(mat => {
                const child = {};
                child.id = generateRandomHexSequence(8);
                child.isChild = true;
                child.name = mats[mat].toLocaleString(undefined, { maximumFractionDigits: 0 }) + " [[m:" + mat + "]]";
                info["children"].push(child);
            });
            break;
    }
    popup.destroy();
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", updateStoredChecklists, [info, checklist]);
    return;
}
const generateRandomHexSequence = (length) => Array.from({ length }, () => '0123456789abcdef'[Math.floor(Math.random() * 16)]).join('');
function updateStoredChecklists(result, params) {
    if (!params[0] || !params[1]) {
        return;
    }
    const toUpdate = params[0];
    const checklist = params[1];
    const toDelete = params[2];
    const isChild = params[3];
    if (!result["PMMG-Checklists"]) {
        result["PMMG-Checklists"] = {};
    }
    if (!result["PMMG-Checklists"][checklist.name]) {
        result["PMMG-Checklists"][checklist.name] = [];
    }
    if (isChild) {
        const outerIndex = result["PMMG-Checklists"][checklist.name].findIndex(obj => obj.children && obj.children.findIndex(child => child.id == toUpdate.id) != -1);
        if (outerIndex == -1) {
            console.log("Bad Indexing in Checklist Children");
            return;
        }
        const innerIndex = result["PMMG-Checklists"][checklist.name][outerIndex].children.findIndex(child => child.id == toUpdate.id);
        if (innerIndex == -1 && !toDelete) {
            result["PMMG-Checklists"][checklist.name][outerIndex].children.push(toUpdate);
        }
        else if (innerIndex != -1) {
            if (toDelete) {
                result["PMMG-Checklists"][checklist.name][outerIndex].children.splice(innerIndex, 1);
            }
            else {
                result["PMMG-Checklists"][checklist.name][outerIndex].children[innerIndex] = toUpdate;
            }
        }
    }
    else {
        const index = result["PMMG-Checklists"][checklist.name].findIndex(obj => obj.id == toUpdate.id);
        if (index == -1 && !toDelete) {
            result["PMMG-Checklists"][checklist.name].push(toUpdate);
        }
        else if (index != -1) {
            if (toDelete) {
                result["PMMG-Checklists"][checklist.name].splice(index, 1);
            }
            else {
                result["PMMG-Checklists"][checklist.name][index] = toUpdate;
            }
        }
    }
    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
    checklist.recreateCallback(result, checklist);
}
function createName(name) {
    name = name || "";
    const matches = [...name.matchAll(/\[\[([a-zA-Z]):([^:\]]+)\]\]/g)];
    const nameElem = document.createElement("span");
    var nameCopy = name;
    var cut = 0;
    matches.forEach(match => {
        nameElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(nameCopy.substring(0, match.index - cut)));
        var command;
        switch (match[1]) {
            case "m":
                command = "MAT " + match[2];
                break;
            case "p":
                command = "PLI " + match[2];
                break;
            default:
                nameElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(match[0]));
        }
        if (command) {
            const linkElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(match[2], command);
            linkElem.style.display = "inline";
            nameElem.appendChild(linkElem);
        }
        nameCopy = nameCopy.slice(match.index + match[0].length - cut);
        cut = match.index + match[0].length;
    });
    nameElem.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(nameCopy));
    return nameElem;
}
class Checklist {
    constructor(name, checkDiv, tile, userInfo) {
        this.name = name;
        this.checkDiv = checkDiv;
        this.tile = tile;
        this.userInfo = userInfo;
        this.recreate();
    }
    recreate() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", this.recreateCallback, this);
    }
    recreateCallback(result, thisObject) {
        if (!result["PMMG-Checklists"]) {
            return;
        }
        const prevHeight = thisObject.checkDiv.getBoundingClientRect().height;
        thisObject.checkDiv.style.minHeight = prevHeight.toString() + "px";
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(thisObject.checkDiv);
        const checklistItems = [];
        if (result["PMMG-Checklists"][thisObject.name]) {
            result["PMMG-Checklists"][thisObject.name].forEach(checkInfo => {
                checklistItems.push(new CheckItem(checkInfo, thisObject));
            });
        }
        checklistItems.sort(checkSort);
        checklistItems.forEach(item => {
            thisObject.checkDiv.appendChild(item.item);
            if (item.children.length > 0) {
                item.children.forEach(child => {
                    thisObject.checkDiv.appendChild(child.item);
                });
            }
        });
        thisObject.checkDiv.style.minHeight = "auto";
    }
}
class CheckItem {
    constructor(checkInfo, checklist, isChild) {
        this.children = [];
        this.isChild = isChild;
        this.checkInfo = checkInfo;
        this.checklist = checklist;
        this.item = document.createElement("div");
        this.item.classList.add("check-item");
        this.item.style.marginTop = "5px";
        this.item.style.display = "flex";
        this.item.style.alignItems = "center";
        this.checkCircle = document.createElement("div");
        this.item.appendChild(this.checkCircle);
        this.checkCircle.innerHTML = checkInfo.completed ? filledCircle : unfilledCircle;
        this.checkCircle.style.marginRight = "5px";
        this.checkCircle.style.marginLeft = "5px";
        this.checkCircle.style.cursor = "pointer";
        if (isChild) {
            this.checkCircle.style.marginLeft = "20px";
        }
        const mainTextDiv = document.createElement("div");
        mainTextDiv.style.display = "flex";
        mainTextDiv.style.flexDirection = "column";
        mainTextDiv.style.flex = "1";
        this.checkText = createName(checkInfo.name);
        mainTextDiv.appendChild(this.checkText);
        if (checkInfo.duedate) {
            var dateText = (new Date(checkInfo.duedate)).toLocaleDateString();
            if (checkInfo.recurring) {
                dateText += " (every " + (checkInfo.recurring).toLocaleString(undefined, { maximumFractionDigits: 1 }) + " day" + (checkInfo.recurring == 1 ? ")" : "s)");
            }
            this.dateElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(dateText);
            this.dateElem.style.color = checkInfo.duedate < Date.now() && !checkInfo.completed ? __WEBPACK_IMPORTED_MODULE_1__Style__["i" /* TextColors */].Failure : "#787878";
            mainTextDiv.appendChild(this.dateElem);
        }
        else {
            this.checkText.style.marginTop = "-1px";
        }
        this.item.appendChild(mainTextDiv);
        const thisObject = this;
        if (!this.isChild) {
            this.editButton = document.createElement("button");
            this.editButton.textContent = "modify";
            this.editButton.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SmallButton);
            this.editButton.style.marginRight = "5px";
            this.item.appendChild(this.editButton);
            this.editButton.addEventListener("click", function () {
                generateEditPopup(checklist.tile, checklist, checklist.userInfo, thisObject.checkInfo);
            });
        }
        this.checkCircle.addEventListener('click', function () {
            thisObject.changeCheckedState();
        });
        if (checkInfo.children) {
            checkInfo.children.forEach(child => {
                if (child.invisible) {
                    return;
                }
                this.children.push(new CheckItem(child, checklist, true));
            });
        }
    }
    changeCheckedState() {
        this.checkInfo.completed = !this.checkInfo.completed;
        this.checkCircle.innerHTML = this.checkInfo.completed ? filledCircle : unfilledCircle;
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", updateStoredChecklists, [this.checkInfo, this.checklist, false, this.isChild]);
        const thisObject = this;
        setTimeout(function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", function (result) {
                if (!result["PMMG-Checklists"] || !result["PMMG-Checklists"][thisObject.checklist.name]) {
                    return;
                }
                var completed;
                if (thisObject.checkInfo.isChild) {
                    const parentIndex = result["PMMG-Checklists"][thisObject.checklist.name].findIndex(obj => obj.children && obj.children.findIndex(obj2 => obj2.id == thisObject.checkInfo.id) != -1);
                    const childIndex = parentIndex == -1 ? -1 : result["PMMG-Checklists"][thisObject.checklist.name][parentIndex].children.findIndex(obj => obj.id == thisObject.checkInfo.id);
                    completed = childIndex != -1 && result["PMMG-Checklists"][thisObject.checklist.name][parentIndex].children[childIndex].completed;
                }
                else {
                    const index = result["PMMG-Checklists"][thisObject.checklist.name].findIndex(obj => obj.id == thisObject.checkInfo.id);
                    completed = index != -1 && result["PMMG-Checklists"][thisObject.checklist.name][index].completed;
                }
                if (completed) {
                    var toDelete = true;
                    if (thisObject.checkInfo.isChild) {
                        thisObject.checkInfo.invisible = true;
                        toDelete = false;
                    }
                    else if (thisObject.checkInfo.recurring && thisObject.checkInfo.duedate) {
                        thisObject.checkInfo.duedate += thisObject.checkInfo.recurring * 86400000;
                        thisObject.checkInfo.completed = false;
                        toDelete = false;
                        if (thisObject.checkInfo.children) {
                            thisObject.checkInfo.children.forEach(child => {
                                child.invisible = false;
                                child.completed = false;
                            });
                        }
                    }
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["D" /* getLocalStorage */])("PMMG-Checklists", updateStoredChecklists, [thisObject.checkInfo, thisObject.checklist, toDelete, thisObject.isChild]);
                }
            });
        }, 2500);
    }
}
const unfilledCircle = `<svg width="15" height="15" viewBox = "10 10 80 80">
  <path d="M 50 10 A 40 40 0 1 0 50 90 A 40 40 0 1 0 50 10 Z M 50 20 A 30 30 0 1 1 50 80 A 30 30 0 1 1 50 20 Z" fill="#f7a600" stroke="none" stroke-width="0" />
</svg>`;
const filledCircle = `<svg width="15" height="15" viewBox = "10 10 80 80">
  <path d="M 50 10 A 40 40 0 1 0 50 90 A 40 40 0 1 0 50 10 Z M 50 20 A 30 30 0 1 1 50 80 A 30 30 0 1 1 50 20 Z" fill="#f7a600" stroke="none" stroke-width="0" /><circle cx="50" cy="50" r="20" fill="#f7a600" stroke="none" stroke-width="2" />
</svg>`;
function checkSort(a, b) {
    if (a.checkInfo.duedate && b.checkInfo.duedate) {
        return a.checkInfo.duedate > b.checkInfo.duedate ? 1 : -1;
    }
    else if (a.checkInfo.duedate && !b.checkInfo.duedate) {
        return -1;
    }
    else if (!a.checkInfo.duedate && b.checkInfo.duedate) {
        return 1;
    }
    else {
        return a.checkInfo.created > b.checkInfo.created ? 1 : -1;
    }
}


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class Notes {
    constructor(tile, parameters) {
        this.name = "NOTE";
        this.tile = tile;
        this.parameters = parameters;
    }
    create_buffer() {
        CreateNotes(this.tile, this.parameters);
    }
    update_buffer() { }
    destroy_buffer() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notes;

const StorageName = "PMMG-Notes";
class NoteStructure {
    constructor() {
        this.wrapper = document.createElement("div");
        this.textbox = document.createElement("textarea");
        this.overlay = document.createElement("pre");
        this.wrapper.appendChild(this.textbox);
        this.wrapper.appendChild(this.overlay);
        this.textbox.classList.add("pb-note-textbox");
        this.overlay.classList.add("pb-note-overlay");
        this.textbox.spellcheck = false;
    }
}
function CreateNotes(tile, parameters) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tile) {
            throw new Error("Parameter 'tile' is required.");
        }
        if (!parameters) {
            throw new Error("Parameter 'parameters' is required.");
        }
        if (!parameters[0]) {
            throw new Error("Parameter 'parameters' must contain one or more values.");
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* clearChildren */])(tile);
        if (parameters.length == 1) {
            return yield displayNotesList(tile);
        }
        const noteName = parameters.slice(1).join("_");
        let nameDiv = document.createElement("div");
        nameDiv.classList.add("title", "note-title");
        nameDiv.textContent = noteName;
        nameDiv.style.paddingLeft = "10px";
        tile.append(nameDiv);
        const note = new NoteStructure();
        tile.appendChild(note.wrapper);
        yield displayStoredNote(note, noteName);
    });
}
function displayNotesList(tile) {
    return __awaiter(this, void 0, void 0, function* () {
        return Object(__WEBPACK_IMPORTED_MODULE_0__util__["E" /* getLocalStoragePromise */])(StorageName)
            .then(value => {
            generateNotesTable(value[StorageName], tile);
        });
    });
}
function generateNotesTable(notesStorage, tile) {
    if (!tile) {
        throw new Error("Parameter 'tile' is required.");
    }
    const notesTable = document.createElement("table");
    const thead = document.createElement("thead");
    const tr = document.createElement("tr");
    thead.append(tr);
    notesTable.append(thead);
    for (const title of ["Name", "Length", "Delete"]) {
        const th = document.createElement("th");
        th.textContent = title;
        th.style.paddingTop = "0";
        tr.append(th);
    }
    const tbody = document.createElement("tbody");
    notesTable.append(tbody);
    if (!notesStorage) {
        const tr = document.createElement("tr");
        tbody.append(tr);
        const td = document.createElement("td");
        td.colSpan = 3;
        td.textContent = "No Notes";
        tr.append(td);
        return;
    }
    const names = Array.from(Object.keys(notesStorage));
    names.forEach(noteName => {
        const noteText = notesStorage[noteName];
        const row = document.createElement("tr");
        tbody.append(row);
        const nameColumn = document.createElement("td");
        const lengthColumn = document.createElement("td");
        const buttonsColumn = document.createElement("td");
        row.append(nameColumn, lengthColumn, buttonsColumn);
        const openNoteLink = Object(__WEBPACK_IMPORTED_MODULE_0__util__["k" /* createLink */])(noteName, "XIT NOTES_" + noteName);
        nameColumn.append(openNoteLink);
        const noteCounter = document.createElement("div");
        noteCounter.innerHTML = noteText;
        const innerText = noteCounter.textContent || "";
        let lengthText = `${innerText.length.toLocaleString()} character`;
        if (noteText.length != 1)
            lengthText += "s";
        lengthColumn.append(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(lengthText));
        const deleteButton = document.createElement("button");
        deleteButton.classList.add("delete-button");
        deleteButton.textContent = "DELETE";
        deleteButton.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["O" /* showWarningDialog */])(tile, `Are you sure you want to delete the note "${noteName}"?`, "Confirm", function () {
                saveNote(noteName, null)
                    .then(() => {
                    row.remove();
                });
            });
        });
        buttonsColumn.append(deleteButton);
    });
    tile.append(notesTable);
}
function saveNote(noteName, noteText) {
    return __awaiter(this, void 0, void 0, function* () {
        let storage = yield Object(__WEBPACK_IMPORTED_MODULE_0__util__["E" /* getLocalStoragePromise */])(StorageName);
        if (!storage) {
            storage = {};
        }
        if (!storage[StorageName]) {
            storage[StorageName] = {};
        }
        if (!noteText || noteText.length === 0) {
            storage[StorageName][noteName] = undefined;
        }
        else {
            storage[StorageName][noteName] = noteText;
        }
        return yield Object(__WEBPACK_IMPORTED_MODULE_0__util__["L" /* setLocalStoragePromise */])(storage);
    });
}
function displayStoredNote(note, noteName) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let storageValue = yield Object(__WEBPACK_IMPORTED_MODULE_0__util__["E" /* getLocalStoragePromise */])(StorageName);
        let notesStorage = storageValue[StorageName];
        if (!notesStorage) {
            notesStorage = {};
        }
        var noteText = (_a = notesStorage[noteName]) !== null && _a !== void 0 ? _a : "";
        note.textbox.value = noteText;
        note.textbox.addEventListener("input", () => {
            noteText = note.textbox.value;
            saveNote(noteName, noteText)
                .catch(reason => {
                console.error("Failed to save note to local storage: %o", reason);
            });
            renderNoteText(note, noteText);
        });
        note.textbox.addEventListener("scroll", function () {
            note.overlay.scrollTop = note.textbox.scrollTop;
            note.overlay.scrollLeft = note.textbox.scrollLeft;
        });
        renderNoteText(note, noteText);
    });
}
function renderNoteText(note, noteText) {
    if (noteText[noteText.length - 1] == "\n") {
        noteText += " ";
    }
    noteText = noteText.replace(new RegExp("&", "g"), "&amp;").replace(new RegExp("<", "g"), "&lt;");
    const regexp = /\b(?:[a-zA-Z0-9]{1,3}\.(?:CI1|IC1|AI1|NC1|CI2|NC2))(?!<)/;
    var matches;
    var counter = 0;
    do {
        matches = noteText.match(regexp);
        if (!matches || !matches[0]) {
            break;
        }
        noteText = noteText.replace(regexp, "<span class=\"pb-note-link\">" + matches[0] + "</span>");
        counter++;
        if (counter > 100) {
            break;
        }
    } while (matches);
    note.overlay.innerHTML = noteText;
    const links = note.overlay.getElementsByClassName("pb-note-link");
    Array.from(links).forEach(link => {
        link.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("CXP " + link.textContent);
        });
    });
}


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);


class OrderETAs {
    constructor() {
        this.tag = "pb-order-eta";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_1__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        this.beautifyOrders();
    }
    beautifyOrders() {
        const elements = Array.from(document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].ProdQueue));
        elements.forEach(queue => {
            const prodSlots = Array.from(queue.children);
            var inQueue = false;
            var lineTimes = [];
            var timeElapsed = 0;
            prodSlots.forEach(prodItem => {
                if (prodItem.classList.contains(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].ProdItem)) {
                    try {
                        var duration;
                        if (inQueue) {
                            if (prodItem.children[0].children.length < 2) {
                                return;
                            }
                            lineTimes.sort(function (a, b) { return a - b; });
                            const minTime = lineTimes[0];
                            timeElapsed += minTime;
                            lineTimes.shift();
                            lineTimes = lineTimes.map(function (value) { return value - minTime; });
                            duration = Object(__WEBPACK_IMPORTED_MODULE_1__util__["I" /* parseDuration */])(prodItem.children[0].children[1].textContent);
                            lineTimes.push(duration);
                            if (!isNaN(duration + timeElapsed)) {
                                prodItem.children[0].children[1].appendChild(Object(__WEBPACK_IMPORTED_MODULE_1__util__["t" /* createTextSpan */])(` (${Object(__WEBPACK_IMPORTED_MODULE_1__util__["h" /* convertDurationToETA */])(duration + timeElapsed)})`, this.tag));
                            }
                        }
                        else {
                            duration = Object(__WEBPACK_IMPORTED_MODULE_1__util__["I" /* parseDuration */])(prodItem.children[1].children[1].textContent);
                            lineTimes.push(duration);
                            if (!isNaN(duration)) {
                                prodItem.children[1].children[1].appendChild(Object(__WEBPACK_IMPORTED_MODULE_1__util__["t" /* createTextSpan */])(` (${Object(__WEBPACK_IMPORTED_MODULE_1__util__["h" /* convertDurationToETA */])(duration)})`, this.tag));
                            }
                        }
                    }
                    catch (TypeError) {
                    }
                }
                else {
                    inQueue = true;
                }
            });
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = OrderETAs;



/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export generateBurns */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);


class ConsumableTimers {
    constructor(thresholds, userInfo) {
        this.thresholds = thresholds;
        this.userInfo = userInfo;
    }
    cleanup() {
        return;
    }
    run(allBuffers) {
        const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("WF", allBuffers);
        if (!buffers) {
            return;
        }
        ;
        buffers.forEach(buffer => {
            generateBurns(buffer, this.thresholds || [3, 7], this.userInfo);
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ConsumableTimers;

function generateBurns(buffer, thresholds, userInfo) {
    if (!userInfo["PMMG-User-Info"]) {
        return;
    }
    const workforce = userInfo["PMMG-User-Info"]["workforce"];
    const inventories = userInfo["PMMG-User-Info"]["storage"];
    if (buffer.classList.contains("pb-loaded")) {
        return;
    }
    const nameElem = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].WorkforceConsumptionTable);
    if (!nameElem || !nameElem.textContent)
        return;
    const name = Object(__WEBPACK_IMPORTED_MODULE_0__util__["H" /* parseBaseName */])(nameElem.textContent);
    if (!name) {
        return;
    }
    const headers = Array.from(buffer.querySelectorAll("table > thead > tr"));
    headers.forEach(header => {
        const totalHeader = header.children[2];
        const burnHeader = header.children[3];
        totalHeader.textContent = "Total";
        if (burnHeader.children != undefined && burnHeader.children[0] != undefined) {
            burnHeader.removeChild(burnHeader.children[0]);
        }
        burnHeader.textContent = "Burn";
    });
    const planetWorkforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(name, workforce);
    const planetInv = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(name, inventories, true);
    const planetBurn = Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* calculateBurn */])(null, planetWorkforce, planetInv);
    const elements = Array.from(buffer.querySelectorAll("table > tbody > tr"));
    elements.forEach(targetRow => {
        if (targetRow.childElementCount < 5) {
            return;
        }
        const outputData = targetRow.children[4];
        const totalData = targetRow.children[3];
        if (outputData.textContent != "") {
            const ticker = targetRow.children[0].textContent;
            if (!ticker) {
                return;
            }
            const burnAmount = planetBurn[ticker] ? planetBurn[ticker]["DailyAmount"] : 0;
            var daysLeft = planetBurn[ticker] ? planetBurn[ticker]["DaysLeft"] : 0;
            if (burnAmount != 0) {
                if (daysLeft <= thresholds[0]) {
                    if (!outputData.classList.contains("burn-red"))
                        outputData.classList.add("burn-red");
                }
                else if (daysLeft <= thresholds[1]) {
                    if (!outputData.classList.contains("burn-yellow"))
                        outputData.classList.add("burn-yellow");
                }
                else if (daysLeft >= 500) {
                    if (!outputData.classList.contains("burn-green")) {
                        outputData.classList.add("burn-green");
                        daysLeft = "∞";
                    }
                }
                else {
                    if (!outputData.classList.contains("burn-green"))
                        outputData.classList.add("burn-green");
                }
                if (!isNaN(daysLeft)) {
                    daysLeft = daysLeft.toFixed(0);
                }
                if (daysLeft == 1) {
                    daysLeft += " Day";
                }
                else {
                    daysLeft += " Days";
                }
            }
            else {
                daysLeft = "";
            }
            var firstChild = outputData.firstChild;
            if (firstChild != null) {
                outputData.removeChild(firstChild);
            }
            outputData.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(daysLeft));
            firstChild = totalData.firstChild;
            if (firstChild != null) {
                totalData.removeChild(firstChild);
            }
            totalData.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(burnAmount == 0 ? "" : (-burnAmount).toFixed(2)));
        }
    });
    buffer.classList.add("pb-loaded");
    return;
}


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class FleetETAs {
    constructor() {
        this.tag = "pb-flt-eta";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["z" /* genericCleanup */])(this.tag);
    }
    run(allBuffers) {
        const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("FLT", allBuffers);
        if (buffers == undefined)
            return;
        for (let buffer of buffers) {
            const elements = Array.from(buffer.querySelectorAll("table > tbody > tr"));
            elements.forEach(targetRow => {
                const etaData = targetRow.children[7];
                if (etaData.textContent != "") {
                    const eta = Object(__WEBPACK_IMPORTED_MODULE_0__util__["h" /* convertDurationToETA */])(Object(__WEBPACK_IMPORTED_MODULE_0__util__["I" /* parseDuration */])(etaData.textContent));
                    etaData.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(` (${eta})`, this.tag));
                }
            });
        }
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FleetETAs;



/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameProperties__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(0);



class PostLM {
    constructor(webData) {
        this.cleanups = [];
        this.tag = "pb-post-lm-price";
        this.webData = webData;
    }
    cleanup() {
        this.cleanups.forEach((f, i) => {
            f();
            delete this.cleanups[i];
        });
        Object(__WEBPACK_IMPORTED_MODULE_2__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        Array.from(document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].LMPostForm)).forEach(form => {
            const type = Array.from(form.getElementsByClassName("StaticInput__static___Vpn1u0n forms__static___a4biDi4"));
            var shipping = false;
            for (let elem of type) {
                if (elem.textContent == "SHIPPING") {
                    shipping = true;
                    break;
                }
            }
            const commodity = document.evaluate("div[label/span[text()='Commodity']]//input", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            const amountInput = document.evaluate("div[label/span[text()='Amount']]//input", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            const totalPriceInput = document.evaluate("div[label/span[text()='Total price']]//input", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            const currencyInput = document.evaluate("div[label/span[text()='Currency']]//select", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            var displayElement = Object(__WEBPACK_IMPORTED_MODULE_2__util__["t" /* createTextSpan */])("--", this.tag);
            if (shipping && commodity.value != "") {
                totalPriceInput.parentNode.insertBefore(displayElement, totalPriceInput);
                const calculatePricePerUnit = () => {
                    const amount = parseInt(amountInput.value);
                    const total = parseFloat(totalPriceInput.value);
                    const matInfo = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][commodity.value];
                    const currency = currencyInput.value;
                    var currencySymbol;
                    if (currency != undefined) {
                        currencySymbol = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["b" /* CurrencySymbols */][currency];
                    }
                    else {
                        currencySymbol = "";
                    }
                    if (currencySymbol == undefined) {
                        currencySymbol = "";
                    }
                    if (matInfo == undefined || matInfo == null) {
                        return;
                    }
                    const unit = matInfo[1] >= matInfo[2] ? "t" : "m³";
                    const weightvolume = Math.max(matInfo[1], matInfo[2]);
                    if (isNaN(weightvolume) || isNaN(total)) {
                        displayElement.textContent = "-- t | " + currencySymbol + "-- / t";
                    }
                    else {
                        displayElement.textContent = (amount * weightvolume).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + " " + unit + " | " + currencySymbol + (total / (amount * weightvolume)).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + " / " + unit;
                    }
                };
                calculatePricePerUnit();
            }
            else if (!this.webData["custom_prices"] || Object.keys(this.webData["custom_prices"]).length == 0) {
                totalPriceInput.parentNode.insertBefore(displayElement, totalPriceInput);
                const calculatePricePerUnit = () => {
                    const amount = parseInt(amountInput.value);
                    const total = parseFloat(totalPriceInput.value);
                    const currency = currencyInput.value;
                    var currencySymbol;
                    if (currency) {
                        currencySymbol = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["b" /* CurrencySymbols */][currency];
                    }
                    else {
                        currencySymbol = "";
                    }
                    if (!currencySymbol) {
                        currencySymbol = "";
                    }
                    if (isNaN(total) || isNaN(amount)) {
                        return;
                    }
                    displayElement.textContent = currencySymbol + (total / amount).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " ea";
                    return;
                };
                calculatePricePerUnit();
            }
            else if (commodity.value && __WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][commodity.value]) {
                totalPriceInput.parentNode.insertBefore(displayElement, totalPriceInput);
                const calculatePricePerUnit = () => {
                    const amount = parseInt(amountInput.value);
                    const total = parseFloat(totalPriceInput.value);
                    const currency = currencyInput.value;
                    var currencySymbol;
                    if (!currency) {
                        currencySymbol = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["b" /* CurrencySymbols */][currency] || "";
                    }
                    else {
                        currencySymbol = "";
                    }
                    var price = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][commodity.value] ? this.webData["custom_prices"][__WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][commodity.value][0]] : "";
                    if (!price) {
                        price = "";
                    }
                    else if (isNaN(amount)) {
                        price = "";
                    }
                    else {
                        price = " | " + (price * amount).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " Total";
                    }
                    displayElement.textContent = currencySymbol + (total / amount).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " ea" + (price);
                };
                calculatePricePerUnit();
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PostLM;



/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class ShippingAds {
    constructor() {
        this.tag = "pb-shipping-ads";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_1__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        const elements = document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].LMCommodityAdText);
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            const text = element.textContent;
            const matches = text && text.match(/(?:SHIPPING)\s([\d,.]+)t\s\/\s([\d,.]+)m³\s@\s([\d,.]+)\s[A-Z]+\sfrom/);
            if (matches && matches.length > 3) {
                const totalCost = matches[3];
                const tonnage = parseFloat(matches[1].replace(/[,.]/g, '')) / 100;
                const size = parseFloat(matches[2].replace(/[,.]/g, '')) / 100;
                var unit;
                var count;
                if (tonnage > size) {
                    unit = 't';
                    count = tonnage;
                }
                else {
                    unit = 'm³';
                    count = size;
                }
                const totalCents = parseInt(totalCost.replace(/[,.]/g, ''));
                const perItem = (totalCents / count / 100).toLocaleString(undefined, { maximumFractionDigits: 2 });
                var priceSpan;
                Array.from(element.childNodes).forEach(node => {
                    if (node.nodeValue && node.nodeValue.slice(1) in __WEBPACK_IMPORTED_MODULE_2__GameProperties__["b" /* CurrencySymbols */]) {
                        priceSpan = node;
                    }
                });
                if (!priceSpan) {
                    return;
                }
                priceSpan.after(Object(__WEBPACK_IMPORTED_MODULE_1__util__["t" /* createTextSpan */])(` (${perItem}/${unit})`, this.tag));
            }
        }
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ShippingAds;



/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);


class QueueLoad {
    constructor() {
        this.tag = "pb-queue-load";
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_1__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        this.calculateQueueLoad();
    }
    getEtaFromRow(row) {
        const etaCell = row.querySelectorAll("td").item(5);
        if (etaCell) {
            const etaSpan = etaCell.querySelector("span");
            if (etaSpan) {
                const eta = Object(__WEBPACK_IMPORTED_MODULE_1__util__["I" /* parseDuration */])(etaSpan.textContent);
                return eta;
            }
        }
        return 0;
    }
    calculateQueueLoad() {
        const tables = Array.from(document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].ProdQueueTable));
        tables.forEach(table => {
            const rows = Array.from(table.querySelectorAll("tbody:nth-of-type(2) > tr"));
            const totalTime = rows.reduce((total, row) => {
                const n = this.getEtaFromRow(row);
                return total + n;
            }, 0);
            if (totalTime > 0) {
                rows.forEach(row => {
                    const eta = this.getEtaFromRow(row);
                    const percent = (eta / totalTime * 100).toLocaleString(undefined, { maximumFractionDigits: 2 });
                    const textField = row.querySelectorAll("td").item(6);
                    if (textField && eta > 0) {
                        const span = Object(__WEBPACK_IMPORTED_MODULE_1__util__["t" /* createTextSpan */])(` ${percent}%`, this.tag);
                        textField.appendChild(span);
                    }
                });
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = QueueLoad;



/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class Notifications {
    constructor() {
        this.tag = "pb-nots";
    }
    cleanup(full = false) {
        full && Object(__WEBPACK_IMPORTED_MODULE_1__util__["z" /* genericCleanup */])(this.tag);
        return;
    }
    run() {
        const elements = document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].Notification);
        elements.forEach(element => {
            if (element.firstChild && element.firstChild.classList.contains(this.tag)) {
                return;
            }
            const textContent = element.children[0].textContent;
            if (textContent == null) {
                return;
            }
            const text = textContent.toLowerCase();
            var foundType = false;
            Searchers.forEach(search => {
                if (foundType) {
                    return;
                }
                const match = text.match(new RegExp(search[0]));
                if (match != null) {
                    foundType = true;
                    const typeSpan = document.createElement("div");
                    typeSpan.textContent = search[1].toUpperCase();
                    typeSpan.classList.add(this.tag);
                    typeSpan.classList.add("notification");
                    typeSpan.style.color = search[2];
                    element.insertBefore(typeSpan, element.children[0]);
                    var matches;
                    var notText = element.children[1].textContent;
                    if (notText == null) {
                        return;
                    }
                    notText = notText.replace(/Chamber of Global Commerce/, "COGC");
                    switch (search[0]) {
                        case "produced":
                            notText = notText.replace(/at your base /, "");
                            notText = notText.replace(/One /, "1 ");
                            notText = notText.replace(/ have been/, "");
                            notText = notText.replace(/ unit[s]? of/, "");
                            matches = notText.match(/ ([A-z -]+) produced/);
                            if (matches != null && matches[1] != undefined && __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]] != undefined) {
                                notText = notText.replace(new RegExp(matches[1]), __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]][0]);
                            }
                            break;
                        case "trade":
                            matches = notText.match(/your ([A-z -]+) order/);
                            if (matches != null && matches[1] != undefined && __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]] != undefined) {
                                notText = notText.replace(new RegExp(matches[1]), __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]][0]);
                            }
                        case "order filled":
                            notText = notText.replace(/ Commodity Exchange/, "");
                            matches = notText.match(/([A-z -]+) order/);
                            if (matches != null && matches[1] != undefined && __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]] != undefined) {
                                notText = notText.replace(new RegExp(matches[1]), __WEBPACK_IMPORTED_MODULE_2__GameProperties__["h" /* Materials */][matches[1]][0]);
                            }
                            break;
                        case "accepted":
                            notText = notText.replace(/ the/, "");
                            notText = notText.replace(/ local market/, "");
                            break;
                        case "contract":
                            notText = notText.replace(/Your partner /, "");
                            break;
                        case "arrived at":
                            notText = notText.replace(/its destination /, "");
                            break;
                        case "cogc":
                        case "chamber of global commerce":
                            notText = notText.replace(/ a new economic program/, "");
                            notText = notText.replace(/ Advertising Campaign:/, "");
                            break;
                    }
                    element.children[1].textContent = notText;
                }
            });
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notifications;

const Searchers = [
    ["contract", "contract", "rgb(247, 166, 0)"],
    ["our corporation", "corp", "#8f52cc"],
    ["accepted our invitation", "corp", "#8f52cc"],
    ["produced", "produced", "#3fa2de"],
    ["accepted", "advert", "#449c57"],
    ["expired", "advert", "#449c57"],
    ["trade", "trade", "#008000"],
    ["order filled", "order", "#cc2929"],
    ["arrived at", "arrival", "#b336b3"],
    ["report", "report", "#00aa77"],
    ["election", "election", "#8f52cc"],
    ["governor", "governor", "#8f52cc"],
    ["rules", "rules", "#8f52cc"],
    ["cogc", "COGC", "#8f52cc"],
    ["chamber of global commerce", "COGC", "#8f52cc"],
    ["expert", "expert", "#ff8a00"],
    ["population infrastructure project", "POPI", "#8f52cc"],
    ["apex", "update", "#00aa77"],
    ["warehous", "war", "#cc2929"],
    ["shipbuilding project", "ship", "#8f52cc"],
    ["planetary project", "infra", "#8f52cc"],
    ["consumable supplies", "supplies", "#b37b32"]
];


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getPrices;
/* harmony export (immutable) */ __webpack_exports__["a"] = getCXPrices;
/* unused harmony export getBurn */
/* unused harmony export getGroupBurn */
/* unused harmony export getBurnSettings */
/* unused harmony export getCXOS */
/* unused harmony export getContracts */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

function getPrices(webData, sheetURL, sheetName) {
    if (!sheetURL || !sheetName) {
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: Custom Prices Timeout");
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                webData["custom_prices"] = {};
                console.log("PMMG: Retreived Custom Prices");
                var priceData = JSON.parse(xhr.responseText);
                if (priceData.error) {
                    console.log("PMMG: Custom Prices " + priceData.error);
                    return;
                }
                else if (!priceData.prices) {
                    console.log("PMMG: No Data from Custom Prices");
                }
                priceData.prices.forEach(price => {
                    webData["custom_prices"][price[0]] = price[1];
                });
                console.log(webData["custom_prices"]);
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from Custom Prices");
            }
        }
        return;
    };
    const sheetID = sheetURL.match(/\/d\/([^\/]+)/);
    if (!sheetID || !sheetID[1]) {
        return;
    }
    var address = "https://script.google.com/macros/s/AKfycbwdxGx-OBVslFeXSSv-F_d55X_BTPs20vTMNiT8D9eIAkbcckXh9XAkX9fdBMIv1XrY/exec?id=" + sheetID[1] + "&sheet=" + sheetName;
    xhr.timeout = 10000;
    xhr.open("GET", address, true);
    xhr.send(null);
    return;
}
function getCXPrices(userInfo) {
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: CX Price Timeout");
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived CX Prices");
                var priceData = JSON.parse(xhr.responseText);
                const wantedResults = ["AskPrice", "BidPrice", "Average", "AskAvail", "BidAvail"];
                const CXs = ["AI1", "CI1", "CI2", "IC1", "NC1", "NC2"];
                userInfo["PMMG-User-Info"]["cx_prices"] = {};
                CXs.forEach(CX => {
                    userInfo["PMMG-User-Info"]["cx_prices"][CX] = {};
                    wantedResults.forEach(wanted => {
                        userInfo["PMMG-User-Info"]["cx_prices"][CX][wanted] = {};
                        priceData.forEach(mat => {
                            userInfo["PMMG-User-Info"]["cx_prices"][CX][wanted][mat["Ticker"]] = mat[CX + "-" + wanted];
                        });
                    });
                });
                userInfo["PMMG-User-Info"]["cx_prices"]["Age"] = Date.now();
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(userInfo);
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from Rain Prices");
            }
        }
        return;
    };
    xhr.timeout = 10000;
    xhr.open("GET", "https://rest.fnar.net" + "/rain/prices", true);
    xhr.send(null);
    return;
}
function getBurn(webData, username, apikey) {
    if (!webData["burn"]) {
        webData["burn"] = {};
    }
    if (!apikey || !username) {
        return;
    }
    webData["burn"][username] = [];
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: FIO Burn Timeout");
        webData["burn"][username] = undefined;
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived Burn from FIO");
                var burnData = JSON.parse(xhr.responseText);
                burnData.forEach(data => {
                    webData["burn"][username].push(data);
                });
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from FIO");
                webData["burn"][username] = undefined;
            }
        }
        return;
    };
    xhr.timeout = 20000;
    var address = "https://rest.fnar.net" + "/fioweb/burn/user/" + username;
    xhr.open("GET", address, true);
    xhr.setRequestHeader("Authorization", apikey);
    xhr.send(null);
    return;
}
function getGroupBurn(webData, groupid, apikey) {
    if (!webData["burn"]) {
        webData["burn"] = {};
    }
    if (!apikey || !groupid) {
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: FIO Burn Timeout");
        webData["burn"][groupid] = undefined;
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived Group Burn from FIO");
                var burnData = JSON.parse(xhr.responseText);
                webData["burn"][groupid] = [];
                burnData.forEach(data => {
                    webData["burn"][groupid].push(data);
                });
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from FIO");
                webData["burn"][groupid] = undefined;
            }
        }
        return;
    };
    xhr.timeout = 20000;
    var address = "https://rest.fnar.net" + "/fioweb/burn/group/" + groupid;
    xhr.open("GET", address, true);
    xhr.setRequestHeader("Authorization", apikey);
    xhr.send(null);
    return;
}
function getBurnSettings(webData, username, apikey) {
    webData["burn_settings"] = [];
    webData["burn_settings"].push("loading");
    if (!apikey || !username) {
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: FIO Burn Settings Timeout");
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived Burn Settings from FIO");
                webData["burn_settings"][0] = "loaded";
                var burnData = JSON.parse(xhr.responseText);
                burnData.forEach(data => {
                    webData["burn_settings"].push(data);
                });
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from FIO");
            }
        }
        return;
    };
    xhr.timeout = 10000;
    var address = "https://rest.fnar.net" + "/usersettings/burnrate/" + username;
    xhr.open("GET", address, true);
    xhr.setRequestHeader("Authorization", apikey);
    xhr.send(null);
    return;
}
function getCXOS(webData, username, apikey) {
    if (!apikey || !username) {
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: FIO CXOS Timeout");
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived CXOS from FIO");
                var cxosData = JSON.parse(xhr.responseText);
                webData["cxos"] = [];
                cxosData.forEach(data => {
                    webData["cxos"].push(data);
                });
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from FIO");
            }
        }
        return;
    };
    xhr.timeout = 10000;
    var address = "https://rest.fnar.net" + "/cxos/" + username;
    xhr.open("GET", address, true);
    xhr.setRequestHeader("Authorization", apikey);
    xhr.send(null);
    return;
}
function getContracts(webData, username, apikey) {
    if (!webData["contracts"]) {
        webData["contracts"] = {};
    }
    if (!apikey || !username) {
        return;
    }
    webData["contracts"][username] = [];
    var xhr = new XMLHttpRequest();
    xhr.ontimeout = function () {
        console.log("PMMG: FIO Contract Timeout");
        webData["contracts"][username] = undefined;
    };
    xhr.onreadystatechange = function () {
        if (xhr.readyState == XMLHttpRequest.DONE) {
            try {
                console.log("PMMG: Retreived Contracts from FIO");
                var burnData = JSON.parse(xhr.responseText);
                burnData.forEach(data => {
                    webData["contracts"][username].push(data);
                });
            }
            catch (SyntaxError) {
                console.log("PMMG: Bad Data from FIO");
                webData["contracts"][username] = undefined;
            }
        }
        return;
    };
    xhr.timeout = 20000;
    var address = "https://rest.fnar.net" + "/contract/allcontracts";
    xhr.open("GET", address);
    xhr.setRequestHeader("Authorization", apikey);
    xhr.send(null);
    return;
}


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(0);



class ScreenUnpack {
    cleanup(full = false) {
        full && Object(__WEBPACK_IMPORTED_MODULE_2__util__["z" /* genericCleanup */])(this.tag);
    }
    constructor(exclusions) {
        this.tag = "pb-screens";
        exclusions = exclusions == undefined ? [] : exclusions;
        this.exclusions = [];
        exclusions.forEach((ex) => {
            this.exclusions.push(ex.toUpperCase());
        });
    }
    run() {
        const navbar = document.getElementById(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].ScreenControls);
        if (navbar == null) {
            return;
        }
        if (navbar.children[navbar.children.length - 1].classList.contains(this.tag)) {
            return;
        }
        const navbarItemClassList = navbar.children[2].classList;
        const nbitMainClassList = navbar.children[2].children[0].classList;
        const nbitUnderlineClassList = navbar.children[2].children[1].classList;
        const menu = navbar.children[1].children[1];
        var links = [];
        Array.from(menu.children).forEach((cn) => {
            if (cn.children.length == 4 &&
                !this.exclusions.includes(String(cn.children[1].innerHTML).toUpperCase())) {
                links.push({
                    Name: cn.children[1].innerHTML,
                    Link: cn.children[1].href,
                });
            }
        });
        const spacerDiv = document.createElement("div");
        spacerDiv.classList.add(this.tag);
        spacerDiv.style.display = "inline-block";
        spacerDiv.style.width = "5px";
        navbar.appendChild(spacerDiv);
        const buttons = links.map((link) => {
            const button = `<div class="${navbarItemClassList}">
                          <a class="${nbitMainClassList}" style="color: inherit" href="${link.Link}">${link.Name}</a>
                          <div class="${nbitUnderlineClassList}"></div>
                      </div>`;
            const buttonElem = Object(__WEBPACK_IMPORTED_MODULE_2__util__["m" /* createNode */])(button);
            buttonElem.classList.add(this.tag);
            return buttonElem;
        });
        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                buttons.forEach((b) => {
                    b.children[1].className = "";
                    b.children[1].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_1__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ScreenUnderlineUntoggled));
                });
                button.children[1].className = "";
                button.children[1].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_1__Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].ScreenUnderlineToggled));
            });
            navbar.appendChild(button);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ScreenUnpack;



/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(0);



class Sidebar {
    constructor(buttons) {
        this.tag = "pb-sidebar";
        this.defaultButtons = ["BS", "CONT", "COM", "CORP", "CXL", "FIN", "FLT", "INV", "MAP", "PROD", "LEAD", "CMDS"];
        this.buttons = buttons;
    }
    cleanup(full = false) {
        full && Object(__WEBPACK_IMPORTED_MODULE_2__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        const sidebar = document.getElementById(__WEBPACK_IMPORTED_MODULE_0__Selector__["a" /* Selector */].LeftSidebar);
        if (!this.buttons) {
            this.buttons = [["BS", "BS"], ["CONT", "CONTS"], ["COM", "COM"], ["CORP", "CORP"], ["CXL", "CXL"], ["FIN", "FIN"], ["FLT", "FLT"], ["INV", "INV"], ["MAP", "MAP"], ["PROD", "PROD"], ["LEAD", "LEAD"], ["CMDS", "CMDS"], ["SET", "XIT SETTINGS"], ["HELP", "XIT HELP"]];
        }
        if (!sidebar) {
            return;
        }
        this.defaultButtons.forEach(defaultButton => {
            var enabled = false;
            for (let option of this.buttons) {
                if (option[0].toUpperCase() === defaultButton) {
                    enabled = true;
                    break;
                }
            }
            if (!enabled) {
                Array.from(sidebar.children).forEach(child => {
                    if (child.firstChild != null && (child.firstChild.textContent || "").toUpperCase() === defaultButton) {
                        child.classList.add("hidden-element");
                        Array.from(child.children).forEach(childChild => { childChild.classList.add("hidden-element"); });
                    }
                });
            }
        });
        if (sidebar.children[sidebar.children.length - 1].classList.contains(this.tag)) {
            return;
        }
        this.buttons.forEach(buttonInfo => {
            if (this.defaultButtons.includes(buttonInfo[0].toUpperCase())) {
                return;
            }
            const button = document.createElement("div");
            const buttonText = Object(__WEBPACK_IMPORTED_MODULE_2__util__["t" /* createTextSpan */])(buttonInfo[0].toUpperCase(), this.tag);
            const sliver = document.createElement("div");
            button.classList.add(this.tag);
            sliver.classList.add(this.tag);
            button.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarButton);
            buttonText.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarText);
            sliver.classList.add(...__WEBPACK_IMPORTED_MODULE_1__Style__["h" /* Style */].SidebarSliver);
            button.appendChild(buttonText);
            button.appendChild(sliver);
            sidebar.appendChild(button);
            button.addEventListener("click", function () { Object(__WEBPACK_IMPORTED_MODULE_2__util__["N" /* showBuffer */])(buttonInfo[1]); });
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sidebar;



/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GameProperties__ = __webpack_require__(3);



class CommandCorrecter {
    cleanup() {
        return;
    }
    run() {
        Array.from(document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferArea)).forEach(buffer => {
            if (buffer.children.length > 1) {
                const bufferField = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferTextField);
                if (bufferField == null) {
                    return;
                }
                var bufferText = bufferField.value.toUpperCase() || "";
                if (__WEBPACK_IMPORTED_MODULE_2__GameProperties__["j" /* PlanetCommands */].includes(bufferText.split(" ")[0])) {
                    var replaced = false;
                    Object.keys(__WEBPACK_IMPORTED_MODULE_2__GameProperties__["k" /* PlanetNames */]).forEach(name => {
                        if (bufferText.includes(" " + name)) {
                            bufferText = bufferText.replace(" " + name, " " + __WEBPACK_IMPORTED_MODULE_2__GameProperties__["k" /* PlanetNames */][name]);
                            replaced = true;
                        }
                    });
                    if (replaced) {
                        bufferField.value = "";
                        Object(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* changeValue */])(bufferField, bufferText);
                        if (bufferField.parentElement == null || bufferField.parentElement.parentElement == null) {
                            return;
                        }
                        bufferField.parentElement.parentElement.requestSubmit();
                    }
                }
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CommandCorrecter;



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class CalculatorButton {
    constructor() {
        this.tag = "pb-calc";
    }
    cleanup(full = false) {
        full && Object(__WEBPACK_IMPORTED_MODULE_0__util__["z" /* genericCleanup */])(this.tag);
    }
    run(allBuffers) {
        const calcTags = ["LM", "CX", "XIT"];
        calcTags.forEach(tag => {
            const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])(tag, allBuffers);
            buffers.forEach(buffer => {
                if ((buffer.children[3] || buffer.children[2]).firstChild.classList.contains(this.tag) || (buffer.children[3] || buffer.children[2]).children[1].classList.contains(this.tag)) {
                    return;
                }
                const calcDiv = document.createElement("div");
                calcDiv.classList.add(this.tag);
                calcDiv.classList.add("button-upper-right");
                calcDiv.style.marginTop = "-3px";
                (buffer.children[3] || buffer.children[2]).insertBefore(calcDiv, (buffer.children[3] || buffer.children[2]).firstChild.id == "refresh" ? (buffer.children[3] || buffer.children[2]).children[1] : (buffer.children[3] || buffer.children[2]).firstChild);
                const svgContainer = document.createElement("div");
                const svg = document.createElement("svg");
                svgContainer.appendChild(svg);
                svg.outerHTML = `<svg height="12px" width="12px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
								 viewBox="0 0 460 460" xml:space="preserve">
							<g id="XMLID_241_">
								<g>
									<path d="M369.635,0H90.365C73.595,0,60,13.595,60,30.365v399.27C60,446.405,73.595,460,90.365,460h279.27
										c16.77,0,30.365-13.595,30.365-30.365V30.365C400,13.595,386.405,0,369.635,0z M108.204,343.61v-43.196
										c0-3.451,2.797-6.248,6.248-6.248h43.196c3.451,0,6.248,2.797,6.248,6.248v43.196c0,3.451-2.797,6.248-6.248,6.248h-43.196
										C111.001,349.858,108.204,347.06,108.204,343.61z M108.204,256.61v-43.196c0-3.451,2.797-6.248,6.248-6.248h43.196
										c3.451,0,6.248,2.797,6.248,6.248v43.196c0,3.451-2.797,6.248-6.248,6.248h-43.196C111.001,262.858,108.204,260.06,108.204,256.61
										z M308.891,421H151.109c-11.046,0-20-8.954-20-20c0-11.046,8.954-20,20-20h157.782c11.046,0,20,8.954,20,20
										C328.891,412.046,319.937,421,308.891,421z M208.402,294.165h43.196c3.451,0,6.248,2.797,6.248,6.248v43.196
										c0,3.451-2.797,6.248-6.248,6.248h-43.196c-3.451,0-6.248-2.797-6.248-6.248v-43.196
										C202.154,296.963,204.951,294.165,208.402,294.165z M202.154,256.61v-43.196c0-3.451,2.797-6.248,6.248-6.248h43.196
										c3.451,0,6.248,2.797,6.248,6.248v43.196c0,3.451-2.797,6.248-6.248,6.248h-43.196C204.951,262.858,202.154,260.06,202.154,256.61
										z M345.548,349.858h-43.196c-3.451,0-6.248-2.797-6.248-6.248v-43.196c0-3.451,2.797-6.248,6.248-6.248h43.196
										c3.451,0,6.248,2.797,6.248,6.248v43.196h0C351.796,347.061,348.999,349.858,345.548,349.858z M345.548,262.858h-43.196
										c-3.451,0-6.248-2.797-6.248-6.248v-43.196c0-3.451,2.797-6.248,6.248-6.248h43.196c3.451,0,6.248,2.797,6.248,6.248v43.196h0
										C351.796,260.061,348.999,262.858,345.548,262.858z M354,149.637c0,11.799-9.565,21.363-21.363,21.363H127.364
										C115.565,171,106,161.435,106,149.637V62.363C106,50.565,115.565,41,127.364,41h205.273C344.435,41,354,50.565,354,62.363V149.637
										z"/>
								</g>
							</g>
							</svg>`;
                calcDiv.appendChild(svgContainer);
                calcDiv.addEventListener("click", function () { Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT CALCULATOR"); });
            });
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CalculatorButton;



/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);


class ImageCreator {
    constructor() {
        this.tag = "pb-image";
    }
    cleanup() {
        return;
    }
    run(allBuffers) {
        const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("COM", allBuffers);
        if (!buffers) {
            return;
        }
        ;
        buffers.forEach(buffer => {
            const chatLinks = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
            const chatArea = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ChatArea);
            if (!chatArea) {
                return;
            }
            Array.from(chatLinks).forEach(link => {
                const linkText = link.textContent;
                if (!linkText || link.classList.contains(this.tag)) {
                    return;
                }
                if (!isImage(linkText)) {
                    return;
                }
                const img = document.createElement("img");
                img.classList.add("chat-image");
                img.src = linkText;
                if (!link.parentElement) {
                    return;
                }
                link.parentElement.appendChild(document.createElement("br"));
                link.parentElement.appendChild(img);
                link.classList.add(this.tag);
                img.addEventListener('load', function () {
                    chatArea.scrollBy(0, (img.offsetHeight || 0) + 2);
                });
                return;
            });
            return;
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ImageCreator;

function isImage(url) {
    return /\.(jpg|jpeg|png|webp|avif|gif|svg)$/.test(url);
}


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__GameProperties__ = __webpack_require__(3);




class InventoryOrganizer {
    constructor(userInfo, result) {
        this.tag = "pb-inv-org";
        this.userInfo = userInfo;
        this.result = result;
    }
    cleanup() {
        return;
    }
    run(allBuffers) {
        const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("INV ", allBuffers);
        const result = this.result;
        if (!buffers || !result || !result["PMMGExtended"]) {
            return;
        }
        ;
        if (this.result["PMMGExtended"]["inventory_sorting"]) {
            this.result["PMMGExtended"]["inventory_sorting"] = undefined;
        }
        if (!this.result["PMMGExtended"]["selected_sorting"]) {
            this.result["PMMGExtended"]["selected_sorting"] = [];
        }
        ;
        if (!this.result["PMMGExtended"]["sorting"]) {
            this.result["PMMGExtended"]["sorting"] = [];
        }
        ;
        const screenNameElem = document.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ScreenName);
        const screenName = screenNameElem ? screenNameElem.textContent : "";
        if (!screenName) {
            return;
        }
        const tag = this.tag;
        buffers.forEach(buffer => {
            const sortOptions = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].InventorySortOptions);
            if (!sortOptions) {
                return;
            }
            const baseNameElem = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferHeader);
            if (!baseNameElem) {
                return;
            }
            const invName = Object(__WEBPACK_IMPORTED_MODULE_0__util__["J" /* parseInvName */])(baseNameElem.textContent);
            if (!invName) {
                return;
            }
            const planetNameElem = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
            const planetName = planetNameElem ? Object(__WEBPACK_IMPORTED_MODULE_0__util__["K" /* parsePlanetName */])(planetNameElem.textContent) : "";
            var burn;
            if (this.userInfo["PMMG-User-Info"] && Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetName, this.userInfo["PMMG-User-Info"]["workforce"])) {
                const workforce = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetName, this.userInfo["PMMG-User-Info"]["workforce"]);
                const production = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetName, this.userInfo["PMMG-User-Info"]["production"]);
                const inventory = Object(__WEBPACK_IMPORTED_MODULE_0__util__["y" /* findCorrespondingPlanet */])(planetName, this.userInfo["PMMG-User-Info"]["storage"]);
                burn = Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* calculateBurn */])(production, workforce, inventory);
            }
            const inventory = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].Inventory);
            if (!inventory || !inventory.parentElement) {
                return;
            }
            if (!inventory.classList.contains("pb-monitored")) {
                inventory.classList.add("pb-monitored");
                sortInventory(inventory, sortOptions, result, this.tag, screenName, invName, burn);
                let onMutationsObserved = function () {
                    observer.disconnect();
                    setTimeout(() => {
                        observer.observe(target, config);
                    }, 250);
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["P" /* targetedCleanup */])(tag, inventory);
                    sortInventory(inventory, sortOptions, result, tag, screenName, invName, burn);
                    return;
                };
                let target = inventory;
                let config = { childList: true, subtree: true };
                let MutationObserver = window["MutationObserver"] || window["WebKitMutationObserver"];
                let observer = new MutationObserver(onMutationsObserved);
                observer.observe(target, config);
            }
            return;
        });
        const shipBuffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("SHPI ", allBuffers);
        if (!shipBuffers) {
            return;
        }
        ;
        shipBuffers.forEach(buffer => {
            const sortOptions = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].InventorySortOptions);
            if (!sortOptions) {
                return;
            }
            const shipNameElem = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferHeader);
            if (!shipNameElem) {
                return;
            }
            const shipName = Object(__WEBPACK_IMPORTED_MODULE_0__util__["J" /* parseInvName */])(shipNameElem.textContent);
            if (!shipName) {
                return;
            }
            const inventory = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].Inventory);
            if (!inventory || !inventory.parentElement) {
                return;
            }
            if (!inventory.classList.contains("pb-monitored")) {
                inventory.classList.add("pb-monitored");
                sortInventory(inventory, sortOptions, result, tag, screenName, shipName, undefined);
                let onMutationsObserved = function () {
                    observer.disconnect();
                    setTimeout(() => {
                        observer.observe(target, config);
                    }, 250);
                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["P" /* targetedCleanup */])(tag, inventory);
                    sortInventory(inventory, sortOptions, result, tag, screenName, shipName, undefined);
                    return;
                };
                let target = inventory;
                let config = { childList: true, subtree: true };
                let MutationObserver = window["MutationObserver"] || window["WebKitMutationObserver"];
                let observer = new MutationObserver(onMutationsObserved);
                observer.observe(target, config);
            }
            return;
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = InventoryOrganizer;

function sortInventory(inventory, sortOptions, result, tag, screenName, planetName, burn) {
    if (sortOptions.children.length <= 7) {
        Array.from(sortOptions.children).forEach(option => {
            if (option != sortOptions.firstChild && !option.classList.contains("pb-toggle")) {
                option.addEventListener("click", function () {
                    if (option.children[1]) {
                        option.children[1].style.display = "inline";
                    }
                    Array.from(sortOptions.children).forEach(optionInner => {
                        if (optionInner.children[1] && optionInner.classList.contains("pb-toggle")) {
                            optionInner.removeChild(optionInner.children[1]);
                            result["PMMGExtended"]["selected_sorting"].forEach(sortSettings => {
                                if (sortSettings[0] == screenName + planetName) {
                                    sortSettings[1] = "";
                                    Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
                                }
                                return;
                            });
                        }
                        return;
                    });
                    if (inventory.firstChild) {
                        inventory.insertBefore(inventory.firstChild, inventory.firstChild);
                    }
                    return;
                });
            }
            return;
        });
        if (burn) {
            sortOptions.appendChild(createToggle(result, sortOptions, "BRN", findIfActive(result["PMMGExtended"]["selected_sorting"], screenName + planetName, "BRN"), screenName + planetName, inventory));
        }
        result["PMMGExtended"]["sorting"].forEach(settings => {
            if (!settings[0] || !settings[1] || !settings[2]) {
                return;
            }
            if (settings[1].toUpperCase() != planetName.toUpperCase()) {
                return;
            }
            sortOptions.appendChild(createToggle(result, sortOptions, settings[0], findIfActive(result["PMMGExtended"]["selected_sorting"], screenName + planetName, settings[0]), screenName + planetName, inventory));
            return;
        });
    }
    if (sortOptions.children[sortOptions.children.length - 1] && sortOptions.children[sortOptions.children.length - 1].textContent != "+") {
        const addButton = document.createElement("div");
        addButton.classList.add("InventorySortControls__criteria___ijLMgjm");
        sortOptions.appendChild(addButton);
        const addLabel = document.createElement("div");
        addLabel.textContent = "+";
        addButton.appendChild(addLabel);
        addButton.addEventListener("click", function () {
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["N" /* showBuffer */])("XIT SORT_" + planetName);
            return;
        });
    }
    var activeSort = "";
    result["PMMGExtended"]["selected_sorting"].forEach(sortSettings => {
        if (sortSettings[0] == screenName + planetName) {
            activeSort = sortSettings[1];
        }
        return;
    });
    Array.from(sortOptions.children).forEach(option => {
        if (option != sortOptions.firstChild && option.firstChild && option.firstChild.textContent == activeSort && !option.children[1]) {
            const toggleIndicator = document.createElement("div");
            toggleIndicator.innerHTML = __WEBPACK_IMPORTED_MODULE_3__GameProperties__["l" /* SortingTriangleHTML */];
            toggleIndicator.style.marginLeft = "2px";
            option.appendChild(toggleIndicator);
        }
        else if (option.firstChild && option.firstChild.textContent != activeSort && option.children[1]) {
            if (option.classList.contains("pb-toggle")) {
                option.removeChild(option.children[1]);
            }
            else if (activeSort != "") {
                option.children[1].style.display = "none";
            }
            else {
                option.children[1].style.display = "inline";
            }
        }
        return;
    });
    if (activeSort == "") {
        return;
    }
    var materials = Array.from(inventory.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].FullMaterialIcon));
    materials.sort(materialSort);
    var sorted = [];
    var sortingDetails = [];
    result["PMMGExtended"]["sorting"].forEach(result_sortingDetails => {
        if (result_sortingDetails[0] == activeSort && result_sortingDetails[1] == planetName) {
            sortingDetails = result_sortingDetails;
        }
        return;
    });
    if (activeSort != "BRN") {
        if (sortingDetails.length < 3) {
            return;
        }
        if (sortingDetails[4]) {
            var materialsToSort = [];
            sortingDetails[2].forEach(category => {
                materialsToSort = materialsToSort.concat(category[1]);
            });
            var materialsToSort = materialsToSort.filter((c, index) => {
                return materialsToSort.indexOf(c) === index;
            });
            materialsToSort.forEach(ticker => {
                if (!materialListContains(materials, ticker)) {
                    const matElement = Object(__WEBPACK_IMPORTED_MODULE_0__util__["l" /* createMaterialElement */])(ticker, tag, "0", true, false);
                    if (!matElement) {
                        return;
                    }
                    const matQuantityElem = matElement.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialQuantity);
                    if (matQuantityElem) {
                        matQuantityElem.style.color = "#cc0000";
                    }
                    materials.push(matElement);
                }
            });
            materials.sort(materialSort);
        }
        sortingDetails[2].forEach(category => {
            const categoryTitle = document.createElement('h3');
            categoryTitle.appendChild(document.createTextNode(category[0]));
            categoryTitle.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
            categoryTitle.style.width = "100%";
            categoryTitle.classList.add(tag);
            inventory.appendChild(categoryTitle);
            var areItemsInCategory = false;
            materials.forEach(material => {
                const tickerElem = material.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
                if (!tickerElem) {
                    return;
                }
                const ticker = tickerElem.textContent;
                if (ticker && category[1].includes(ticker) && !sorted.includes(ticker)) {
                    inventory.appendChild(material);
                    areItemsInCategory = true;
                }
            });
            if (!areItemsInCategory) {
                inventory.removeChild(categoryTitle);
            }
            sorted = sorted.concat(category[1]);
            return;
        });
    }
    if (sortingDetails[3] || activeSort == "BRN") {
        if (burn) {
            const workforceMaterials = extractMaterials(burn, "workforce");
            const inputMaterials = extractMaterials(burn, "input");
            const outputMaterials = extractMaterials(burn, "output");
            const workforceTitle = document.createElement('h3');
            workforceTitle.appendChild(document.createTextNode("Consumables"));
            workforceTitle.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
            workforceTitle.style.width = "100%";
            workforceTitle.classList.add(tag);
            inventory.appendChild(workforceTitle);
            var areConsumables = false;
            materials.forEach(material => {
                const tickerElem = material.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
                if (!tickerElem) {
                    return;
                }
                const ticker = tickerElem.textContent;
                if (ticker && workforceMaterials.includes(ticker) && !inputMaterials.includes(ticker) && !outputMaterials.includes(ticker) && !sorted.includes(ticker)) {
                    inventory.appendChild(material);
                    areConsumables = true;
                }
            });
            if (!areConsumables) {
                inventory.removeChild(workforceTitle);
            }
            const inputTitle = document.createElement('h3');
            inputTitle.appendChild(document.createTextNode("Inputs"));
            inputTitle.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
            inputTitle.style.width = "100%";
            inputTitle.classList.add(tag);
            inventory.appendChild(inputTitle);
            var areInputs = false;
            materials.forEach(material => {
                const tickerElem = material.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
                if (!tickerElem) {
                    return;
                }
                const ticker = tickerElem.textContent;
                if (ticker && inputMaterials.includes(ticker) && !sorted.includes(ticker)) {
                    inventory.appendChild(material);
                    areInputs = true;
                }
            });
            if (!areInputs) {
                inventory.removeChild(inputTitle);
            }
            const outputTitle = document.createElement('h3');
            outputTitle.appendChild(document.createTextNode("Outputs"));
            outputTitle.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
            outputTitle.style.width = "100%";
            outputTitle.classList.add(tag);
            inventory.appendChild(outputTitle);
            var areOutputs = false;
            materials.forEach(material => {
                const tickerElem = material.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
                if (!tickerElem) {
                    return;
                }
                const ticker = tickerElem.textContent;
                if (ticker && outputMaterials.includes(ticker) && !inputMaterials.includes(ticker) && !sorted.includes(ticker)) {
                    inventory.appendChild(material);
                    areOutputs = true;
                }
            });
            if (!areOutputs) {
                inventory.removeChild(outputTitle);
            }
            sorted = sorted.concat(workforceMaterials);
            sorted = sorted.concat(inputMaterials);
            sorted = sorted.concat(outputMaterials);
        }
    }
    const miscTitle = document.createElement('h3');
    miscTitle.appendChild(document.createTextNode("Other"));
    miscTitle.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].SidebarSectionHead);
    miscTitle.style.width = "100%";
    miscTitle.classList.add(tag);
    inventory.appendChild(miscTitle);
    var areMisc = false;
    materials.forEach(material => {
        const tickerElem = material.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
        if (!tickerElem) {
            return;
        }
        const ticker = tickerElem.textContent;
        if (ticker && !sorted.includes(ticker)) {
            inventory.appendChild(material);
            areMisc = true;
        }
        return;
    });
    if (!areMisc) {
        inventory.removeChild(miscTitle);
    }
    return;
}
function materialListContains(materials, ticker) {
    for (var i = 0; i < materials.length; i++) {
        const tickerElem = materials[i].querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
        if (!tickerElem) {
            continue;
        }
        if (ticker == tickerElem.textContent) {
            return true;
        }
    }
    return false;
}
function findIfActive(sortSettings, screenPlanet, sortModeName) {
    var match = false;
    sortSettings.forEach(settings => {
        if (settings[0] == screenPlanet && settings[1] == sortModeName) {
            match = true;
        }
        return match;
    });
    return match;
}
function createToggle(result, sortOptions, abbreviation, selected, combinedName, inventory) {
    const customSortButton = document.createElement("div");
    customSortButton.classList.add("InventorySortControls__criteria___ijLMgjm");
    customSortButton.classList.add("pb-toggle");
    const toggleLabel = document.createElement("div");
    toggleLabel.textContent = abbreviation;
    customSortButton.appendChild(toggleLabel);
    if (selected) {
        Array.from(sortOptions.children).forEach(option => {
            if (option.children[1]) {
                if (option.classList.contains("pb-toggle")) {
                    option.removeChild(option.children[1]);
                }
                else {
                    option.children[1].style.display = "none";
                }
            }
            return;
        });
        const toggleIndicator = document.createElement("div");
        toggleIndicator.innerHTML = __WEBPACK_IMPORTED_MODULE_3__GameProperties__["l" /* SortingTriangleHTML */];
        toggleIndicator.style.marginLeft = "2px";
        customSortButton.appendChild(toggleIndicator);
    }
    customSortButton.addEventListener("click", function () {
        Array.from(sortOptions.children).forEach(option => {
            if (option.children[1]) {
                if (option.classList.contains("pb-toggle")) {
                    option.removeChild(option.children[1]);
                }
                else {
                    option.children[1].style.display = "none";
                }
                if (inventory.firstChild) {
                    inventory.insertBefore(inventory.firstChild, inventory.firstChild);
                }
            }
            return;
        });
        const toggleIndicator = document.createElement("div");
        toggleIndicator.innerHTML = __WEBPACK_IMPORTED_MODULE_3__GameProperties__["l" /* SortingTriangleHTML */];
        toggleIndicator.style.marginLeft = "2px";
        customSortButton.appendChild(toggleIndicator);
        var savedBefore = false;
        result["PMMGExtended"]["selected_sorting"].forEach(sortingOptions => {
            if (sortingOptions[0] == combinedName) {
                sortingOptions[1] = abbreviation;
                savedBefore = true;
            }
            return;
        });
        if (!savedBefore) {
            result["PMMGExtended"]["selected_sorting"].push([combinedName, abbreviation]);
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(result);
        return;
    });
    return customSortButton;
}
function extractMaterials(burn, typeValue) {
    const materials = [];
    Object.keys(burn).forEach(mat => {
        if (burn[mat]["Type"] == typeValue) {
            materials.push(mat);
        }
    });
    return materials;
}
function materialSort(a, b) {
    const tickerElemA = a.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
    if (!tickerElemA) {
        return;
    }
    const tickerA = tickerElemA.textContent;
    const tickerElemB = b.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].MaterialText);
    if (!tickerElemB) {
        return;
    }
    const tickerB = tickerElemB.textContent;
    if (!__WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerA] || !__WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerB]) {
        return 0;
    }
    if (__WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerA][1] == __WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerB][1]) {
        return tickerA.localeCompare(tickerB);
    }
    return __WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerA][1].localeCompare(__WEBPACK_IMPORTED_MODULE_3__GameProperties__["g" /* MaterialNames */][tickerB][1]);
}


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Style__ = __webpack_require__(2);



class HeaderMinimizer {
    constructor(minByDefault) {
        this.tag = "pb-min-headers";
        this.minByDefault = minByDefault;
    }
    cleanup() {
        return;
    }
    run(allBuffers) {
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CX ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            minimizeHeaders(buffer, this.minByDefault, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CONT ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            minimizeHeaders(buffer, this.minByDefault, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("LM ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            minimizeHeaders(buffer, this.minByDefault, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("SYSI ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            minimizeHeaders(buffer, this.minByDefault, this.tag);
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HeaderMinimizer;

function minimizeHeaders(buffer, minByDefault, tag) {
    const bufferPanel = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferPanel);
    if (!bufferPanel || !bufferPanel.firstChild) {
        return;
    }
    const headers = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].HeaderRow);
    if (headers.length == 0) {
        return;
    }
    if (headers[0] && headers[0].classList.contains(tag)) {
        return;
    }
    if (minByDefault) {
        Array.from(headers).forEach(header => {
            const label = header.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ContDFormLabel);
            if (label && label.textContent == "Termination request") {
                const value = header.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ContDFormInput);
                if (value && value.textContent != "--") {
                    return;
                }
            }
            if (!header.classList.contains(tag)) {
                header.style.display = "none";
            }
        });
    }
    const minimizeButton = document.createElement("div");
    minimizeButton.textContent = minByDefault ? "+" : "-";
    minimizeButton.classList.add("pb-minimize");
    minimizeButton.classList.add("pb-minimize-cx");
    minimizeButton.addEventListener("click", function () {
        const minimize = minimizeButton.textContent == "-";
        minimizeButton.textContent = minimize ? "+" : "-";
        Array.from(headers).forEach(header => {
            const label = header.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ContDFormLabel);
            if (label && label.textContent == "Termination request") {
                const value = header.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ContDFormInput);
                if (value && value.textContent != "--") {
                    return;
                }
            }
            if (!header.classList.contains(tag)) {
                header.style.display = minimize ? "none" : "flex";
            }
            return;
        });
        return;
    });
    headers[0].parentElement.insertBefore(createHeaderRow("Minimize", minimizeButton, tag), headers[0]);
    return;
}
function createHeaderRow(labelText, rightSideContents, tag) {
    const row = document.createElement("div");
    row.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].HeaderRow);
    row.classList.add(tag);
    const label = document.createElement("label");
    label.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormLabel);
    label.textContent = labelText;
    row.appendChild(label);
    const content = document.createElement("div");
    content.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].FormSaveInput);
    const rightSideDiv = document.createElement("div");
    rightSideDiv.appendChild(rightSideContents);
    content.appendChild(rightSideDiv);
    row.appendChild(content);
    return row;
}


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);


class PendingContracts {
    constructor(userInfo) {
        this.tag = "pb-pending-contracts";
        this.userInfo = userInfo;
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["z" /* genericCleanup */])(this.tag);
    }
    run() {
        const contractLines = Array.from(document.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].SidebarContract));
        if (contractLines.length > 0 && this.userInfo["PMMG-User-Info"] && this.userInfo["PMMG-User-Info"]["contracts"]) {
            const contracts = this.userInfo["PMMG-User-Info"]["contracts"];
            var contractdict = {};
            Object(__WEBPACK_IMPORTED_MODULE_0__util__["i" /* createContractDict */])(contracts, contractdict);
            contractLines.forEach(contract => {
                const contractIDElement = contract.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].SidebarContractId);
                if (!contractIDElement) {
                    return;
                }
                const contractID = contractIDElement.textContent;
                if (!contractID) {
                    return;
                }
                if (contractdict[contractID] && contractdict[contractID].partner.name) {
                    var partnercode = contractdict[contractID].partner.name;
                    if (partnercode.length > 19) {
                        partnercode = contractdict[contractID].partner.code || contractdict[contractID].partner.name.split(" ")[0];
                    }
                    const nameSpan = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(`${partnercode}`, this.tag);
                    nameSpan.style.width = "100px";
                    contract.insertBefore(nameSpan, contract.firstChild);
                    return;
                }
                const nameSpan = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Unknown", this.tag);
                nameSpan.style.width = "100px";
                contract.insertBefore(nameSpan, contract.firstChild);
            });
            return;
        }
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PendingContracts;



/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export HideElement */
/* unused harmony export UnHideElement */
/* unused harmony export ClearBuildingLists */
/* unused harmony export ClearBase */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Style__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__GameProperties__ = __webpack_require__(3);




class CompactUI {
    constructor(pmmgSettings) {
        this.tag = "pb-compactui";
        this.pmmgSettings = pmmgSettings;
    }
    cleanup() {
    }
    run(allBuffers) {
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("BBL", allBuffers);
        if (buffers) {
            buffers.forEach(buffer => {
                ClearBuildingLists(buffer, this.pmmgSettings, this.tag);
            });
        }
        ;
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("BS", allBuffers);
        if (buffers) {
            buffers.forEach(buffer => {
                ClearBase(buffer, this.tag);
            });
        }
        ;
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CXOS", allBuffers);
        if (buffers) {
            buffers.forEach(buffer => {
                ShortenNames(buffer);
            });
        }
        ;
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CompactUI;

function ShortenNames(buffer) {
    const links = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
    links.forEach(link => {
        if (link.textContent && __WEBPACK_IMPORTED_MODULE_3__GameProperties__["d" /* Exchanges */][link.textContent]) {
            link.textContent = __WEBPACK_IMPORTED_MODULE_3__GameProperties__["d" /* Exchanges */][link.textContent];
        }
    });
    const headers = buffer.querySelectorAll("th");
    headers.forEach(header => {
        if (header.textContent == "Exchange") {
            header.textContent = "Exc.";
        }
    });
}
function HideElement(element, tag) {
    element.style.display = "none";
    element.classList.add(tag + "-hidden");
}
function UnHideElement(element, tag) {
    element.style.display = "";
    element.classList.remove(tag + "-hidden");
}
function ClearBuildingLists(buffer, pmmgSettings, tag) {
    const nameElem = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BuildingList);
    if (!nameElem || !nameElem.textContent)
        return;
    Array.from(buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].Divider)).forEach((row) => {
        if (row.childNodes.length < 2) {
            var newmenu = document.createElement("span");
            var indicator = document.createElement("div");
            var value = document.createElement("div");
            newmenu.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButton));
            indicator.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonToggled));
            value.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonValue));
            value.innerText = "Visible";
            row.appendChild(newmenu);
            newmenu.appendChild(indicator);
            newmenu.appendChild(value);
            newmenu.addEventListener("click", function () {
                if (indicator.classList.contains(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonToggled[1])) {
                    if (row.nextElementSibling)
                        HideElement(row.nextElementSibling, tag);
                    indicator.classList.remove(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonToggled));
                    indicator.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonUnToggled));
                }
                else {
                    if (row.nextElementSibling)
                        UnHideElement(row.nextElementSibling, tag);
                    indicator.classList.remove(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonUnToggled));
                    indicator.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].RadioButtonToggled));
                }
            });
            if (row.innerText.includes("Infrastructure")) {
                var event = new CustomEvent("click", { "detail": "fake click" });
                newmenu.dispatchEvent(event);
            }
        }
    });
    Array.from(nameElem.getElementsByTagName("table")).forEach((table) => {
        var repaired = false;
        var EstablishRow;
        var buttons = table.parentNode.getElementsByTagName("button");
        buttons[1].classList.remove(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ButtonEnabled));
        buttons[1].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ButtonDanger));
        Array.from(table.rows).forEach(row => {
            let Line;
            (function (Line) {
                Line[Line["Established"] = 0] = "Established";
                Line[Line["Repair"] = 1] = "Repair";
                Line[Line["Cost"] = 2] = "Cost";
                Line[Line["Refund"] = 3] = "Refund";
                Line[Line["Value"] = 4] = "Value";
                Line[Line["Condition"] = 5] = "Condition";
            })(Line || (Line = {}));
            var dict = {
                'Established': Line.Established,
                'Last repair': Line.Repair,
                'Repair costs': Line.Cost,
                'Reclaimable materials': Line.Refund,
                'Book value': Line.Value,
                'Condition': Line.Condition
            };
            var linetype = Line.Established;
            Array.from(row.getElementsByTagName("td")).forEach(data => {
                var text = data.innerText;
                if (!text) {
                    return;
                }
                if (dict[text] != null) {
                    linetype = dict[text];
                    if (linetype == Line.Established)
                        EstablishRow = row;
                }
                else if (text == "--")
                    HideElement(row, tag);
                else if (text == "none")
                    HideElement(row, tag);
                else {
                    text.split(" ").forEach(word => {
                        var value = parseFloat(word);
                        if (!Number.isNaN(value)) {
                            if (linetype == Line.Repair)
                                repaired = true;
                            if (linetype == Line.Condition || linetype == Line.Established || linetype == Line.Repair) {
                                var bar = data.getElementsByTagName("progress");
                                if (value > 180)
                                    HideElement(row, tag);
                                else if (bar && bar.length > 0) {
                                    bar[0].classList.remove(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarColors));
                                    bar[0].value = value;
                                    var progress = bar[0].value / bar[0].max;
                                    if (linetype == Line.Condition) {
                                        if (value > 98 && buttons[0].classList.contains(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ButtonEnabled[0])) {
                                            buttons[0].classList.remove(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ButtonEnabled));
                                            buttons[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ButtonDanger));
                                        }
                                        if (progress > 0.90)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarGood));
                                        else if (progress > 0.80)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarWarning));
                                        else if (progress > 0)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarDanger));
                                    }
                                    else {
                                        bar[0].value = 180 - value;
                                        progress = bar[0].value / bar[0].max;
                                        var threshold = pmmgSettings["PMMGExtended"]["repair_threshold"] ? pmmgSettings["PMMGExtended"]["repair_threshold"] / 180.0 : (70.0 / 180.0);
                                        if (progress > 0.75)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarGood));
                                        else if (progress > threshold)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarWarning));
                                        else if (progress > 0)
                                            bar[0].classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBarDanger));
                                    }
                                }
                                else {
                                    var newbar = document.createElement("progress");
                                    newbar.classList.add(...Object(__WEBPACK_IMPORTED_MODULE_2_Style__["j" /* WithStyles */])(__WEBPACK_IMPORTED_MODULE_2_Style__["h" /* Style */].ProgressBar));
                                    if (linetype == Line.Condition)
                                        newbar.max = 100;
                                    else
                                        newbar.max = 180;
                                    data.insertBefore(newbar, data.firstChild);
                                }
                            }
                            else if (linetype == Line.Value && value < 2000)
                                HideElement(row, tag);
                            else if (value <= 1)
                                HideElement(row, tag);
                        }
                    });
                }
            });
            if (repaired)
                HideElement(EstablishRow, tag);
        });
    });
}
function ClearBase(buffer, tag) {
    const elements = Array.from(buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].HeaderRow));
    if (elements.length == 0) {
        return;
    }
    elements[0].style.display = "none";
    const areaBar = elements[0].getElementsByTagName("progress")[0];
    if (!areaBar) {
        return;
    }
    const areaBarCopy = areaBar.cloneNode(true);
    areaBarCopy.classList.add(tag);
    const editdiv = elements[1].getElementsByTagName("div")[0];
    if (editdiv.firstChild.classList.contains(tag) && editdiv.firstChild) {
        editdiv.removeChild(editdiv.firstChild);
    }
    editdiv.insertBefore(areaBarCopy, editdiv.lastChild);
    Array.from(buffer.getElementsByTagName("table")).forEach((table) => {
        Array.from(table.rows).forEach(row => {
            var data = Array.from(row.getElementsByTagName("td"));
            if (data.length == 0) {
                data = Array.from(row.getElementsByTagName("th"));
                data[2].innerText = "Current";
            }
            else {
                var required = parseFloat(data[1].innerText);
                var workforce = parseFloat(data[2].innerText.split(" ")[0]);
                var capacity = parseFloat(data[3].innerText);
                const bar = data[4].getElementsByTagName("div")[0];
                const barValue = bar.getElementsByTagName("progress")[0].title;
                if (bar.lastChild && bar.lastChild.classList.contains(tag)) {
                    bar.removeChild(bar.lastChild);
                }
                bar.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(barValue, tag));
                bar.style.display = "flex";
                bar.style.flexDirection = "row";
                bar.style.justifyContent = "left";
                if (required < 1 && capacity < 1 && workforce < 1)
                    HideElement(row, tag);
            }
        });
    });
}


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export evaluateMath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class FormulaReplacer {
    constructor() {
        this.tag = "pb-formulas";
    }
    cleanup() {
        return;
    }
    run(allBuffers) {
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CXPO ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            addListeners(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("FXPO ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            addListeners(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("LMP ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            addListeners(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CONTD ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            addListeners(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("MTRA ", allBuffers);
        if (!buffers) {
            return;
        }
        buffers.forEach(buffer => {
            addListeners(buffer, this.tag);
        });
        return;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FormulaReplacer;

function addListeners(buffer, tag) {
    const inputs = buffer.querySelectorAll("input");
    Array.from(inputs).forEach(input => {
        if (input.classList.contains(tag)) {
            return;
        }
        input.classList.add(tag);
        input.addEventListener("keyup", function (e) {
            if (e.key != 'Enter') {
                return;
            }
            if (input.value && input.value.charAt(0) == "=") {
                const expression = input.value.substring(1);
                var simplifiedExpression = evaluateMath(expression);
                simplifiedExpression = parseFloat(simplifiedExpression).toLocaleString(undefined, { useGrouping: false });
                Object(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* changeValue */])(input, simplifiedExpression || "NaN");
            }
        });
    });
}
function evaluateMath(expression, depth) {
    if (!depth) {
        depth = 0;
    }
    expression = expression.replace(/\s/g, "");
    expression = expression.replace(/,/g, ".");
    if (/[^0-9.+\-\/*\^\(\)]/.test(expression)) {
        return null;
    }
    const leftCount = (expression.match(/\(/g) || []).length;
    const rightCount = (expression.match(/\)/g) || []).length;
    if (leftCount > rightCount) {
        expression = expression + ")".repeat(leftCount - rightCount);
    }
    else if (rightCount > leftCount) {
        expression = "(".repeat(rightCount - leftCount) + expression;
    }
    var match = expression.match(/\(/);
    if (match) {
        var pCounter = 1;
        var substring = expression.substring(match.index + 1);
        const beginIndex = match.index;
        var offset = beginIndex + 1;
        var leftMatch;
        var rightMatch;
        do {
            leftMatch = substring.match(/\(/);
            rightMatch = substring.match(/\)/);
            if (leftMatch && (!rightMatch || leftMatch.index < rightMatch.index)) {
                pCounter++;
                substring = substring.substring(leftMatch.index + 1);
                offset += leftMatch.index + 1;
            }
            else if (rightMatch) {
                pCounter--;
                substring = substring.substring(rightMatch.index + 1);
                offset += rightMatch.index + 1;
            }
            if (pCounter == 0) {
                const result = evaluateMath(expression.substring(beginIndex + 1, offset - 1), depth + 1);
                expression = expression.replace(expression.substring(beginIndex, offset), result);
                expression = evaluateMath(expression, depth + 1);
                return expression;
            }
        } while (leftMatch || rightMatch);
    }
    var match = expression.match(/(?:(?<!\d))(-?\d+(?:\.\d+)?)\^(-?\d+(?:\.\d+)?)/);
    if (match) {
        var left = parseFloat(match[1]);
        var right = parseFloat(match[2]);
        var result = Math.pow(left, right);
        expression = expression.replace(match[0], result.toString());
        expression = evaluateMath(expression, depth + 1);
        return expression;
    }
    const multMatch = expression.match(/(?:(?<!\d))(-?\d+(?:\.\d+)?)\*(-?\d+(?:\.\d+)?)/);
    const divMatch = expression.match(/(?:(?<!\d))(-?\d+(?:\.\d+)?)\/(-?\d+(?:\.\d+)?)/);
    if (multMatch && (!divMatch || divMatch.index > multMatch.index)) {
        var left = parseFloat(multMatch[1]);
        var right = parseFloat(multMatch[2]);
        var result = left * right;
        expression = expression.replace(multMatch[0], result.toString());
        expression = evaluateMath(expression, depth + 1);
        return expression;
    }
    else if (divMatch) {
        var left = parseFloat(divMatch[1]);
        var right = parseFloat(divMatch[2]);
        var result = left / right;
        expression = expression.replace(divMatch[0], result.toString());
        expression = evaluateMath(expression, depth + 1);
        return expression;
    }
    const addMatch = expression.match(/(?:(?<!\d))(-?\d+(?:\.\d+)?)\+(-?\d+(?:\.\d+)?)/);
    const subMatch = expression.match(/(?:(?<!\d))(-?\d+(?:\.\d+)?)\-(-?\d+(?:\.\d+)?)/);
    if (addMatch && (!subMatch || subMatch.index > addMatch.index)) {
        var left = parseFloat(addMatch[1]);
        var right = parseFloat(addMatch[2]);
        var result = left + right;
        expression = expression.replace(addMatch[0], result.toString());
        expression = evaluateMath(expression, depth + 1);
        return expression;
    }
    else if (subMatch) {
        var left = parseFloat(subMatch[1]);
        var right = parseFloat(subMatch[2]);
        var result = left - right;
        expression = expression.replace(subMatch[0], result.toString());
        expression = evaluateMath(expression, depth + 1);
        return expression;
    }
    if (/[^\-0-9.]/.test(expression)) {
        return null;
    }
    return expression;
}


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);


class AdvancedMode {
    constructor(enabled) {
        this.tag = "pb-advanced";
        this.enabled = enabled;
    }
    cleanup() {
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["z" /* genericCleanup */])("pb-cleanup");
    }
    run(allBuffers) {
        if (!this.enabled) {
            return;
        }
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("FLT", allBuffers);
        buffers.forEach(buffer => {
            cleanFleet(buffer, this.tag);
        });
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("INV", allBuffers);
        buffers.forEach(buffer => {
            cleanInv(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CXOS", allBuffers);
        buffers.forEach(buffer => {
            cleanCXOS(buffer);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("COGCPEX ", allBuffers);
        buffers.forEach(buffer => {
            cleanCOGCPEX(buffer, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("SHPF", allBuffers);
        buffers.forEach(buffer => {
            cleanSHPF(buffer);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AdvancedMode;

function cleanInv(buffer, tag) {
    const bufferHeaders = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferHeader);
    if (!bufferHeaders) {
        return;
    }
    const parameters = bufferHeaders.textContent;
    if (!parameters || parameters != "INV") {
        return;
    }
    const links = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
    links.forEach(link => {
        if (link.textContent) {
            if (link.classList.contains(tag)) {
                return;
            }
            link.classList.add(tag);
            link.textContent = Object(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* cleanPlanetName */])(link.textContent);
        }
    });
    const rows = buffer.querySelectorAll("tr");
    rows.forEach(row => {
        if (row.classList.contains(tag)) {
            return;
        }
        row.classList.add(tag);
        if (row.firstChild && row.firstChild.firstChild && row.firstChild.firstChild.textContent && cleanINVNames[row.firstChild.firstChild.textContent]) {
            row.firstChild.firstChild.textContent = cleanINVNames[row.firstChild.firstChild.textContent];
        }
    });
}
const cleanINVNames = {
    "Cargo hold": "Ship",
    "Base storage": "Base",
    "Warehouse unit": "WAR",
    "STL fuel tank": "STL tank",
    "FTL fuel tank": "FTL tank"
};
function cleanFleet(buffer, tag) {
    const rows = buffer.querySelectorAll("tr");
    rows.forEach(row => {
        if (row.classList.contains(tag)) {
            return;
        }
        row.classList.add(tag);
        if (row.firstChild) {
            row.firstChild.style.display = "none";
        }
        if (row.children && row.children[2] && row.children[2].firstChild && row.children[2].firstChild.children && row.children[2].firstChild.children[2]) {
            var text = row.children[2].textContent || "";
            text = text.replace("m³", "").replace("t", "").replace(/1,000/g, "1k").replace(/2,000/g, "2k").replace(/3,000/g, "3k");
            row.children[2].firstChild.children[2].textContent = text;
        }
    });
    const links = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
    links.forEach(link => {
        if (link.textContent) {
            if (link.classList.contains(tag)) {
                return;
            }
            link.classList.add(tag);
            link.textContent = Object(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* cleanPlanetName */])(link.textContent);
        }
    });
    const tableEntries = buffer.querySelectorAll("td");
    tableEntries.forEach(entry => {
        if (entry.textContent) {
            if (Object.keys(shipStatus).includes(entry.textContent)) {
                entry.style.textAlign = "center";
                entry.style.fontSize = "0";
                const statusIndicator = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(shipStatus[entry.textContent], "pb-cleanup");
                statusIndicator.title = entry.textContent;
                statusIndicator.style.fontSize = "11px";
                entry.appendChild(statusIndicator);
            }
        }
        entry.style.padding = "2px 4px";
    });
}
const shipStatus = {
    "taking off": "↑",
    "departing": "↗",
    "charging": "±",
    "jumping": "⟿",
    "approaching": "↘",
    "landing": "↓",
    "stationary": "⦁",
    "in transit": "⟶"
};
function cleanCXOS(buffer) {
    const rows = buffer.querySelectorAll("tr");
    rows.forEach(row => {
        if (row.firstChild) {
            row.firstChild.style.display = "none";
        }
    });
}
function cleanCOGCPEX(buffer, tag) {
    const links = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].BufferLink);
    links.forEach(link => {
        if (link.textContent) {
            if (link.classList.contains(tag)) {
                return;
            }
            link.classList.add(tag);
            link.textContent = link.textContent.replace("Advertising Campaign: ", "");
            link.textContent = link.textContent.replace("Education Events: ", "");
        }
    });
    const buttons = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].SmallButton);
    buttons.forEach(button => {
        if (button.textContent) {
            if (button.classList.contains(tag)) {
                return;
            }
            button.classList.add(tag);
            button.textContent = "vote";
        }
    });
}
function cleanSHPF(buffer) {
    const bufferInventorySortOptions = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].InventorySortOptions);
    bufferInventorySortOptions === null || bufferInventorySortOptions === void 0 ? void 0 : bufferInventorySortOptions.forEach((value) => value.style.display = "none");
    const storeViewName = buffer.querySelectorAll(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].StoreViewName);
    storeViewName === null || storeViewName === void 0 ? void 0 : storeViewName.forEach((value) => value.style.display = "none");
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);

class CXOBHighlighter {
    constructor(userInfo) {
        this.tag = "pb-cxob-highlight";
        this.userInfo = userInfo;
    }
    cleanup() {
    }
    run(allBuffers) {
        if (this.userInfo["PMMG-User-Info"] && this.userInfo["PMMG-User-Info"]["company-name"]) {
            const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CXOB ", allBuffers);
            buffers.forEach(buffer => {
                highlightNames(buffer, this.userInfo, this.tag);
            });
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CXOBHighlighter;

function highlightNames(buffer, userInfo, tag) {
    const rows = buffer.querySelectorAll("tr");
    rows.forEach(row => {
        if (row.classList.contains(tag)) {
            return;
        }
        row.classList.add(tag);
        if (row.firstChild && row.firstChild.textContent && row.firstChild.textContent == userInfo["PMMG-User-Info"]["company-name"]) {
            Array.from(row.children).forEach(child => {
                child.style.background = "rgba(255, 255, 255, 0.15)";
            });
        }
    });
}


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameProperties__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Style__ = __webpack_require__(2);




class CXPOOrderBook {
    constructor(userInfo) {
        this.tag = "pb-cxpo-ob";
        this.userInfo = userInfo;
    }
    cleanup() {
    }
    run(allBuffers) {
        if (this.userInfo["PMMG-User-Info"] && this.userInfo["PMMG-User-Info"]["company-name"]) {
            const buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("CXPO ", allBuffers);
            buffers.forEach(buffer => {
                addOrderBook(buffer, this.userInfo, this.tag);
            });
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CXPOOrderBook;

function addOrderBook(buffer, userInfo, tag) {
    const form = buffer.querySelector("form");
    if (!form) {
        return;
    }
    const exchange = document.evaluate("div[label/span[text()='Exchange']]//div/div", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (!exchange || !exchange.textContent) {
        return;
    }
    const exchangeTicker = exchange.textContent.length == 3 ? __WEBPACK_IMPORTED_MODULE_1__GameProperties__["c" /* ExchangeTickers */][exchange.textContent] : __WEBPACK_IMPORTED_MODULE_1__GameProperties__["c" /* ExchangeTickers */][__WEBPACK_IMPORTED_MODULE_1__GameProperties__["d" /* Exchanges */][exchange.textContent]];
    if (!exchangeTicker) {
        return;
    }
    const material = document.evaluate("div[label/span[text()='Material']]//div/div", form, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (!material || !material.textContent || !__WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][material.textContent]) {
        return;
    }
    const ticker = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["h" /* Materials */][material.textContent][0] + "." + exchangeTicker;
    if (!userInfo["PMMG-User-Info"]["cxob"][ticker] || !form.parentElement) {
        return;
    }
    if (form.classList.contains(userInfo["PMMG-User-Info"]["cxob"][ticker]["timestamp"].toString())) {
        return;
    }
    form.classList.add(userInfo["PMMG-User-Info"]["cxob"][ticker]["timestamp"]);
    if (form.parentElement.children[1]) {
        form.parentElement.children[1].remove();
    }
    if (__WEBPACK_IMPORTED_MODULE_1__GameProperties__["d" /* Exchanges */][exchange.textContent]) {
        exchange.textContent = __WEBPACK_IMPORTED_MODULE_1__GameProperties__["d" /* Exchanges */][exchange.textContent];
    }
    form.parentElement.style.display = "flex";
    const orderBook = document.createElement("div");
    orderBook.classList.add("pb-scroll");
    orderBook.style.height = "248px";
    form.parentElement.appendChild(orderBook);
    form.style.flex = "1";
    Array.from(form.querySelectorAll(__WEBPACK_IMPORTED_MODULE_2__Selector__["a" /* Selector */].FormLabels)).forEach(label => {
        label.style.minWidth = "95px";
    });
    const orderTable = document.createElement("table");
    orderBook.appendChild(orderTable);
    const header = document.createElement("thead");
    orderTable.appendChild(header);
    const headerRow = document.createElement("tr");
    header.appendChild(headerRow);
    for (let label of ["Amt.", "Price"]) {
        const th = document.createElement("th");
        th.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(label, tag));
        headerRow.appendChild(th);
    }
    const offerBody = document.createElement("tbody");
    orderTable.appendChild(offerBody);
    const offerRow = document.createElement("tr");
    offerBody.appendChild(offerRow);
    const offerRowHeader = document.createElement("th");
    offerRowHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Offers", tag));
    offerRowHeader.colSpan = 2;
    offerRow.appendChild(offerRowHeader);
    const orderInfo = userInfo["PMMG-User-Info"]["cxob"][ticker];
    if (orderInfo.sellingOrders.length > 0) {
        const sortedOrders = orderInfo.sellingOrders.reverse();
        sortedOrders.forEach(order => {
            const orderRow = document.createElement("tr");
            offerBody.appendChild(orderRow);
            const amountColumn = document.createElement("td");
            amountColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBAmount);
            const priceColumn = document.createElement("td");
            priceColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBOffer);
            priceColumn.style.padding = "2px 2px";
            orderRow.appendChild(amountColumn);
            orderRow.appendChild(priceColumn);
            amountColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(order.amount ? order.amount.toLocaleString(undefined, { maximumFractionDigits: 0 }) : "∞", tag));
            priceColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(order.limit.amount.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }), tag));
            if (order.amount && order.trader.name == userInfo["PMMG-User-Info"]["company-name"]) {
                amountColumn.style.background = "rgba(255, 255, 255, 0.15)";
                priceColumn.style.background = "rgba(255, 255, 255, 0.15)";
            }
        });
    }
    else {
        const emptyRow = document.createElement("tr");
        offerBody.appendChild(emptyRow);
        const emptyColumn = document.createElement("td");
        emptyColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBEmpty);
        emptyColumn.colSpan = 2;
        emptyColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("No offers.", tag));
        emptyRow.appendChild(emptyColumn);
    }
    const spreadBody = document.createElement("tbody");
    orderTable.appendChild(spreadBody);
    const spreadRow = document.createElement("tr");
    spreadBody.appendChild(spreadRow);
    const spreadColumn = document.createElement("td");
    spreadColumn.colSpan = 2;
    spreadColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBSpread);
    spreadRow.appendChild(spreadColumn);
    spreadColumn.textContent = "Spread: ";
    if (orderInfo.sellingOrders.length > 0 && orderInfo.buyingOrders.length > 0) {
        const minSell = orderInfo.sellingOrders.reduce((minValue, obj) => Math.min(minValue, obj.limit.amount), Infinity);
        const maxBuy = orderInfo.buyingOrders.reduce((maxValue, obj) => Math.max(maxValue, obj.limit.amount), -Infinity);
        const spreadElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])((minSell - maxBuy).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }), tag);
        spreadElem.style.color = "#eee";
        spreadColumn.appendChild(spreadElem);
    }
    else {
        const spreadElem = Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("--", tag);
        spreadElem.style.color = "#eee";
        spreadColumn.appendChild(spreadElem);
    }
    const requestBody = document.createElement("tbody");
    orderTable.appendChild(requestBody);
    const requestRow = document.createElement("tr");
    requestBody.appendChild(requestRow);
    const requestRowHeader = document.createElement("th");
    requestRowHeader.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("Requests", tag));
    requestRowHeader.colSpan = 2;
    requestRow.appendChild(requestRowHeader);
    if (orderInfo.buyingOrders.length > 0) {
        const sortedOrders = orderInfo.buyingOrders;
        sortedOrders.forEach(order => {
            const orderRow = document.createElement("tr");
            requestBody.appendChild(orderRow);
            const amountColumn = document.createElement("td");
            amountColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBAmount);
            const priceColumn = document.createElement("td");
            priceColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBRequest);
            priceColumn.style.padding = "2px 2px";
            orderRow.appendChild(amountColumn);
            orderRow.appendChild(priceColumn);
            amountColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(order.amount ? order.amount.toLocaleString(undefined, { maximumFractionDigits: 0 }) : "∞", tag));
            priceColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])(order.limit.amount.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }), tag));
            if (order.amount && order.trader.name == userInfo["PMMG-User-Info"]["company-name"]) {
                amountColumn.style.background = "rgba(255, 255, 255, 0.15)";
                priceColumn.style.background = "rgba(255, 255, 255, 0.15)";
            }
        });
    }
    else {
        const emptyRow = document.createElement("tr");
        requestBody.appendChild(emptyRow);
        const emptyColumn = document.createElement("td");
        emptyColumn.classList.add(...__WEBPACK_IMPORTED_MODULE_3__Style__["h" /* Style */].CXOBEmpty);
        emptyColumn.colSpan = 2;
        emptyColumn.appendChild(Object(__WEBPACK_IMPORTED_MODULE_0__util__["t" /* createTextSpan */])("No requests.", tag));
        emptyRow.appendChild(emptyColumn);
    }
    orderBook.scrollTop = Math.max(offerBody.offsetHeight - 90, 0);
}


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Selector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Style__ = __webpack_require__(2);



class ChatDeleteButton {
    constructor(pmmgSettings) {
        this.tag = "pb-chat-delete";
        this.pmmgSettings = pmmgSettings;
    }
    cleanup() {
    }
    run(allBuffers) {
        var buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("COMP ", allBuffers);
        buffers.forEach(buffer => {
            addChatDeleteToggle(buffer, this.pmmgSettings, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("COMG ", allBuffers);
        buffers.forEach(buffer => {
            addChatDeleteToggle(buffer, this.pmmgSettings, this.tag);
        });
        buffers = Object(__WEBPACK_IMPORTED_MODULE_0__util__["B" /* getBuffersFromList */])("COMU ", allBuffers);
        buffers.forEach(buffer => {
            addChatDeleteToggle(buffer, this.pmmgSettings, this.tag);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChatDeleteButton;

function addChatDeleteToggle(buffer, pmmgSettings, tag) {
    const channelControls = buffer.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].ChannelControls);
    if (!channelControls || channelControls.classList.contains(tag)) {
        return;
    }
    channelControls.classList.add(tag);
    var chatToggle = document.createElement("div");
    channelControls.appendChild(chatToggle);
    chatToggle.innerHTML = `<div class="SelectButton__container___vjN14Xf"><span class="RadioItem__container___CSczqmG"><div class="RadioItem__indicator___QzQtjhA"></div><div class="RadioItem__value___Yd1Gt1T fonts__font-regular___Sxp1xjo type__type-small___pMQhMQO">disable delete</div></span></div>`;
    chatToggle = chatToggle.firstChild;
    if (!chatToggle) {
        return;
    }
    channelControls.appendChild(chatToggle);
    if (pmmgSettings["PMMGExtended"]["chat_delete_hidden"]) {
        const chatIndicator = chatToggle.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].RadioIndicator);
        if (!chatIndicator) {
            return;
        }
        chatIndicator.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].RadioButtonToggled);
    }
    chatToggle.addEventListener("click", function () {
        pmmgSettings["PMMGExtended"]["chat_delete_hidden"] = !pmmgSettings["PMMGExtended"]["chat_delete_hidden"];
        const chatIndicator = chatToggle.querySelector(__WEBPACK_IMPORTED_MODULE_1__Selector__["a" /* Selector */].RadioIndicator);
        if (!chatIndicator) {
            return;
        }
        if (pmmgSettings["PMMGExtended"]["chat_delete_hidden"]) {
            chatIndicator.classList.remove(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].RadioButtonUnToggled);
            chatIndicator.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].RadioButtonToggled);
            if (!document.getElementById("pmmg-chat-delete-style")) {
                const chatDelete = document.createElement("style");
                chatDelete.type = "text/css";
                chatDelete.id = "pmmg-chat-delete-style";
                chatDelete.textContent = __WEBPACK_IMPORTED_MODULE_2__Style__["c" /* ChatDeleteStyle */];
                const doc = document.querySelector("html");
                if (doc) {
                    doc.appendChild(chatDelete);
                }
            }
        }
        else {
            chatIndicator.classList.remove(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].RadioButtonToggled);
            chatIndicator.classList.add(...__WEBPACK_IMPORTED_MODULE_2__Style__["h" /* Style */].RadioButtonUnToggled);
            const chatStyle = document.getElementById("pmmg-chat-delete-style");
            if (chatStyle) {
                chatStyle.remove();
            }
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__util__["M" /* setSettings */])(pmmgSettings);
    });
}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,